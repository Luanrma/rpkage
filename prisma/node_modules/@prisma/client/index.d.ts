
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Campaign
 * 
 */
export type Campaign = $Result.DefaultSelection<Prisma.$CampaignPayload>
/**
 * Model CampaignUser
 * 
 */
export type CampaignUser = $Result.DefaultSelection<Prisma.$CampaignUserPayload>
/**
 * Model Character
 * 
 */
export type Character = $Result.DefaultSelection<Prisma.$CharacterPayload>
/**
 * Model Currency
 * 
 */
export type Currency = $Result.DefaultSelection<Prisma.$CurrencyPayload>
/**
 * Model Inventory
 * 
 */
export type Inventory = $Result.DefaultSelection<Prisma.$InventoryPayload>
/**
 * Model InventoryItem
 * 
 */
export type InventoryItem = $Result.DefaultSelection<Prisma.$InventoryItemPayload>
/**
 * Model Items
 * 
 */
export type Items = $Result.DefaultSelection<Prisma.$ItemsPayload>
/**
 * Model ItemTransactionHistory
 * 
 */
export type ItemTransactionHistory = $Result.DefaultSelection<Prisma.$ItemTransactionHistoryPayload>
/**
 * Model EquippedItem
 * 
 */
export type EquippedItem = $Result.DefaultSelection<Prisma.$EquippedItemPayload>
/**
 * Model Spells
 * 
 */
export type Spells = $Result.DefaultSelection<Prisma.$SpellsPayload>
/**
 * Model EquippedSpell
 * 
 */
export type EquippedSpell = $Result.DefaultSelection<Prisma.$EquippedSpellPayload>
/**
 * Model CharacterBattleHistory
 * 
 */
export type CharacterBattleHistory = $Result.DefaultSelection<Prisma.$CharacterBattleHistoryPayload>
/**
 * Model LevelingRule
 * 
 */
export type LevelingRule = $Result.DefaultSelection<Prisma.$LevelingRulePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.campaign`: Exposes CRUD operations for the **Campaign** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Campaigns
    * const campaigns = await prisma.campaign.findMany()
    * ```
    */
  get campaign(): Prisma.CampaignDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.campaignUser`: Exposes CRUD operations for the **CampaignUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CampaignUsers
    * const campaignUsers = await prisma.campaignUser.findMany()
    * ```
    */
  get campaignUser(): Prisma.CampaignUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.character`: Exposes CRUD operations for the **Character** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Characters
    * const characters = await prisma.character.findMany()
    * ```
    */
  get character(): Prisma.CharacterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.currency`: Exposes CRUD operations for the **Currency** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Currencies
    * const currencies = await prisma.currency.findMany()
    * ```
    */
  get currency(): Prisma.CurrencyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inventory`: Exposes CRUD operations for the **Inventory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inventories
    * const inventories = await prisma.inventory.findMany()
    * ```
    */
  get inventory(): Prisma.InventoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inventoryItem`: Exposes CRUD operations for the **InventoryItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryItems
    * const inventoryItems = await prisma.inventoryItem.findMany()
    * ```
    */
  get inventoryItem(): Prisma.InventoryItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.items`: Exposes CRUD operations for the **Items** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.items.findMany()
    * ```
    */
  get items(): Prisma.ItemsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.itemTransactionHistory`: Exposes CRUD operations for the **ItemTransactionHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ItemTransactionHistories
    * const itemTransactionHistories = await prisma.itemTransactionHistory.findMany()
    * ```
    */
  get itemTransactionHistory(): Prisma.ItemTransactionHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.equippedItem`: Exposes CRUD operations for the **EquippedItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EquippedItems
    * const equippedItems = await prisma.equippedItem.findMany()
    * ```
    */
  get equippedItem(): Prisma.EquippedItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.spells`: Exposes CRUD operations for the **Spells** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Spells
    * const spells = await prisma.spells.findMany()
    * ```
    */
  get spells(): Prisma.SpellsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.equippedSpell`: Exposes CRUD operations for the **EquippedSpell** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EquippedSpells
    * const equippedSpells = await prisma.equippedSpell.findMany()
    * ```
    */
  get equippedSpell(): Prisma.EquippedSpellDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.characterBattleHistory`: Exposes CRUD operations for the **CharacterBattleHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CharacterBattleHistories
    * const characterBattleHistories = await prisma.characterBattleHistory.findMany()
    * ```
    */
  get characterBattleHistory(): Prisma.CharacterBattleHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.levelingRule`: Exposes CRUD operations for the **LevelingRule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LevelingRules
    * const levelingRules = await prisma.levelingRule.findMany()
    * ```
    */
  get levelingRule(): Prisma.LevelingRuleDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Campaign: 'Campaign',
    CampaignUser: 'CampaignUser',
    Character: 'Character',
    Currency: 'Currency',
    Inventory: 'Inventory',
    InventoryItem: 'InventoryItem',
    Items: 'Items',
    ItemTransactionHistory: 'ItemTransactionHistory',
    EquippedItem: 'EquippedItem',
    Spells: 'Spells',
    EquippedSpell: 'EquippedSpell',
    CharacterBattleHistory: 'CharacterBattleHistory',
    LevelingRule: 'LevelingRule'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "campaign" | "campaignUser" | "character" | "currency" | "inventory" | "inventoryItem" | "items" | "itemTransactionHistory" | "equippedItem" | "spells" | "equippedSpell" | "characterBattleHistory" | "levelingRule"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Campaign: {
        payload: Prisma.$CampaignPayload<ExtArgs>
        fields: Prisma.CampaignFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CampaignFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CampaignFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          findFirst: {
            args: Prisma.CampaignFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CampaignFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          findMany: {
            args: Prisma.CampaignFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          create: {
            args: Prisma.CampaignCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          createMany: {
            args: Prisma.CampaignCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CampaignCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          delete: {
            args: Prisma.CampaignDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          update: {
            args: Prisma.CampaignUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          deleteMany: {
            args: Prisma.CampaignDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CampaignUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CampaignUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          upsert: {
            args: Prisma.CampaignUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          aggregate: {
            args: Prisma.CampaignAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCampaign>
          }
          groupBy: {
            args: Prisma.CampaignGroupByArgs<ExtArgs>
            result: $Utils.Optional<CampaignGroupByOutputType>[]
          }
          count: {
            args: Prisma.CampaignCountArgs<ExtArgs>
            result: $Utils.Optional<CampaignCountAggregateOutputType> | number
          }
        }
      }
      CampaignUser: {
        payload: Prisma.$CampaignUserPayload<ExtArgs>
        fields: Prisma.CampaignUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CampaignUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CampaignUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignUserPayload>
          }
          findFirst: {
            args: Prisma.CampaignUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CampaignUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignUserPayload>
          }
          findMany: {
            args: Prisma.CampaignUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignUserPayload>[]
          }
          create: {
            args: Prisma.CampaignUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignUserPayload>
          }
          createMany: {
            args: Prisma.CampaignUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CampaignUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignUserPayload>[]
          }
          delete: {
            args: Prisma.CampaignUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignUserPayload>
          }
          update: {
            args: Prisma.CampaignUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignUserPayload>
          }
          deleteMany: {
            args: Prisma.CampaignUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CampaignUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CampaignUserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignUserPayload>[]
          }
          upsert: {
            args: Prisma.CampaignUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignUserPayload>
          }
          aggregate: {
            args: Prisma.CampaignUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCampaignUser>
          }
          groupBy: {
            args: Prisma.CampaignUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<CampaignUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.CampaignUserCountArgs<ExtArgs>
            result: $Utils.Optional<CampaignUserCountAggregateOutputType> | number
          }
        }
      }
      Character: {
        payload: Prisma.$CharacterPayload<ExtArgs>
        fields: Prisma.CharacterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CharacterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CharacterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          findFirst: {
            args: Prisma.CharacterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CharacterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          findMany: {
            args: Prisma.CharacterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>[]
          }
          create: {
            args: Prisma.CharacterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          createMany: {
            args: Prisma.CharacterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CharacterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>[]
          }
          delete: {
            args: Prisma.CharacterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          update: {
            args: Prisma.CharacterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          deleteMany: {
            args: Prisma.CharacterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CharacterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CharacterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>[]
          }
          upsert: {
            args: Prisma.CharacterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          aggregate: {
            args: Prisma.CharacterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCharacter>
          }
          groupBy: {
            args: Prisma.CharacterGroupByArgs<ExtArgs>
            result: $Utils.Optional<CharacterGroupByOutputType>[]
          }
          count: {
            args: Prisma.CharacterCountArgs<ExtArgs>
            result: $Utils.Optional<CharacterCountAggregateOutputType> | number
          }
        }
      }
      Currency: {
        payload: Prisma.$CurrencyPayload<ExtArgs>
        fields: Prisma.CurrencyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CurrencyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CurrencyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          findFirst: {
            args: Prisma.CurrencyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CurrencyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          findMany: {
            args: Prisma.CurrencyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>[]
          }
          create: {
            args: Prisma.CurrencyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          createMany: {
            args: Prisma.CurrencyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CurrencyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>[]
          }
          delete: {
            args: Prisma.CurrencyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          update: {
            args: Prisma.CurrencyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          deleteMany: {
            args: Prisma.CurrencyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CurrencyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CurrencyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>[]
          }
          upsert: {
            args: Prisma.CurrencyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          aggregate: {
            args: Prisma.CurrencyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCurrency>
          }
          groupBy: {
            args: Prisma.CurrencyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CurrencyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CurrencyCountArgs<ExtArgs>
            result: $Utils.Optional<CurrencyCountAggregateOutputType> | number
          }
        }
      }
      Inventory: {
        payload: Prisma.$InventoryPayload<ExtArgs>
        fields: Prisma.InventoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          findFirst: {
            args: Prisma.InventoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          findMany: {
            args: Prisma.InventoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>[]
          }
          create: {
            args: Prisma.InventoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          createMany: {
            args: Prisma.InventoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InventoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>[]
          }
          delete: {
            args: Prisma.InventoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          update: {
            args: Prisma.InventoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          deleteMany: {
            args: Prisma.InventoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InventoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>[]
          }
          upsert: {
            args: Prisma.InventoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          aggregate: {
            args: Prisma.InventoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventory>
          }
          groupBy: {
            args: Prisma.InventoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryCountAggregateOutputType> | number
          }
        }
      }
      InventoryItem: {
        payload: Prisma.$InventoryItemPayload<ExtArgs>
        fields: Prisma.InventoryItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          findFirst: {
            args: Prisma.InventoryItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          findMany: {
            args: Prisma.InventoryItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>[]
          }
          create: {
            args: Prisma.InventoryItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          createMany: {
            args: Prisma.InventoryItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InventoryItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>[]
          }
          delete: {
            args: Prisma.InventoryItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          update: {
            args: Prisma.InventoryItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          deleteMany: {
            args: Prisma.InventoryItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InventoryItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>[]
          }
          upsert: {
            args: Prisma.InventoryItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          aggregate: {
            args: Prisma.InventoryItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryItem>
          }
          groupBy: {
            args: Prisma.InventoryItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryItemCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryItemCountAggregateOutputType> | number
          }
        }
      }
      Items: {
        payload: Prisma.$ItemsPayload<ExtArgs>
        fields: Prisma.ItemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          findFirst: {
            args: Prisma.ItemsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          findMany: {
            args: Prisma.ItemsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>[]
          }
          create: {
            args: Prisma.ItemsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          createMany: {
            args: Prisma.ItemsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ItemsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>[]
          }
          delete: {
            args: Prisma.ItemsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          update: {
            args: Prisma.ItemsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          deleteMany: {
            args: Prisma.ItemsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ItemsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ItemsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>[]
          }
          upsert: {
            args: Prisma.ItemsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          aggregate: {
            args: Prisma.ItemsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateItems>
          }
          groupBy: {
            args: Prisma.ItemsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ItemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemsCountArgs<ExtArgs>
            result: $Utils.Optional<ItemsCountAggregateOutputType> | number
          }
        }
      }
      ItemTransactionHistory: {
        payload: Prisma.$ItemTransactionHistoryPayload<ExtArgs>
        fields: Prisma.ItemTransactionHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemTransactionHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemTransactionHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemTransactionHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemTransactionHistoryPayload>
          }
          findFirst: {
            args: Prisma.ItemTransactionHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemTransactionHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemTransactionHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemTransactionHistoryPayload>
          }
          findMany: {
            args: Prisma.ItemTransactionHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemTransactionHistoryPayload>[]
          }
          create: {
            args: Prisma.ItemTransactionHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemTransactionHistoryPayload>
          }
          createMany: {
            args: Prisma.ItemTransactionHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ItemTransactionHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemTransactionHistoryPayload>[]
          }
          delete: {
            args: Prisma.ItemTransactionHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemTransactionHistoryPayload>
          }
          update: {
            args: Prisma.ItemTransactionHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemTransactionHistoryPayload>
          }
          deleteMany: {
            args: Prisma.ItemTransactionHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ItemTransactionHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ItemTransactionHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemTransactionHistoryPayload>[]
          }
          upsert: {
            args: Prisma.ItemTransactionHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemTransactionHistoryPayload>
          }
          aggregate: {
            args: Prisma.ItemTransactionHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateItemTransactionHistory>
          }
          groupBy: {
            args: Prisma.ItemTransactionHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ItemTransactionHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemTransactionHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<ItemTransactionHistoryCountAggregateOutputType> | number
          }
        }
      }
      EquippedItem: {
        payload: Prisma.$EquippedItemPayload<ExtArgs>
        fields: Prisma.EquippedItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EquippedItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EquippedItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedItemPayload>
          }
          findFirst: {
            args: Prisma.EquippedItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EquippedItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedItemPayload>
          }
          findMany: {
            args: Prisma.EquippedItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedItemPayload>[]
          }
          create: {
            args: Prisma.EquippedItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedItemPayload>
          }
          createMany: {
            args: Prisma.EquippedItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EquippedItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedItemPayload>[]
          }
          delete: {
            args: Prisma.EquippedItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedItemPayload>
          }
          update: {
            args: Prisma.EquippedItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedItemPayload>
          }
          deleteMany: {
            args: Prisma.EquippedItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EquippedItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EquippedItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedItemPayload>[]
          }
          upsert: {
            args: Prisma.EquippedItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedItemPayload>
          }
          aggregate: {
            args: Prisma.EquippedItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEquippedItem>
          }
          groupBy: {
            args: Prisma.EquippedItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<EquippedItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.EquippedItemCountArgs<ExtArgs>
            result: $Utils.Optional<EquippedItemCountAggregateOutputType> | number
          }
        }
      }
      Spells: {
        payload: Prisma.$SpellsPayload<ExtArgs>
        fields: Prisma.SpellsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpellsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpellsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload>
          }
          findFirst: {
            args: Prisma.SpellsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpellsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload>
          }
          findMany: {
            args: Prisma.SpellsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload>[]
          }
          create: {
            args: Prisma.SpellsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload>
          }
          createMany: {
            args: Prisma.SpellsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SpellsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload>[]
          }
          delete: {
            args: Prisma.SpellsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload>
          }
          update: {
            args: Prisma.SpellsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload>
          }
          deleteMany: {
            args: Prisma.SpellsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SpellsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SpellsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload>[]
          }
          upsert: {
            args: Prisma.SpellsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload>
          }
          aggregate: {
            args: Prisma.SpellsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSpells>
          }
          groupBy: {
            args: Prisma.SpellsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SpellsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpellsCountArgs<ExtArgs>
            result: $Utils.Optional<SpellsCountAggregateOutputType> | number
          }
        }
      }
      EquippedSpell: {
        payload: Prisma.$EquippedSpellPayload<ExtArgs>
        fields: Prisma.EquippedSpellFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EquippedSpellFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedSpellPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EquippedSpellFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedSpellPayload>
          }
          findFirst: {
            args: Prisma.EquippedSpellFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedSpellPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EquippedSpellFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedSpellPayload>
          }
          findMany: {
            args: Prisma.EquippedSpellFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedSpellPayload>[]
          }
          create: {
            args: Prisma.EquippedSpellCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedSpellPayload>
          }
          createMany: {
            args: Prisma.EquippedSpellCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EquippedSpellCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedSpellPayload>[]
          }
          delete: {
            args: Prisma.EquippedSpellDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedSpellPayload>
          }
          update: {
            args: Prisma.EquippedSpellUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedSpellPayload>
          }
          deleteMany: {
            args: Prisma.EquippedSpellDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EquippedSpellUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EquippedSpellUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedSpellPayload>[]
          }
          upsert: {
            args: Prisma.EquippedSpellUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquippedSpellPayload>
          }
          aggregate: {
            args: Prisma.EquippedSpellAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEquippedSpell>
          }
          groupBy: {
            args: Prisma.EquippedSpellGroupByArgs<ExtArgs>
            result: $Utils.Optional<EquippedSpellGroupByOutputType>[]
          }
          count: {
            args: Prisma.EquippedSpellCountArgs<ExtArgs>
            result: $Utils.Optional<EquippedSpellCountAggregateOutputType> | number
          }
        }
      }
      CharacterBattleHistory: {
        payload: Prisma.$CharacterBattleHistoryPayload<ExtArgs>
        fields: Prisma.CharacterBattleHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CharacterBattleHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterBattleHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CharacterBattleHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterBattleHistoryPayload>
          }
          findFirst: {
            args: Prisma.CharacterBattleHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterBattleHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CharacterBattleHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterBattleHistoryPayload>
          }
          findMany: {
            args: Prisma.CharacterBattleHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterBattleHistoryPayload>[]
          }
          create: {
            args: Prisma.CharacterBattleHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterBattleHistoryPayload>
          }
          createMany: {
            args: Prisma.CharacterBattleHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CharacterBattleHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterBattleHistoryPayload>[]
          }
          delete: {
            args: Prisma.CharacterBattleHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterBattleHistoryPayload>
          }
          update: {
            args: Prisma.CharacterBattleHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterBattleHistoryPayload>
          }
          deleteMany: {
            args: Prisma.CharacterBattleHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CharacterBattleHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CharacterBattleHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterBattleHistoryPayload>[]
          }
          upsert: {
            args: Prisma.CharacterBattleHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterBattleHistoryPayload>
          }
          aggregate: {
            args: Prisma.CharacterBattleHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCharacterBattleHistory>
          }
          groupBy: {
            args: Prisma.CharacterBattleHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CharacterBattleHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CharacterBattleHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<CharacterBattleHistoryCountAggregateOutputType> | number
          }
        }
      }
      LevelingRule: {
        payload: Prisma.$LevelingRulePayload<ExtArgs>
        fields: Prisma.LevelingRuleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LevelingRuleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelingRulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LevelingRuleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelingRulePayload>
          }
          findFirst: {
            args: Prisma.LevelingRuleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelingRulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LevelingRuleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelingRulePayload>
          }
          findMany: {
            args: Prisma.LevelingRuleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelingRulePayload>[]
          }
          create: {
            args: Prisma.LevelingRuleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelingRulePayload>
          }
          createMany: {
            args: Prisma.LevelingRuleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LevelingRuleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelingRulePayload>[]
          }
          delete: {
            args: Prisma.LevelingRuleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelingRulePayload>
          }
          update: {
            args: Prisma.LevelingRuleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelingRulePayload>
          }
          deleteMany: {
            args: Prisma.LevelingRuleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LevelingRuleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LevelingRuleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelingRulePayload>[]
          }
          upsert: {
            args: Prisma.LevelingRuleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelingRulePayload>
          }
          aggregate: {
            args: Prisma.LevelingRuleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLevelingRule>
          }
          groupBy: {
            args: Prisma.LevelingRuleGroupByArgs<ExtArgs>
            result: $Utils.Optional<LevelingRuleGroupByOutputType>[]
          }
          count: {
            args: Prisma.LevelingRuleCountArgs<ExtArgs>
            result: $Utils.Optional<LevelingRuleCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    campaign?: CampaignOmit
    campaignUser?: CampaignUserOmit
    character?: CharacterOmit
    currency?: CurrencyOmit
    inventory?: InventoryOmit
    inventoryItem?: InventoryItemOmit
    items?: ItemsOmit
    itemTransactionHistory?: ItemTransactionHistoryOmit
    equippedItem?: EquippedItemOmit
    spells?: SpellsOmit
    equippedSpell?: EquippedSpellOmit
    characterBattleHistory?: CharacterBattleHistoryOmit
    levelingRule?: LevelingRuleOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    characters: number
    campaignUsers: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    characters?: boolean | UserCountOutputTypeCountCharactersArgs
    campaignUsers?: boolean | UserCountOutputTypeCountCampaignUsersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCharactersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCampaignUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignUserWhereInput
  }


  /**
   * Count Type CampaignCountOutputType
   */

  export type CampaignCountOutputType = {
    characters: number
    campaignUsers: number
    items: number
    spells: number
    levelingRules: number
    ItemTransactionHistory: number
  }

  export type CampaignCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    characters?: boolean | CampaignCountOutputTypeCountCharactersArgs
    campaignUsers?: boolean | CampaignCountOutputTypeCountCampaignUsersArgs
    items?: boolean | CampaignCountOutputTypeCountItemsArgs
    spells?: boolean | CampaignCountOutputTypeCountSpellsArgs
    levelingRules?: boolean | CampaignCountOutputTypeCountLevelingRulesArgs
    ItemTransactionHistory?: boolean | CampaignCountOutputTypeCountItemTransactionHistoryArgs
  }

  // Custom InputTypes
  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignCountOutputType
     */
    select?: CampaignCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountCharactersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterWhereInput
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountCampaignUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignUserWhereInput
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemsWhereInput
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountSpellsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpellsWhereInput
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountLevelingRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LevelingRuleWhereInput
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountItemTransactionHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemTransactionHistoryWhereInput
  }


  /**
   * Count Type CharacterCountOutputType
   */

  export type CharacterCountOutputType = {
    equippedItems: number
    equippedSpells: number
    battleHistory: number
  }

  export type CharacterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equippedItems?: boolean | CharacterCountOutputTypeCountEquippedItemsArgs
    equippedSpells?: boolean | CharacterCountOutputTypeCountEquippedSpellsArgs
    battleHistory?: boolean | CharacterCountOutputTypeCountBattleHistoryArgs
  }

  // Custom InputTypes
  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterCountOutputType
     */
    select?: CharacterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeCountEquippedItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EquippedItemWhereInput
  }

  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeCountEquippedSpellsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EquippedSpellWhereInput
  }

  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeCountBattleHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterBattleHistoryWhereInput
  }


  /**
   * Count Type InventoryCountOutputType
   */

  export type InventoryCountOutputType = {
    inventoryItems: number
    transactions: number
    Currency: number
  }

  export type InventoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventoryItems?: boolean | InventoryCountOutputTypeCountInventoryItemsArgs
    transactions?: boolean | InventoryCountOutputTypeCountTransactionsArgs
    Currency?: boolean | InventoryCountOutputTypeCountCurrencyArgs
  }

  // Custom InputTypes
  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountOutputType
     */
    select?: InventoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeCountInventoryItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryItemWhereInput
  }

  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemTransactionHistoryWhereInput
  }

  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeCountCurrencyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CurrencyWhereInput
  }


  /**
   * Count Type ItemsCountOutputType
   */

  export type ItemsCountOutputType = {
    inventoryItems: number
    transactionHistories: number
  }

  export type ItemsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventoryItems?: boolean | ItemsCountOutputTypeCountInventoryItemsArgs
    transactionHistories?: boolean | ItemsCountOutputTypeCountTransactionHistoriesArgs
  }

  // Custom InputTypes
  /**
   * ItemsCountOutputType without action
   */
  export type ItemsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemsCountOutputType
     */
    select?: ItemsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ItemsCountOutputType without action
   */
  export type ItemsCountOutputTypeCountInventoryItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryItemWhereInput
  }

  /**
   * ItemsCountOutputType without action
   */
  export type ItemsCountOutputTypeCountTransactionHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemTransactionHistoryWhereInput
  }


  /**
   * Count Type SpellsCountOutputType
   */

  export type SpellsCountOutputType = {
    equippedSpells: number
  }

  export type SpellsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equippedSpells?: boolean | SpellsCountOutputTypeCountEquippedSpellsArgs
  }

  // Custom InputTypes
  /**
   * SpellsCountOutputType without action
   */
  export type SpellsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpellsCountOutputType
     */
    select?: SpellsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SpellsCountOutputType without action
   */
  export type SpellsCountOutputTypeCountEquippedSpellsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EquippedSpellWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: bigint | null
  }

  export type UserMinAggregateOutputType = {
    id: bigint | null
    name: string | null
    password: string | null
    email: string | null
    avatar: string | null
    type: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: bigint | null
    name: string | null
    password: string | null
    email: string | null
    avatar: string | null
    type: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    password: number
    email: number
    avatar: number
    type: number
    active: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    avatar?: true
    type?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    avatar?: true
    type?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    avatar?: true
    type?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: bigint
    name: string
    password: string
    email: string
    avatar: string | null
    type: string
    active: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    avatar?: boolean
    type?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    characters?: boolean | User$charactersArgs<ExtArgs>
    campaignUsers?: boolean | User$campaignUsersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    avatar?: boolean
    type?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    avatar?: boolean
    type?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    avatar?: boolean
    type?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "password" | "email" | "avatar" | "type" | "active" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    characters?: boolean | User$charactersArgs<ExtArgs>
    campaignUsers?: boolean | User$campaignUsersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      characters: Prisma.$CharacterPayload<ExtArgs>[]
      campaignUsers: Prisma.$CampaignUserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      name: string
      password: string
      email: string
      avatar: string | null
      type: string
      active: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    characters<T extends User$charactersArgs<ExtArgs> = {}>(args?: Subset<T, User$charactersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    campaignUsers<T extends User$campaignUsersArgs<ExtArgs> = {}>(args?: Subset<T, User$campaignUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'BigInt'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly type: FieldRef<"User", 'String'>
    readonly active: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.characters
   */
  export type User$charactersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    where?: CharacterWhereInput
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    cursor?: CharacterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * User.campaignUsers
   */
  export type User$campaignUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignUser
     */
    select?: CampaignUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignUser
     */
    omit?: CampaignUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignUserInclude<ExtArgs> | null
    where?: CampaignUserWhereInput
    orderBy?: CampaignUserOrderByWithRelationInput | CampaignUserOrderByWithRelationInput[]
    cursor?: CampaignUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CampaignUserScalarFieldEnum | CampaignUserScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Campaign
   */

  export type AggregateCampaign = {
    _count: CampaignCountAggregateOutputType | null
    _avg: CampaignAvgAggregateOutputType | null
    _sum: CampaignSumAggregateOutputType | null
    _min: CampaignMinAggregateOutputType | null
    _max: CampaignMaxAggregateOutputType | null
  }

  export type CampaignAvgAggregateOutputType = {
    id: number | null
  }

  export type CampaignSumAggregateOutputType = {
    id: bigint | null
  }

  export type CampaignMinAggregateOutputType = {
    id: bigint | null
    name: string | null
    description: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CampaignMaxAggregateOutputType = {
    id: bigint | null
    name: string | null
    description: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CampaignCountAggregateOutputType = {
    id: number
    name: number
    description: number
    active: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CampaignAvgAggregateInputType = {
    id?: true
  }

  export type CampaignSumAggregateInputType = {
    id?: true
  }

  export type CampaignMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CampaignMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CampaignCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CampaignAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Campaign to aggregate.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Campaigns
    **/
    _count?: true | CampaignCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CampaignAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CampaignSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CampaignMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CampaignMaxAggregateInputType
  }

  export type GetCampaignAggregateType<T extends CampaignAggregateArgs> = {
        [P in keyof T & keyof AggregateCampaign]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCampaign[P]>
      : GetScalarType<T[P], AggregateCampaign[P]>
  }




  export type CampaignGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignWhereInput
    orderBy?: CampaignOrderByWithAggregationInput | CampaignOrderByWithAggregationInput[]
    by: CampaignScalarFieldEnum[] | CampaignScalarFieldEnum
    having?: CampaignScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CampaignCountAggregateInputType | true
    _avg?: CampaignAvgAggregateInputType
    _sum?: CampaignSumAggregateInputType
    _min?: CampaignMinAggregateInputType
    _max?: CampaignMaxAggregateInputType
  }

  export type CampaignGroupByOutputType = {
    id: bigint
    name: string
    description: string
    active: boolean
    createdAt: Date
    updatedAt: Date
    _count: CampaignCountAggregateOutputType | null
    _avg: CampaignAvgAggregateOutputType | null
    _sum: CampaignSumAggregateOutputType | null
    _min: CampaignMinAggregateOutputType | null
    _max: CampaignMaxAggregateOutputType | null
  }

  type GetCampaignGroupByPayload<T extends CampaignGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CampaignGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CampaignGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CampaignGroupByOutputType[P]>
            : GetScalarType<T[P], CampaignGroupByOutputType[P]>
        }
      >
    >


  export type CampaignSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    characters?: boolean | Campaign$charactersArgs<ExtArgs>
    campaignUsers?: boolean | Campaign$campaignUsersArgs<ExtArgs>
    items?: boolean | Campaign$itemsArgs<ExtArgs>
    spells?: boolean | Campaign$spellsArgs<ExtArgs>
    levelingRules?: boolean | Campaign$levelingRulesArgs<ExtArgs>
    ItemTransactionHistory?: boolean | Campaign$ItemTransactionHistoryArgs<ExtArgs>
    _count?: boolean | CampaignCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CampaignOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "active" | "createdAt" | "updatedAt", ExtArgs["result"]["campaign"]>
  export type CampaignInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    characters?: boolean | Campaign$charactersArgs<ExtArgs>
    campaignUsers?: boolean | Campaign$campaignUsersArgs<ExtArgs>
    items?: boolean | Campaign$itemsArgs<ExtArgs>
    spells?: boolean | Campaign$spellsArgs<ExtArgs>
    levelingRules?: boolean | Campaign$levelingRulesArgs<ExtArgs>
    ItemTransactionHistory?: boolean | Campaign$ItemTransactionHistoryArgs<ExtArgs>
    _count?: boolean | CampaignCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CampaignIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CampaignIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CampaignPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Campaign"
    objects: {
      characters: Prisma.$CharacterPayload<ExtArgs>[]
      campaignUsers: Prisma.$CampaignUserPayload<ExtArgs>[]
      items: Prisma.$ItemsPayload<ExtArgs>[]
      spells: Prisma.$SpellsPayload<ExtArgs>[]
      levelingRules: Prisma.$LevelingRulePayload<ExtArgs>[]
      ItemTransactionHistory: Prisma.$ItemTransactionHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      name: string
      description: string
      active: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["campaign"]>
    composites: {}
  }

  type CampaignGetPayload<S extends boolean | null | undefined | CampaignDefaultArgs> = $Result.GetResult<Prisma.$CampaignPayload, S>

  type CampaignCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CampaignFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CampaignCountAggregateInputType | true
    }

  export interface CampaignDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Campaign'], meta: { name: 'Campaign' } }
    /**
     * Find zero or one Campaign that matches the filter.
     * @param {CampaignFindUniqueArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CampaignFindUniqueArgs>(args: SelectSubset<T, CampaignFindUniqueArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Campaign that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CampaignFindUniqueOrThrowArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CampaignFindUniqueOrThrowArgs>(args: SelectSubset<T, CampaignFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Campaign that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindFirstArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CampaignFindFirstArgs>(args?: SelectSubset<T, CampaignFindFirstArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Campaign that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindFirstOrThrowArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CampaignFindFirstOrThrowArgs>(args?: SelectSubset<T, CampaignFindFirstOrThrowArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Campaigns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Campaigns
     * const campaigns = await prisma.campaign.findMany()
     * 
     * // Get first 10 Campaigns
     * const campaigns = await prisma.campaign.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const campaignWithIdOnly = await prisma.campaign.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CampaignFindManyArgs>(args?: SelectSubset<T, CampaignFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Campaign.
     * @param {CampaignCreateArgs} args - Arguments to create a Campaign.
     * @example
     * // Create one Campaign
     * const Campaign = await prisma.campaign.create({
     *   data: {
     *     // ... data to create a Campaign
     *   }
     * })
     * 
     */
    create<T extends CampaignCreateArgs>(args: SelectSubset<T, CampaignCreateArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Campaigns.
     * @param {CampaignCreateManyArgs} args - Arguments to create many Campaigns.
     * @example
     * // Create many Campaigns
     * const campaign = await prisma.campaign.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CampaignCreateManyArgs>(args?: SelectSubset<T, CampaignCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Campaigns and returns the data saved in the database.
     * @param {CampaignCreateManyAndReturnArgs} args - Arguments to create many Campaigns.
     * @example
     * // Create many Campaigns
     * const campaign = await prisma.campaign.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Campaigns and only return the `id`
     * const campaignWithIdOnly = await prisma.campaign.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CampaignCreateManyAndReturnArgs>(args?: SelectSubset<T, CampaignCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Campaign.
     * @param {CampaignDeleteArgs} args - Arguments to delete one Campaign.
     * @example
     * // Delete one Campaign
     * const Campaign = await prisma.campaign.delete({
     *   where: {
     *     // ... filter to delete one Campaign
     *   }
     * })
     * 
     */
    delete<T extends CampaignDeleteArgs>(args: SelectSubset<T, CampaignDeleteArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Campaign.
     * @param {CampaignUpdateArgs} args - Arguments to update one Campaign.
     * @example
     * // Update one Campaign
     * const campaign = await prisma.campaign.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CampaignUpdateArgs>(args: SelectSubset<T, CampaignUpdateArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Campaigns.
     * @param {CampaignDeleteManyArgs} args - Arguments to filter Campaigns to delete.
     * @example
     * // Delete a few Campaigns
     * const { count } = await prisma.campaign.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CampaignDeleteManyArgs>(args?: SelectSubset<T, CampaignDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Campaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Campaigns
     * const campaign = await prisma.campaign.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CampaignUpdateManyArgs>(args: SelectSubset<T, CampaignUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Campaigns and returns the data updated in the database.
     * @param {CampaignUpdateManyAndReturnArgs} args - Arguments to update many Campaigns.
     * @example
     * // Update many Campaigns
     * const campaign = await prisma.campaign.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Campaigns and only return the `id`
     * const campaignWithIdOnly = await prisma.campaign.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CampaignUpdateManyAndReturnArgs>(args: SelectSubset<T, CampaignUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Campaign.
     * @param {CampaignUpsertArgs} args - Arguments to update or create a Campaign.
     * @example
     * // Update or create a Campaign
     * const campaign = await prisma.campaign.upsert({
     *   create: {
     *     // ... data to create a Campaign
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Campaign we want to update
     *   }
     * })
     */
    upsert<T extends CampaignUpsertArgs>(args: SelectSubset<T, CampaignUpsertArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Campaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignCountArgs} args - Arguments to filter Campaigns to count.
     * @example
     * // Count the number of Campaigns
     * const count = await prisma.campaign.count({
     *   where: {
     *     // ... the filter for the Campaigns we want to count
     *   }
     * })
    **/
    count<T extends CampaignCountArgs>(
      args?: Subset<T, CampaignCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CampaignCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Campaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CampaignAggregateArgs>(args: Subset<T, CampaignAggregateArgs>): Prisma.PrismaPromise<GetCampaignAggregateType<T>>

    /**
     * Group by Campaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CampaignGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CampaignGroupByArgs['orderBy'] }
        : { orderBy?: CampaignGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CampaignGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCampaignGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Campaign model
   */
  readonly fields: CampaignFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Campaign.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CampaignClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    characters<T extends Campaign$charactersArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$charactersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    campaignUsers<T extends Campaign$campaignUsersArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$campaignUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    items<T extends Campaign$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    spells<T extends Campaign$spellsArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$spellsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    levelingRules<T extends Campaign$levelingRulesArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$levelingRulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelingRulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ItemTransactionHistory<T extends Campaign$ItemTransactionHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$ItemTransactionHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemTransactionHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Campaign model
   */
  interface CampaignFieldRefs {
    readonly id: FieldRef<"Campaign", 'BigInt'>
    readonly name: FieldRef<"Campaign", 'String'>
    readonly description: FieldRef<"Campaign", 'String'>
    readonly active: FieldRef<"Campaign", 'Boolean'>
    readonly createdAt: FieldRef<"Campaign", 'DateTime'>
    readonly updatedAt: FieldRef<"Campaign", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Campaign findUnique
   */
  export type CampaignFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign findUniqueOrThrow
   */
  export type CampaignFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign findFirst
   */
  export type CampaignFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Campaigns.
     */
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign findFirstOrThrow
   */
  export type CampaignFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Campaigns.
     */
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign findMany
   */
  export type CampaignFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaigns to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign create
   */
  export type CampaignCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The data needed to create a Campaign.
     */
    data: XOR<CampaignCreateInput, CampaignUncheckedCreateInput>
  }

  /**
   * Campaign createMany
   */
  export type CampaignCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Campaigns.
     */
    data: CampaignCreateManyInput | CampaignCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Campaign createManyAndReturn
   */
  export type CampaignCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * The data used to create many Campaigns.
     */
    data: CampaignCreateManyInput | CampaignCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Campaign update
   */
  export type CampaignUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The data needed to update a Campaign.
     */
    data: XOR<CampaignUpdateInput, CampaignUncheckedUpdateInput>
    /**
     * Choose, which Campaign to update.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign updateMany
   */
  export type CampaignUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Campaigns.
     */
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyInput>
    /**
     * Filter which Campaigns to update
     */
    where?: CampaignWhereInput
    /**
     * Limit how many Campaigns to update.
     */
    limit?: number
  }

  /**
   * Campaign updateManyAndReturn
   */
  export type CampaignUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * The data used to update Campaigns.
     */
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyInput>
    /**
     * Filter which Campaigns to update
     */
    where?: CampaignWhereInput
    /**
     * Limit how many Campaigns to update.
     */
    limit?: number
  }

  /**
   * Campaign upsert
   */
  export type CampaignUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The filter to search for the Campaign to update in case it exists.
     */
    where: CampaignWhereUniqueInput
    /**
     * In case the Campaign found by the `where` argument doesn't exist, create a new Campaign with this data.
     */
    create: XOR<CampaignCreateInput, CampaignUncheckedCreateInput>
    /**
     * In case the Campaign was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CampaignUpdateInput, CampaignUncheckedUpdateInput>
  }

  /**
   * Campaign delete
   */
  export type CampaignDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter which Campaign to delete.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign deleteMany
   */
  export type CampaignDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Campaigns to delete
     */
    where?: CampaignWhereInput
    /**
     * Limit how many Campaigns to delete.
     */
    limit?: number
  }

  /**
   * Campaign.characters
   */
  export type Campaign$charactersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    where?: CharacterWhereInput
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    cursor?: CharacterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * Campaign.campaignUsers
   */
  export type Campaign$campaignUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignUser
     */
    select?: CampaignUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignUser
     */
    omit?: CampaignUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignUserInclude<ExtArgs> | null
    where?: CampaignUserWhereInput
    orderBy?: CampaignUserOrderByWithRelationInput | CampaignUserOrderByWithRelationInput[]
    cursor?: CampaignUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CampaignUserScalarFieldEnum | CampaignUserScalarFieldEnum[]
  }

  /**
   * Campaign.items
   */
  export type Campaign$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Items
     */
    omit?: ItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsInclude<ExtArgs> | null
    where?: ItemsWhereInput
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    cursor?: ItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }

  /**
   * Campaign.spells
   */
  export type Campaign$spellsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spells
     */
    omit?: SpellsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellsInclude<ExtArgs> | null
    where?: SpellsWhereInput
    orderBy?: SpellsOrderByWithRelationInput | SpellsOrderByWithRelationInput[]
    cursor?: SpellsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpellsScalarFieldEnum | SpellsScalarFieldEnum[]
  }

  /**
   * Campaign.levelingRules
   */
  export type Campaign$levelingRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelingRule
     */
    select?: LevelingRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelingRule
     */
    omit?: LevelingRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelingRuleInclude<ExtArgs> | null
    where?: LevelingRuleWhereInput
    orderBy?: LevelingRuleOrderByWithRelationInput | LevelingRuleOrderByWithRelationInput[]
    cursor?: LevelingRuleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LevelingRuleScalarFieldEnum | LevelingRuleScalarFieldEnum[]
  }

  /**
   * Campaign.ItemTransactionHistory
   */
  export type Campaign$ItemTransactionHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemTransactionHistory
     */
    select?: ItemTransactionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemTransactionHistory
     */
    omit?: ItemTransactionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemTransactionHistoryInclude<ExtArgs> | null
    where?: ItemTransactionHistoryWhereInput
    orderBy?: ItemTransactionHistoryOrderByWithRelationInput | ItemTransactionHistoryOrderByWithRelationInput[]
    cursor?: ItemTransactionHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemTransactionHistoryScalarFieldEnum | ItemTransactionHistoryScalarFieldEnum[]
  }

  /**
   * Campaign without action
   */
  export type CampaignDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
  }


  /**
   * Model CampaignUser
   */

  export type AggregateCampaignUser = {
    _count: CampaignUserCountAggregateOutputType | null
    _avg: CampaignUserAvgAggregateOutputType | null
    _sum: CampaignUserSumAggregateOutputType | null
    _min: CampaignUserMinAggregateOutputType | null
    _max: CampaignUserMaxAggregateOutputType | null
  }

  export type CampaignUserAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    campaignId: number | null
  }

  export type CampaignUserSumAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
    campaignId: bigint | null
  }

  export type CampaignUserMinAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
    campaignId: bigint | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CampaignUserMaxAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
    campaignId: bigint | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CampaignUserCountAggregateOutputType = {
    id: number
    userId: number
    campaignId: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CampaignUserAvgAggregateInputType = {
    id?: true
    userId?: true
    campaignId?: true
  }

  export type CampaignUserSumAggregateInputType = {
    id?: true
    userId?: true
    campaignId?: true
  }

  export type CampaignUserMinAggregateInputType = {
    id?: true
    userId?: true
    campaignId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CampaignUserMaxAggregateInputType = {
    id?: true
    userId?: true
    campaignId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CampaignUserCountAggregateInputType = {
    id?: true
    userId?: true
    campaignId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CampaignUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CampaignUser to aggregate.
     */
    where?: CampaignUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CampaignUsers to fetch.
     */
    orderBy?: CampaignUserOrderByWithRelationInput | CampaignUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CampaignUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CampaignUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CampaignUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CampaignUsers
    **/
    _count?: true | CampaignUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CampaignUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CampaignUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CampaignUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CampaignUserMaxAggregateInputType
  }

  export type GetCampaignUserAggregateType<T extends CampaignUserAggregateArgs> = {
        [P in keyof T & keyof AggregateCampaignUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCampaignUser[P]>
      : GetScalarType<T[P], AggregateCampaignUser[P]>
  }




  export type CampaignUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignUserWhereInput
    orderBy?: CampaignUserOrderByWithAggregationInput | CampaignUserOrderByWithAggregationInput[]
    by: CampaignUserScalarFieldEnum[] | CampaignUserScalarFieldEnum
    having?: CampaignUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CampaignUserCountAggregateInputType | true
    _avg?: CampaignUserAvgAggregateInputType
    _sum?: CampaignUserSumAggregateInputType
    _min?: CampaignUserMinAggregateInputType
    _max?: CampaignUserMaxAggregateInputType
  }

  export type CampaignUserGroupByOutputType = {
    id: bigint
    userId: bigint
    campaignId: bigint
    role: string
    createdAt: Date
    updatedAt: Date
    _count: CampaignUserCountAggregateOutputType | null
    _avg: CampaignUserAvgAggregateOutputType | null
    _sum: CampaignUserSumAggregateOutputType | null
    _min: CampaignUserMinAggregateOutputType | null
    _max: CampaignUserMaxAggregateOutputType | null
  }

  type GetCampaignUserGroupByPayload<T extends CampaignUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CampaignUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CampaignUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CampaignUserGroupByOutputType[P]>
            : GetScalarType<T[P], CampaignUserGroupByOutputType[P]>
        }
      >
    >


  export type CampaignUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    campaignId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaignUser"]>

  export type CampaignUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    campaignId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaignUser"]>

  export type CampaignUserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    campaignId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaignUser"]>

  export type CampaignUserSelectScalar = {
    id?: boolean
    userId?: boolean
    campaignId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CampaignUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "campaignId" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["campaignUser"]>
  export type CampaignUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }
  export type CampaignUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }
  export type CampaignUserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }

  export type $CampaignUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CampaignUser"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      campaign: Prisma.$CampaignPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      userId: bigint
      campaignId: bigint
      role: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["campaignUser"]>
    composites: {}
  }

  type CampaignUserGetPayload<S extends boolean | null | undefined | CampaignUserDefaultArgs> = $Result.GetResult<Prisma.$CampaignUserPayload, S>

  type CampaignUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CampaignUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CampaignUserCountAggregateInputType | true
    }

  export interface CampaignUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CampaignUser'], meta: { name: 'CampaignUser' } }
    /**
     * Find zero or one CampaignUser that matches the filter.
     * @param {CampaignUserFindUniqueArgs} args - Arguments to find a CampaignUser
     * @example
     * // Get one CampaignUser
     * const campaignUser = await prisma.campaignUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CampaignUserFindUniqueArgs>(args: SelectSubset<T, CampaignUserFindUniqueArgs<ExtArgs>>): Prisma__CampaignUserClient<$Result.GetResult<Prisma.$CampaignUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CampaignUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CampaignUserFindUniqueOrThrowArgs} args - Arguments to find a CampaignUser
     * @example
     * // Get one CampaignUser
     * const campaignUser = await prisma.campaignUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CampaignUserFindUniqueOrThrowArgs>(args: SelectSubset<T, CampaignUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CampaignUserClient<$Result.GetResult<Prisma.$CampaignUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CampaignUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignUserFindFirstArgs} args - Arguments to find a CampaignUser
     * @example
     * // Get one CampaignUser
     * const campaignUser = await prisma.campaignUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CampaignUserFindFirstArgs>(args?: SelectSubset<T, CampaignUserFindFirstArgs<ExtArgs>>): Prisma__CampaignUserClient<$Result.GetResult<Prisma.$CampaignUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CampaignUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignUserFindFirstOrThrowArgs} args - Arguments to find a CampaignUser
     * @example
     * // Get one CampaignUser
     * const campaignUser = await prisma.campaignUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CampaignUserFindFirstOrThrowArgs>(args?: SelectSubset<T, CampaignUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__CampaignUserClient<$Result.GetResult<Prisma.$CampaignUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CampaignUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CampaignUsers
     * const campaignUsers = await prisma.campaignUser.findMany()
     * 
     * // Get first 10 CampaignUsers
     * const campaignUsers = await prisma.campaignUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const campaignUserWithIdOnly = await prisma.campaignUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CampaignUserFindManyArgs>(args?: SelectSubset<T, CampaignUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CampaignUser.
     * @param {CampaignUserCreateArgs} args - Arguments to create a CampaignUser.
     * @example
     * // Create one CampaignUser
     * const CampaignUser = await prisma.campaignUser.create({
     *   data: {
     *     // ... data to create a CampaignUser
     *   }
     * })
     * 
     */
    create<T extends CampaignUserCreateArgs>(args: SelectSubset<T, CampaignUserCreateArgs<ExtArgs>>): Prisma__CampaignUserClient<$Result.GetResult<Prisma.$CampaignUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CampaignUsers.
     * @param {CampaignUserCreateManyArgs} args - Arguments to create many CampaignUsers.
     * @example
     * // Create many CampaignUsers
     * const campaignUser = await prisma.campaignUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CampaignUserCreateManyArgs>(args?: SelectSubset<T, CampaignUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CampaignUsers and returns the data saved in the database.
     * @param {CampaignUserCreateManyAndReturnArgs} args - Arguments to create many CampaignUsers.
     * @example
     * // Create many CampaignUsers
     * const campaignUser = await prisma.campaignUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CampaignUsers and only return the `id`
     * const campaignUserWithIdOnly = await prisma.campaignUser.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CampaignUserCreateManyAndReturnArgs>(args?: SelectSubset<T, CampaignUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CampaignUser.
     * @param {CampaignUserDeleteArgs} args - Arguments to delete one CampaignUser.
     * @example
     * // Delete one CampaignUser
     * const CampaignUser = await prisma.campaignUser.delete({
     *   where: {
     *     // ... filter to delete one CampaignUser
     *   }
     * })
     * 
     */
    delete<T extends CampaignUserDeleteArgs>(args: SelectSubset<T, CampaignUserDeleteArgs<ExtArgs>>): Prisma__CampaignUserClient<$Result.GetResult<Prisma.$CampaignUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CampaignUser.
     * @param {CampaignUserUpdateArgs} args - Arguments to update one CampaignUser.
     * @example
     * // Update one CampaignUser
     * const campaignUser = await prisma.campaignUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CampaignUserUpdateArgs>(args: SelectSubset<T, CampaignUserUpdateArgs<ExtArgs>>): Prisma__CampaignUserClient<$Result.GetResult<Prisma.$CampaignUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CampaignUsers.
     * @param {CampaignUserDeleteManyArgs} args - Arguments to filter CampaignUsers to delete.
     * @example
     * // Delete a few CampaignUsers
     * const { count } = await prisma.campaignUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CampaignUserDeleteManyArgs>(args?: SelectSubset<T, CampaignUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CampaignUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CampaignUsers
     * const campaignUser = await prisma.campaignUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CampaignUserUpdateManyArgs>(args: SelectSubset<T, CampaignUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CampaignUsers and returns the data updated in the database.
     * @param {CampaignUserUpdateManyAndReturnArgs} args - Arguments to update many CampaignUsers.
     * @example
     * // Update many CampaignUsers
     * const campaignUser = await prisma.campaignUser.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CampaignUsers and only return the `id`
     * const campaignUserWithIdOnly = await prisma.campaignUser.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CampaignUserUpdateManyAndReturnArgs>(args: SelectSubset<T, CampaignUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CampaignUser.
     * @param {CampaignUserUpsertArgs} args - Arguments to update or create a CampaignUser.
     * @example
     * // Update or create a CampaignUser
     * const campaignUser = await prisma.campaignUser.upsert({
     *   create: {
     *     // ... data to create a CampaignUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CampaignUser we want to update
     *   }
     * })
     */
    upsert<T extends CampaignUserUpsertArgs>(args: SelectSubset<T, CampaignUserUpsertArgs<ExtArgs>>): Prisma__CampaignUserClient<$Result.GetResult<Prisma.$CampaignUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CampaignUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignUserCountArgs} args - Arguments to filter CampaignUsers to count.
     * @example
     * // Count the number of CampaignUsers
     * const count = await prisma.campaignUser.count({
     *   where: {
     *     // ... the filter for the CampaignUsers we want to count
     *   }
     * })
    **/
    count<T extends CampaignUserCountArgs>(
      args?: Subset<T, CampaignUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CampaignUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CampaignUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CampaignUserAggregateArgs>(args: Subset<T, CampaignUserAggregateArgs>): Prisma.PrismaPromise<GetCampaignUserAggregateType<T>>

    /**
     * Group by CampaignUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CampaignUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CampaignUserGroupByArgs['orderBy'] }
        : { orderBy?: CampaignUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CampaignUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCampaignUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CampaignUser model
   */
  readonly fields: CampaignUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CampaignUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CampaignUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    campaign<T extends CampaignDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CampaignDefaultArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CampaignUser model
   */
  interface CampaignUserFieldRefs {
    readonly id: FieldRef<"CampaignUser", 'BigInt'>
    readonly userId: FieldRef<"CampaignUser", 'BigInt'>
    readonly campaignId: FieldRef<"CampaignUser", 'BigInt'>
    readonly role: FieldRef<"CampaignUser", 'String'>
    readonly createdAt: FieldRef<"CampaignUser", 'DateTime'>
    readonly updatedAt: FieldRef<"CampaignUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CampaignUser findUnique
   */
  export type CampaignUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignUser
     */
    select?: CampaignUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignUser
     */
    omit?: CampaignUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignUserInclude<ExtArgs> | null
    /**
     * Filter, which CampaignUser to fetch.
     */
    where: CampaignUserWhereUniqueInput
  }

  /**
   * CampaignUser findUniqueOrThrow
   */
  export type CampaignUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignUser
     */
    select?: CampaignUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignUser
     */
    omit?: CampaignUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignUserInclude<ExtArgs> | null
    /**
     * Filter, which CampaignUser to fetch.
     */
    where: CampaignUserWhereUniqueInput
  }

  /**
   * CampaignUser findFirst
   */
  export type CampaignUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignUser
     */
    select?: CampaignUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignUser
     */
    omit?: CampaignUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignUserInclude<ExtArgs> | null
    /**
     * Filter, which CampaignUser to fetch.
     */
    where?: CampaignUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CampaignUsers to fetch.
     */
    orderBy?: CampaignUserOrderByWithRelationInput | CampaignUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CampaignUsers.
     */
    cursor?: CampaignUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CampaignUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CampaignUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CampaignUsers.
     */
    distinct?: CampaignUserScalarFieldEnum | CampaignUserScalarFieldEnum[]
  }

  /**
   * CampaignUser findFirstOrThrow
   */
  export type CampaignUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignUser
     */
    select?: CampaignUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignUser
     */
    omit?: CampaignUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignUserInclude<ExtArgs> | null
    /**
     * Filter, which CampaignUser to fetch.
     */
    where?: CampaignUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CampaignUsers to fetch.
     */
    orderBy?: CampaignUserOrderByWithRelationInput | CampaignUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CampaignUsers.
     */
    cursor?: CampaignUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CampaignUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CampaignUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CampaignUsers.
     */
    distinct?: CampaignUserScalarFieldEnum | CampaignUserScalarFieldEnum[]
  }

  /**
   * CampaignUser findMany
   */
  export type CampaignUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignUser
     */
    select?: CampaignUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignUser
     */
    omit?: CampaignUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignUserInclude<ExtArgs> | null
    /**
     * Filter, which CampaignUsers to fetch.
     */
    where?: CampaignUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CampaignUsers to fetch.
     */
    orderBy?: CampaignUserOrderByWithRelationInput | CampaignUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CampaignUsers.
     */
    cursor?: CampaignUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CampaignUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CampaignUsers.
     */
    skip?: number
    distinct?: CampaignUserScalarFieldEnum | CampaignUserScalarFieldEnum[]
  }

  /**
   * CampaignUser create
   */
  export type CampaignUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignUser
     */
    select?: CampaignUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignUser
     */
    omit?: CampaignUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignUserInclude<ExtArgs> | null
    /**
     * The data needed to create a CampaignUser.
     */
    data: XOR<CampaignUserCreateInput, CampaignUserUncheckedCreateInput>
  }

  /**
   * CampaignUser createMany
   */
  export type CampaignUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CampaignUsers.
     */
    data: CampaignUserCreateManyInput | CampaignUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CampaignUser createManyAndReturn
   */
  export type CampaignUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignUser
     */
    select?: CampaignUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignUser
     */
    omit?: CampaignUserOmit<ExtArgs> | null
    /**
     * The data used to create many CampaignUsers.
     */
    data: CampaignUserCreateManyInput | CampaignUserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignUserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CampaignUser update
   */
  export type CampaignUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignUser
     */
    select?: CampaignUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignUser
     */
    omit?: CampaignUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignUserInclude<ExtArgs> | null
    /**
     * The data needed to update a CampaignUser.
     */
    data: XOR<CampaignUserUpdateInput, CampaignUserUncheckedUpdateInput>
    /**
     * Choose, which CampaignUser to update.
     */
    where: CampaignUserWhereUniqueInput
  }

  /**
   * CampaignUser updateMany
   */
  export type CampaignUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CampaignUsers.
     */
    data: XOR<CampaignUserUpdateManyMutationInput, CampaignUserUncheckedUpdateManyInput>
    /**
     * Filter which CampaignUsers to update
     */
    where?: CampaignUserWhereInput
    /**
     * Limit how many CampaignUsers to update.
     */
    limit?: number
  }

  /**
   * CampaignUser updateManyAndReturn
   */
  export type CampaignUserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignUser
     */
    select?: CampaignUserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignUser
     */
    omit?: CampaignUserOmit<ExtArgs> | null
    /**
     * The data used to update CampaignUsers.
     */
    data: XOR<CampaignUserUpdateManyMutationInput, CampaignUserUncheckedUpdateManyInput>
    /**
     * Filter which CampaignUsers to update
     */
    where?: CampaignUserWhereInput
    /**
     * Limit how many CampaignUsers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignUserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CampaignUser upsert
   */
  export type CampaignUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignUser
     */
    select?: CampaignUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignUser
     */
    omit?: CampaignUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignUserInclude<ExtArgs> | null
    /**
     * The filter to search for the CampaignUser to update in case it exists.
     */
    where: CampaignUserWhereUniqueInput
    /**
     * In case the CampaignUser found by the `where` argument doesn't exist, create a new CampaignUser with this data.
     */
    create: XOR<CampaignUserCreateInput, CampaignUserUncheckedCreateInput>
    /**
     * In case the CampaignUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CampaignUserUpdateInput, CampaignUserUncheckedUpdateInput>
  }

  /**
   * CampaignUser delete
   */
  export type CampaignUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignUser
     */
    select?: CampaignUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignUser
     */
    omit?: CampaignUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignUserInclude<ExtArgs> | null
    /**
     * Filter which CampaignUser to delete.
     */
    where: CampaignUserWhereUniqueInput
  }

  /**
   * CampaignUser deleteMany
   */
  export type CampaignUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CampaignUsers to delete
     */
    where?: CampaignUserWhereInput
    /**
     * Limit how many CampaignUsers to delete.
     */
    limit?: number
  }

  /**
   * CampaignUser without action
   */
  export type CampaignUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignUser
     */
    select?: CampaignUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CampaignUser
     */
    omit?: CampaignUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignUserInclude<ExtArgs> | null
  }


  /**
   * Model Character
   */

  export type AggregateCharacter = {
    _count: CharacterCountAggregateOutputType | null
    _avg: CharacterAvgAggregateOutputType | null
    _sum: CharacterSumAggregateOutputType | null
    _min: CharacterMinAggregateOutputType | null
    _max: CharacterMaxAggregateOutputType | null
  }

  export type CharacterAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    campaignId: number | null
  }

  export type CharacterSumAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
    campaignId: bigint | null
  }

  export type CharacterMinAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
    campaignId: bigint | null
    name: string | null
    avatar: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CharacterMaxAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
    campaignId: bigint | null
    name: string | null
    avatar: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CharacterCountAggregateOutputType = {
    id: number
    userId: number
    campaignId: number
    name: number
    avatar: number
    sheet: number
    active: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CharacterAvgAggregateInputType = {
    id?: true
    userId?: true
    campaignId?: true
  }

  export type CharacterSumAggregateInputType = {
    id?: true
    userId?: true
    campaignId?: true
  }

  export type CharacterMinAggregateInputType = {
    id?: true
    userId?: true
    campaignId?: true
    name?: true
    avatar?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CharacterMaxAggregateInputType = {
    id?: true
    userId?: true
    campaignId?: true
    name?: true
    avatar?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CharacterCountAggregateInputType = {
    id?: true
    userId?: true
    campaignId?: true
    name?: true
    avatar?: true
    sheet?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CharacterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Character to aggregate.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Characters
    **/
    _count?: true | CharacterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CharacterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CharacterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CharacterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CharacterMaxAggregateInputType
  }

  export type GetCharacterAggregateType<T extends CharacterAggregateArgs> = {
        [P in keyof T & keyof AggregateCharacter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCharacter[P]>
      : GetScalarType<T[P], AggregateCharacter[P]>
  }




  export type CharacterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterWhereInput
    orderBy?: CharacterOrderByWithAggregationInput | CharacterOrderByWithAggregationInput[]
    by: CharacterScalarFieldEnum[] | CharacterScalarFieldEnum
    having?: CharacterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CharacterCountAggregateInputType | true
    _avg?: CharacterAvgAggregateInputType
    _sum?: CharacterSumAggregateInputType
    _min?: CharacterMinAggregateInputType
    _max?: CharacterMaxAggregateInputType
  }

  export type CharacterGroupByOutputType = {
    id: bigint
    userId: bigint
    campaignId: bigint
    name: string
    avatar: string | null
    sheet: JsonValue
    active: boolean
    createdAt: Date
    updatedAt: Date
    _count: CharacterCountAggregateOutputType | null
    _avg: CharacterAvgAggregateOutputType | null
    _sum: CharacterSumAggregateOutputType | null
    _min: CharacterMinAggregateOutputType | null
    _max: CharacterMaxAggregateOutputType | null
  }

  type GetCharacterGroupByPayload<T extends CharacterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CharacterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CharacterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CharacterGroupByOutputType[P]>
            : GetScalarType<T[P], CharacterGroupByOutputType[P]>
        }
      >
    >


  export type CharacterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    campaignId?: boolean
    name?: boolean
    avatar?: boolean
    sheet?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    inventory?: boolean | Character$inventoryArgs<ExtArgs>
    equippedItems?: boolean | Character$equippedItemsArgs<ExtArgs>
    equippedSpells?: boolean | Character$equippedSpellsArgs<ExtArgs>
    battleHistory?: boolean | Character$battleHistoryArgs<ExtArgs>
    _count?: boolean | CharacterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["character"]>

  export type CharacterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    campaignId?: boolean
    name?: boolean
    avatar?: boolean
    sheet?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["character"]>

  export type CharacterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    campaignId?: boolean
    name?: boolean
    avatar?: boolean
    sheet?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["character"]>

  export type CharacterSelectScalar = {
    id?: boolean
    userId?: boolean
    campaignId?: boolean
    name?: boolean
    avatar?: boolean
    sheet?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CharacterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "campaignId" | "name" | "avatar" | "sheet" | "active" | "createdAt" | "updatedAt", ExtArgs["result"]["character"]>
  export type CharacterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    inventory?: boolean | Character$inventoryArgs<ExtArgs>
    equippedItems?: boolean | Character$equippedItemsArgs<ExtArgs>
    equippedSpells?: boolean | Character$equippedSpellsArgs<ExtArgs>
    battleHistory?: boolean | Character$battleHistoryArgs<ExtArgs>
    _count?: boolean | CharacterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CharacterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }
  export type CharacterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }

  export type $CharacterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Character"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      campaign: Prisma.$CampaignPayload<ExtArgs>
      inventory: Prisma.$InventoryPayload<ExtArgs> | null
      equippedItems: Prisma.$EquippedItemPayload<ExtArgs>[]
      equippedSpells: Prisma.$EquippedSpellPayload<ExtArgs>[]
      battleHistory: Prisma.$CharacterBattleHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      userId: bigint
      campaignId: bigint
      name: string
      avatar: string | null
      sheet: Prisma.JsonValue
      active: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["character"]>
    composites: {}
  }

  type CharacterGetPayload<S extends boolean | null | undefined | CharacterDefaultArgs> = $Result.GetResult<Prisma.$CharacterPayload, S>

  type CharacterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CharacterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CharacterCountAggregateInputType | true
    }

  export interface CharacterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Character'], meta: { name: 'Character' } }
    /**
     * Find zero or one Character that matches the filter.
     * @param {CharacterFindUniqueArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CharacterFindUniqueArgs>(args: SelectSubset<T, CharacterFindUniqueArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Character that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CharacterFindUniqueOrThrowArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CharacterFindUniqueOrThrowArgs>(args: SelectSubset<T, CharacterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Character that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFindFirstArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CharacterFindFirstArgs>(args?: SelectSubset<T, CharacterFindFirstArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Character that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFindFirstOrThrowArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CharacterFindFirstOrThrowArgs>(args?: SelectSubset<T, CharacterFindFirstOrThrowArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Characters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Characters
     * const characters = await prisma.character.findMany()
     * 
     * // Get first 10 Characters
     * const characters = await prisma.character.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const characterWithIdOnly = await prisma.character.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CharacterFindManyArgs>(args?: SelectSubset<T, CharacterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Character.
     * @param {CharacterCreateArgs} args - Arguments to create a Character.
     * @example
     * // Create one Character
     * const Character = await prisma.character.create({
     *   data: {
     *     // ... data to create a Character
     *   }
     * })
     * 
     */
    create<T extends CharacterCreateArgs>(args: SelectSubset<T, CharacterCreateArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Characters.
     * @param {CharacterCreateManyArgs} args - Arguments to create many Characters.
     * @example
     * // Create many Characters
     * const character = await prisma.character.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CharacterCreateManyArgs>(args?: SelectSubset<T, CharacterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Characters and returns the data saved in the database.
     * @param {CharacterCreateManyAndReturnArgs} args - Arguments to create many Characters.
     * @example
     * // Create many Characters
     * const character = await prisma.character.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Characters and only return the `id`
     * const characterWithIdOnly = await prisma.character.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CharacterCreateManyAndReturnArgs>(args?: SelectSubset<T, CharacterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Character.
     * @param {CharacterDeleteArgs} args - Arguments to delete one Character.
     * @example
     * // Delete one Character
     * const Character = await prisma.character.delete({
     *   where: {
     *     // ... filter to delete one Character
     *   }
     * })
     * 
     */
    delete<T extends CharacterDeleteArgs>(args: SelectSubset<T, CharacterDeleteArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Character.
     * @param {CharacterUpdateArgs} args - Arguments to update one Character.
     * @example
     * // Update one Character
     * const character = await prisma.character.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CharacterUpdateArgs>(args: SelectSubset<T, CharacterUpdateArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Characters.
     * @param {CharacterDeleteManyArgs} args - Arguments to filter Characters to delete.
     * @example
     * // Delete a few Characters
     * const { count } = await prisma.character.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CharacterDeleteManyArgs>(args?: SelectSubset<T, CharacterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Characters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Characters
     * const character = await prisma.character.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CharacterUpdateManyArgs>(args: SelectSubset<T, CharacterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Characters and returns the data updated in the database.
     * @param {CharacterUpdateManyAndReturnArgs} args - Arguments to update many Characters.
     * @example
     * // Update many Characters
     * const character = await prisma.character.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Characters and only return the `id`
     * const characterWithIdOnly = await prisma.character.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CharacterUpdateManyAndReturnArgs>(args: SelectSubset<T, CharacterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Character.
     * @param {CharacterUpsertArgs} args - Arguments to update or create a Character.
     * @example
     * // Update or create a Character
     * const character = await prisma.character.upsert({
     *   create: {
     *     // ... data to create a Character
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Character we want to update
     *   }
     * })
     */
    upsert<T extends CharacterUpsertArgs>(args: SelectSubset<T, CharacterUpsertArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Characters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterCountArgs} args - Arguments to filter Characters to count.
     * @example
     * // Count the number of Characters
     * const count = await prisma.character.count({
     *   where: {
     *     // ... the filter for the Characters we want to count
     *   }
     * })
    **/
    count<T extends CharacterCountArgs>(
      args?: Subset<T, CharacterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CharacterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Character.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CharacterAggregateArgs>(args: Subset<T, CharacterAggregateArgs>): Prisma.PrismaPromise<GetCharacterAggregateType<T>>

    /**
     * Group by Character.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CharacterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CharacterGroupByArgs['orderBy'] }
        : { orderBy?: CharacterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CharacterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCharacterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Character model
   */
  readonly fields: CharacterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Character.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CharacterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    campaign<T extends CampaignDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CampaignDefaultArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    inventory<T extends Character$inventoryArgs<ExtArgs> = {}>(args?: Subset<T, Character$inventoryArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    equippedItems<T extends Character$equippedItemsArgs<ExtArgs> = {}>(args?: Subset<T, Character$equippedItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquippedItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    equippedSpells<T extends Character$equippedSpellsArgs<ExtArgs> = {}>(args?: Subset<T, Character$equippedSpellsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquippedSpellPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    battleHistory<T extends Character$battleHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Character$battleHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterBattleHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Character model
   */
  interface CharacterFieldRefs {
    readonly id: FieldRef<"Character", 'BigInt'>
    readonly userId: FieldRef<"Character", 'BigInt'>
    readonly campaignId: FieldRef<"Character", 'BigInt'>
    readonly name: FieldRef<"Character", 'String'>
    readonly avatar: FieldRef<"Character", 'String'>
    readonly sheet: FieldRef<"Character", 'Json'>
    readonly active: FieldRef<"Character", 'Boolean'>
    readonly createdAt: FieldRef<"Character", 'DateTime'>
    readonly updatedAt: FieldRef<"Character", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Character findUnique
   */
  export type CharacterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where: CharacterWhereUniqueInput
  }

  /**
   * Character findUniqueOrThrow
   */
  export type CharacterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where: CharacterWhereUniqueInput
  }

  /**
   * Character findFirst
   */
  export type CharacterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Characters.
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Characters.
     */
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * Character findFirstOrThrow
   */
  export type CharacterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Characters.
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Characters.
     */
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * Character findMany
   */
  export type CharacterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Characters to fetch.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Characters.
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * Character create
   */
  export type CharacterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * The data needed to create a Character.
     */
    data: XOR<CharacterCreateInput, CharacterUncheckedCreateInput>
  }

  /**
   * Character createMany
   */
  export type CharacterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Characters.
     */
    data: CharacterCreateManyInput | CharacterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Character createManyAndReturn
   */
  export type CharacterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * The data used to create many Characters.
     */
    data: CharacterCreateManyInput | CharacterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Character update
   */
  export type CharacterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * The data needed to update a Character.
     */
    data: XOR<CharacterUpdateInput, CharacterUncheckedUpdateInput>
    /**
     * Choose, which Character to update.
     */
    where: CharacterWhereUniqueInput
  }

  /**
   * Character updateMany
   */
  export type CharacterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Characters.
     */
    data: XOR<CharacterUpdateManyMutationInput, CharacterUncheckedUpdateManyInput>
    /**
     * Filter which Characters to update
     */
    where?: CharacterWhereInput
    /**
     * Limit how many Characters to update.
     */
    limit?: number
  }

  /**
   * Character updateManyAndReturn
   */
  export type CharacterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * The data used to update Characters.
     */
    data: XOR<CharacterUpdateManyMutationInput, CharacterUncheckedUpdateManyInput>
    /**
     * Filter which Characters to update
     */
    where?: CharacterWhereInput
    /**
     * Limit how many Characters to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Character upsert
   */
  export type CharacterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * The filter to search for the Character to update in case it exists.
     */
    where: CharacterWhereUniqueInput
    /**
     * In case the Character found by the `where` argument doesn't exist, create a new Character with this data.
     */
    create: XOR<CharacterCreateInput, CharacterUncheckedCreateInput>
    /**
     * In case the Character was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CharacterUpdateInput, CharacterUncheckedUpdateInput>
  }

  /**
   * Character delete
   */
  export type CharacterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter which Character to delete.
     */
    where: CharacterWhereUniqueInput
  }

  /**
   * Character deleteMany
   */
  export type CharacterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Characters to delete
     */
    where?: CharacterWhereInput
    /**
     * Limit how many Characters to delete.
     */
    limit?: number
  }

  /**
   * Character.inventory
   */
  export type Character$inventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    where?: InventoryWhereInput
  }

  /**
   * Character.equippedItems
   */
  export type Character$equippedItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedItem
     */
    select?: EquippedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedItem
     */
    omit?: EquippedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedItemInclude<ExtArgs> | null
    where?: EquippedItemWhereInput
    orderBy?: EquippedItemOrderByWithRelationInput | EquippedItemOrderByWithRelationInput[]
    cursor?: EquippedItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EquippedItemScalarFieldEnum | EquippedItemScalarFieldEnum[]
  }

  /**
   * Character.equippedSpells
   */
  export type Character$equippedSpellsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedSpell
     */
    select?: EquippedSpellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedSpell
     */
    omit?: EquippedSpellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedSpellInclude<ExtArgs> | null
    where?: EquippedSpellWhereInput
    orderBy?: EquippedSpellOrderByWithRelationInput | EquippedSpellOrderByWithRelationInput[]
    cursor?: EquippedSpellWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EquippedSpellScalarFieldEnum | EquippedSpellScalarFieldEnum[]
  }

  /**
   * Character.battleHistory
   */
  export type Character$battleHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterBattleHistory
     */
    select?: CharacterBattleHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CharacterBattleHistory
     */
    omit?: CharacterBattleHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterBattleHistoryInclude<ExtArgs> | null
    where?: CharacterBattleHistoryWhereInput
    orderBy?: CharacterBattleHistoryOrderByWithRelationInput | CharacterBattleHistoryOrderByWithRelationInput[]
    cursor?: CharacterBattleHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CharacterBattleHistoryScalarFieldEnum | CharacterBattleHistoryScalarFieldEnum[]
  }

  /**
   * Character without action
   */
  export type CharacterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
  }


  /**
   * Model Currency
   */

  export type AggregateCurrency = {
    _count: CurrencyCountAggregateOutputType | null
    _avg: CurrencyAvgAggregateOutputType | null
    _sum: CurrencySumAggregateOutputType | null
    _min: CurrencyMinAggregateOutputType | null
    _max: CurrencyMaxAggregateOutputType | null
  }

  export type CurrencyAvgAggregateOutputType = {
    id: number | null
    inventoryId: number | null
  }

  export type CurrencySumAggregateOutputType = {
    id: bigint | null
    inventoryId: bigint | null
  }

  export type CurrencyMinAggregateOutputType = {
    id: bigint | null
    inventoryId: bigint | null
    name: string | null
    amount: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CurrencyMaxAggregateOutputType = {
    id: bigint | null
    inventoryId: bigint | null
    name: string | null
    amount: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CurrencyCountAggregateOutputType = {
    id: number
    inventoryId: number
    name: number
    amount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CurrencyAvgAggregateInputType = {
    id?: true
    inventoryId?: true
  }

  export type CurrencySumAggregateInputType = {
    id?: true
    inventoryId?: true
  }

  export type CurrencyMinAggregateInputType = {
    id?: true
    inventoryId?: true
    name?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CurrencyMaxAggregateInputType = {
    id?: true
    inventoryId?: true
    name?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CurrencyCountAggregateInputType = {
    id?: true
    inventoryId?: true
    name?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CurrencyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Currency to aggregate.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Currencies
    **/
    _count?: true | CurrencyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CurrencyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CurrencySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CurrencyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CurrencyMaxAggregateInputType
  }

  export type GetCurrencyAggregateType<T extends CurrencyAggregateArgs> = {
        [P in keyof T & keyof AggregateCurrency]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCurrency[P]>
      : GetScalarType<T[P], AggregateCurrency[P]>
  }




  export type CurrencyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CurrencyWhereInput
    orderBy?: CurrencyOrderByWithAggregationInput | CurrencyOrderByWithAggregationInput[]
    by: CurrencyScalarFieldEnum[] | CurrencyScalarFieldEnum
    having?: CurrencyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CurrencyCountAggregateInputType | true
    _avg?: CurrencyAvgAggregateInputType
    _sum?: CurrencySumAggregateInputType
    _min?: CurrencyMinAggregateInputType
    _max?: CurrencyMaxAggregateInputType
  }

  export type CurrencyGroupByOutputType = {
    id: bigint
    inventoryId: bigint
    name: string
    amount: string
    createdAt: Date
    updatedAt: Date
    _count: CurrencyCountAggregateOutputType | null
    _avg: CurrencyAvgAggregateOutputType | null
    _sum: CurrencySumAggregateOutputType | null
    _min: CurrencyMinAggregateOutputType | null
    _max: CurrencyMaxAggregateOutputType | null
  }

  type GetCurrencyGroupByPayload<T extends CurrencyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CurrencyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CurrencyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CurrencyGroupByOutputType[P]>
            : GetScalarType<T[P], CurrencyGroupByOutputType[P]>
        }
      >
    >


  export type CurrencySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryId?: boolean
    name?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["currency"]>

  export type CurrencySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryId?: boolean
    name?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["currency"]>

  export type CurrencySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryId?: boolean
    name?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["currency"]>

  export type CurrencySelectScalar = {
    id?: boolean
    inventoryId?: boolean
    name?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CurrencyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "inventoryId" | "name" | "amount" | "createdAt" | "updatedAt", ExtArgs["result"]["currency"]>
  export type CurrencyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }
  export type CurrencyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }
  export type CurrencyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }

  export type $CurrencyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Currency"
    objects: {
      inventory: Prisma.$InventoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      inventoryId: bigint
      name: string
      amount: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["currency"]>
    composites: {}
  }

  type CurrencyGetPayload<S extends boolean | null | undefined | CurrencyDefaultArgs> = $Result.GetResult<Prisma.$CurrencyPayload, S>

  type CurrencyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CurrencyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CurrencyCountAggregateInputType | true
    }

  export interface CurrencyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Currency'], meta: { name: 'Currency' } }
    /**
     * Find zero or one Currency that matches the filter.
     * @param {CurrencyFindUniqueArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CurrencyFindUniqueArgs>(args: SelectSubset<T, CurrencyFindUniqueArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Currency that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CurrencyFindUniqueOrThrowArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CurrencyFindUniqueOrThrowArgs>(args: SelectSubset<T, CurrencyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Currency that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyFindFirstArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CurrencyFindFirstArgs>(args?: SelectSubset<T, CurrencyFindFirstArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Currency that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyFindFirstOrThrowArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CurrencyFindFirstOrThrowArgs>(args?: SelectSubset<T, CurrencyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Currencies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Currencies
     * const currencies = await prisma.currency.findMany()
     * 
     * // Get first 10 Currencies
     * const currencies = await prisma.currency.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const currencyWithIdOnly = await prisma.currency.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CurrencyFindManyArgs>(args?: SelectSubset<T, CurrencyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Currency.
     * @param {CurrencyCreateArgs} args - Arguments to create a Currency.
     * @example
     * // Create one Currency
     * const Currency = await prisma.currency.create({
     *   data: {
     *     // ... data to create a Currency
     *   }
     * })
     * 
     */
    create<T extends CurrencyCreateArgs>(args: SelectSubset<T, CurrencyCreateArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Currencies.
     * @param {CurrencyCreateManyArgs} args - Arguments to create many Currencies.
     * @example
     * // Create many Currencies
     * const currency = await prisma.currency.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CurrencyCreateManyArgs>(args?: SelectSubset<T, CurrencyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Currencies and returns the data saved in the database.
     * @param {CurrencyCreateManyAndReturnArgs} args - Arguments to create many Currencies.
     * @example
     * // Create many Currencies
     * const currency = await prisma.currency.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Currencies and only return the `id`
     * const currencyWithIdOnly = await prisma.currency.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CurrencyCreateManyAndReturnArgs>(args?: SelectSubset<T, CurrencyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Currency.
     * @param {CurrencyDeleteArgs} args - Arguments to delete one Currency.
     * @example
     * // Delete one Currency
     * const Currency = await prisma.currency.delete({
     *   where: {
     *     // ... filter to delete one Currency
     *   }
     * })
     * 
     */
    delete<T extends CurrencyDeleteArgs>(args: SelectSubset<T, CurrencyDeleteArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Currency.
     * @param {CurrencyUpdateArgs} args - Arguments to update one Currency.
     * @example
     * // Update one Currency
     * const currency = await prisma.currency.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CurrencyUpdateArgs>(args: SelectSubset<T, CurrencyUpdateArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Currencies.
     * @param {CurrencyDeleteManyArgs} args - Arguments to filter Currencies to delete.
     * @example
     * // Delete a few Currencies
     * const { count } = await prisma.currency.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CurrencyDeleteManyArgs>(args?: SelectSubset<T, CurrencyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Currencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Currencies
     * const currency = await prisma.currency.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CurrencyUpdateManyArgs>(args: SelectSubset<T, CurrencyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Currencies and returns the data updated in the database.
     * @param {CurrencyUpdateManyAndReturnArgs} args - Arguments to update many Currencies.
     * @example
     * // Update many Currencies
     * const currency = await prisma.currency.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Currencies and only return the `id`
     * const currencyWithIdOnly = await prisma.currency.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CurrencyUpdateManyAndReturnArgs>(args: SelectSubset<T, CurrencyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Currency.
     * @param {CurrencyUpsertArgs} args - Arguments to update or create a Currency.
     * @example
     * // Update or create a Currency
     * const currency = await prisma.currency.upsert({
     *   create: {
     *     // ... data to create a Currency
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Currency we want to update
     *   }
     * })
     */
    upsert<T extends CurrencyUpsertArgs>(args: SelectSubset<T, CurrencyUpsertArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Currencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyCountArgs} args - Arguments to filter Currencies to count.
     * @example
     * // Count the number of Currencies
     * const count = await prisma.currency.count({
     *   where: {
     *     // ... the filter for the Currencies we want to count
     *   }
     * })
    **/
    count<T extends CurrencyCountArgs>(
      args?: Subset<T, CurrencyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CurrencyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Currency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CurrencyAggregateArgs>(args: Subset<T, CurrencyAggregateArgs>): Prisma.PrismaPromise<GetCurrencyAggregateType<T>>

    /**
     * Group by Currency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CurrencyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CurrencyGroupByArgs['orderBy'] }
        : { orderBy?: CurrencyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CurrencyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCurrencyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Currency model
   */
  readonly fields: CurrencyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Currency.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CurrencyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventory<T extends InventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDefaultArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Currency model
   */
  interface CurrencyFieldRefs {
    readonly id: FieldRef<"Currency", 'BigInt'>
    readonly inventoryId: FieldRef<"Currency", 'BigInt'>
    readonly name: FieldRef<"Currency", 'String'>
    readonly amount: FieldRef<"Currency", 'String'>
    readonly createdAt: FieldRef<"Currency", 'DateTime'>
    readonly updatedAt: FieldRef<"Currency", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Currency findUnique
   */
  export type CurrencyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency findUniqueOrThrow
   */
  export type CurrencyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency findFirst
   */
  export type CurrencyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Currencies.
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Currencies.
     */
    distinct?: CurrencyScalarFieldEnum | CurrencyScalarFieldEnum[]
  }

  /**
   * Currency findFirstOrThrow
   */
  export type CurrencyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Currencies.
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Currencies.
     */
    distinct?: CurrencyScalarFieldEnum | CurrencyScalarFieldEnum[]
  }

  /**
   * Currency findMany
   */
  export type CurrencyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currencies to fetch.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Currencies.
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    distinct?: CurrencyScalarFieldEnum | CurrencyScalarFieldEnum[]
  }

  /**
   * Currency create
   */
  export type CurrencyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * The data needed to create a Currency.
     */
    data: XOR<CurrencyCreateInput, CurrencyUncheckedCreateInput>
  }

  /**
   * Currency createMany
   */
  export type CurrencyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Currencies.
     */
    data: CurrencyCreateManyInput | CurrencyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Currency createManyAndReturn
   */
  export type CurrencyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * The data used to create many Currencies.
     */
    data: CurrencyCreateManyInput | CurrencyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Currency update
   */
  export type CurrencyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * The data needed to update a Currency.
     */
    data: XOR<CurrencyUpdateInput, CurrencyUncheckedUpdateInput>
    /**
     * Choose, which Currency to update.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency updateMany
   */
  export type CurrencyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Currencies.
     */
    data: XOR<CurrencyUpdateManyMutationInput, CurrencyUncheckedUpdateManyInput>
    /**
     * Filter which Currencies to update
     */
    where?: CurrencyWhereInput
    /**
     * Limit how many Currencies to update.
     */
    limit?: number
  }

  /**
   * Currency updateManyAndReturn
   */
  export type CurrencyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * The data used to update Currencies.
     */
    data: XOR<CurrencyUpdateManyMutationInput, CurrencyUncheckedUpdateManyInput>
    /**
     * Filter which Currencies to update
     */
    where?: CurrencyWhereInput
    /**
     * Limit how many Currencies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Currency upsert
   */
  export type CurrencyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * The filter to search for the Currency to update in case it exists.
     */
    where: CurrencyWhereUniqueInput
    /**
     * In case the Currency found by the `where` argument doesn't exist, create a new Currency with this data.
     */
    create: XOR<CurrencyCreateInput, CurrencyUncheckedCreateInput>
    /**
     * In case the Currency was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CurrencyUpdateInput, CurrencyUncheckedUpdateInput>
  }

  /**
   * Currency delete
   */
  export type CurrencyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter which Currency to delete.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency deleteMany
   */
  export type CurrencyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Currencies to delete
     */
    where?: CurrencyWhereInput
    /**
     * Limit how many Currencies to delete.
     */
    limit?: number
  }

  /**
   * Currency without action
   */
  export type CurrencyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
  }


  /**
   * Model Inventory
   */

  export type AggregateInventory = {
    _count: InventoryCountAggregateOutputType | null
    _avg: InventoryAvgAggregateOutputType | null
    _sum: InventorySumAggregateOutputType | null
    _min: InventoryMinAggregateOutputType | null
    _max: InventoryMaxAggregateOutputType | null
  }

  export type InventoryAvgAggregateOutputType = {
    id: number | null
    characterId: number | null
  }

  export type InventorySumAggregateOutputType = {
    id: bigint | null
    characterId: bigint | null
  }

  export type InventoryMinAggregateOutputType = {
    id: bigint | null
    characterId: bigint | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InventoryMaxAggregateOutputType = {
    id: bigint | null
    characterId: bigint | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InventoryCountAggregateOutputType = {
    id: number
    characterId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InventoryAvgAggregateInputType = {
    id?: true
    characterId?: true
  }

  export type InventorySumAggregateInputType = {
    id?: true
    characterId?: true
  }

  export type InventoryMinAggregateInputType = {
    id?: true
    characterId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InventoryMaxAggregateInputType = {
    id?: true
    characterId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InventoryCountAggregateInputType = {
    id?: true
    characterId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InventoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inventory to aggregate.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Inventories
    **/
    _count?: true | InventoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryMaxAggregateInputType
  }

  export type GetInventoryAggregateType<T extends InventoryAggregateArgs> = {
        [P in keyof T & keyof AggregateInventory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventory[P]>
      : GetScalarType<T[P], AggregateInventory[P]>
  }




  export type InventoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryWhereInput
    orderBy?: InventoryOrderByWithAggregationInput | InventoryOrderByWithAggregationInput[]
    by: InventoryScalarFieldEnum[] | InventoryScalarFieldEnum
    having?: InventoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryCountAggregateInputType | true
    _avg?: InventoryAvgAggregateInputType
    _sum?: InventorySumAggregateInputType
    _min?: InventoryMinAggregateInputType
    _max?: InventoryMaxAggregateInputType
  }

  export type InventoryGroupByOutputType = {
    id: bigint
    characterId: bigint
    createdAt: Date
    updatedAt: Date
    _count: InventoryCountAggregateOutputType | null
    _avg: InventoryAvgAggregateOutputType | null
    _sum: InventorySumAggregateOutputType | null
    _min: InventoryMinAggregateOutputType | null
    _max: InventoryMaxAggregateOutputType | null
  }

  type GetInventoryGroupByPayload<T extends InventoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryGroupByOutputType[P]>
        }
      >
    >


  export type InventorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    characterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    inventoryItems?: boolean | Inventory$inventoryItemsArgs<ExtArgs>
    transactions?: boolean | Inventory$transactionsArgs<ExtArgs>
    Currency?: boolean | Inventory$CurrencyArgs<ExtArgs>
    _count?: boolean | InventoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventory"]>

  export type InventorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    characterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventory"]>

  export type InventorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    characterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventory"]>

  export type InventorySelectScalar = {
    id?: boolean
    characterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InventoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "characterId" | "createdAt" | "updatedAt", ExtArgs["result"]["inventory"]>
  export type InventoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    inventoryItems?: boolean | Inventory$inventoryItemsArgs<ExtArgs>
    transactions?: boolean | Inventory$transactionsArgs<ExtArgs>
    Currency?: boolean | Inventory$CurrencyArgs<ExtArgs>
    _count?: boolean | InventoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InventoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }
  export type InventoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }

  export type $InventoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Inventory"
    objects: {
      character: Prisma.$CharacterPayload<ExtArgs>
      inventoryItems: Prisma.$InventoryItemPayload<ExtArgs>[]
      transactions: Prisma.$ItemTransactionHistoryPayload<ExtArgs>[]
      Currency: Prisma.$CurrencyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      characterId: bigint
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["inventory"]>
    composites: {}
  }

  type InventoryGetPayload<S extends boolean | null | undefined | InventoryDefaultArgs> = $Result.GetResult<Prisma.$InventoryPayload, S>

  type InventoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InventoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InventoryCountAggregateInputType | true
    }

  export interface InventoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Inventory'], meta: { name: 'Inventory' } }
    /**
     * Find zero or one Inventory that matches the filter.
     * @param {InventoryFindUniqueArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryFindUniqueArgs>(args: SelectSubset<T, InventoryFindUniqueArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Inventory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InventoryFindUniqueOrThrowArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Inventory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindFirstArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryFindFirstArgs>(args?: SelectSubset<T, InventoryFindFirstArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Inventory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindFirstOrThrowArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Inventories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inventories
     * const inventories = await prisma.inventory.findMany()
     * 
     * // Get first 10 Inventories
     * const inventories = await prisma.inventory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryWithIdOnly = await prisma.inventory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryFindManyArgs>(args?: SelectSubset<T, InventoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Inventory.
     * @param {InventoryCreateArgs} args - Arguments to create a Inventory.
     * @example
     * // Create one Inventory
     * const Inventory = await prisma.inventory.create({
     *   data: {
     *     // ... data to create a Inventory
     *   }
     * })
     * 
     */
    create<T extends InventoryCreateArgs>(args: SelectSubset<T, InventoryCreateArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Inventories.
     * @param {InventoryCreateManyArgs} args - Arguments to create many Inventories.
     * @example
     * // Create many Inventories
     * const inventory = await prisma.inventory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryCreateManyArgs>(args?: SelectSubset<T, InventoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Inventories and returns the data saved in the database.
     * @param {InventoryCreateManyAndReturnArgs} args - Arguments to create many Inventories.
     * @example
     * // Create many Inventories
     * const inventory = await prisma.inventory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Inventories and only return the `id`
     * const inventoryWithIdOnly = await prisma.inventory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InventoryCreateManyAndReturnArgs>(args?: SelectSubset<T, InventoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Inventory.
     * @param {InventoryDeleteArgs} args - Arguments to delete one Inventory.
     * @example
     * // Delete one Inventory
     * const Inventory = await prisma.inventory.delete({
     *   where: {
     *     // ... filter to delete one Inventory
     *   }
     * })
     * 
     */
    delete<T extends InventoryDeleteArgs>(args: SelectSubset<T, InventoryDeleteArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Inventory.
     * @param {InventoryUpdateArgs} args - Arguments to update one Inventory.
     * @example
     * // Update one Inventory
     * const inventory = await prisma.inventory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryUpdateArgs>(args: SelectSubset<T, InventoryUpdateArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Inventories.
     * @param {InventoryDeleteManyArgs} args - Arguments to filter Inventories to delete.
     * @example
     * // Delete a few Inventories
     * const { count } = await prisma.inventory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryDeleteManyArgs>(args?: SelectSubset<T, InventoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inventories
     * const inventory = await prisma.inventory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryUpdateManyArgs>(args: SelectSubset<T, InventoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inventories and returns the data updated in the database.
     * @param {InventoryUpdateManyAndReturnArgs} args - Arguments to update many Inventories.
     * @example
     * // Update many Inventories
     * const inventory = await prisma.inventory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Inventories and only return the `id`
     * const inventoryWithIdOnly = await prisma.inventory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InventoryUpdateManyAndReturnArgs>(args: SelectSubset<T, InventoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Inventory.
     * @param {InventoryUpsertArgs} args - Arguments to update or create a Inventory.
     * @example
     * // Update or create a Inventory
     * const inventory = await prisma.inventory.upsert({
     *   create: {
     *     // ... data to create a Inventory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inventory we want to update
     *   }
     * })
     */
    upsert<T extends InventoryUpsertArgs>(args: SelectSubset<T, InventoryUpsertArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Inventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountArgs} args - Arguments to filter Inventories to count.
     * @example
     * // Count the number of Inventories
     * const count = await prisma.inventory.count({
     *   where: {
     *     // ... the filter for the Inventories we want to count
     *   }
     * })
    **/
    count<T extends InventoryCountArgs>(
      args?: Subset<T, InventoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryAggregateArgs>(args: Subset<T, InventoryAggregateArgs>): Prisma.PrismaPromise<GetInventoryAggregateType<T>>

    /**
     * Group by Inventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryGroupByArgs['orderBy'] }
        : { orderBy?: InventoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Inventory model
   */
  readonly fields: InventoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Inventory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    character<T extends CharacterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CharacterDefaultArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    inventoryItems<T extends Inventory$inventoryItemsArgs<ExtArgs> = {}>(args?: Subset<T, Inventory$inventoryItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactions<T extends Inventory$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Inventory$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemTransactionHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Currency<T extends Inventory$CurrencyArgs<ExtArgs> = {}>(args?: Subset<T, Inventory$CurrencyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Inventory model
   */
  interface InventoryFieldRefs {
    readonly id: FieldRef<"Inventory", 'BigInt'>
    readonly characterId: FieldRef<"Inventory", 'BigInt'>
    readonly createdAt: FieldRef<"Inventory", 'DateTime'>
    readonly updatedAt: FieldRef<"Inventory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Inventory findUnique
   */
  export type InventoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory findUniqueOrThrow
   */
  export type InventoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory findFirst
   */
  export type InventoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inventories.
     */
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory findFirstOrThrow
   */
  export type InventoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inventories.
     */
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory findMany
   */
  export type InventoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventories to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory create
   */
  export type InventoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Inventory.
     */
    data: XOR<InventoryCreateInput, InventoryUncheckedCreateInput>
  }

  /**
   * Inventory createMany
   */
  export type InventoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Inventories.
     */
    data: InventoryCreateManyInput | InventoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Inventory createManyAndReturn
   */
  export type InventoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * The data used to create many Inventories.
     */
    data: InventoryCreateManyInput | InventoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Inventory update
   */
  export type InventoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Inventory.
     */
    data: XOR<InventoryUpdateInput, InventoryUncheckedUpdateInput>
    /**
     * Choose, which Inventory to update.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory updateMany
   */
  export type InventoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Inventories.
     */
    data: XOR<InventoryUpdateManyMutationInput, InventoryUncheckedUpdateManyInput>
    /**
     * Filter which Inventories to update
     */
    where?: InventoryWhereInput
    /**
     * Limit how many Inventories to update.
     */
    limit?: number
  }

  /**
   * Inventory updateManyAndReturn
   */
  export type InventoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * The data used to update Inventories.
     */
    data: XOR<InventoryUpdateManyMutationInput, InventoryUncheckedUpdateManyInput>
    /**
     * Filter which Inventories to update
     */
    where?: InventoryWhereInput
    /**
     * Limit how many Inventories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Inventory upsert
   */
  export type InventoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Inventory to update in case it exists.
     */
    where: InventoryWhereUniqueInput
    /**
     * In case the Inventory found by the `where` argument doesn't exist, create a new Inventory with this data.
     */
    create: XOR<InventoryCreateInput, InventoryUncheckedCreateInput>
    /**
     * In case the Inventory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryUpdateInput, InventoryUncheckedUpdateInput>
  }

  /**
   * Inventory delete
   */
  export type InventoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter which Inventory to delete.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory deleteMany
   */
  export type InventoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inventories to delete
     */
    where?: InventoryWhereInput
    /**
     * Limit how many Inventories to delete.
     */
    limit?: number
  }

  /**
   * Inventory.inventoryItems
   */
  export type Inventory$inventoryItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    where?: InventoryItemWhereInput
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    cursor?: InventoryItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
  }

  /**
   * Inventory.transactions
   */
  export type Inventory$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemTransactionHistory
     */
    select?: ItemTransactionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemTransactionHistory
     */
    omit?: ItemTransactionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemTransactionHistoryInclude<ExtArgs> | null
    where?: ItemTransactionHistoryWhereInput
    orderBy?: ItemTransactionHistoryOrderByWithRelationInput | ItemTransactionHistoryOrderByWithRelationInput[]
    cursor?: ItemTransactionHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemTransactionHistoryScalarFieldEnum | ItemTransactionHistoryScalarFieldEnum[]
  }

  /**
   * Inventory.Currency
   */
  export type Inventory$CurrencyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    where?: CurrencyWhereInput
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    cursor?: CurrencyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CurrencyScalarFieldEnum | CurrencyScalarFieldEnum[]
  }

  /**
   * Inventory without action
   */
  export type InventoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
  }


  /**
   * Model InventoryItem
   */

  export type AggregateInventoryItem = {
    _count: InventoryItemCountAggregateOutputType | null
    _avg: InventoryItemAvgAggregateOutputType | null
    _sum: InventoryItemSumAggregateOutputType | null
    _min: InventoryItemMinAggregateOutputType | null
    _max: InventoryItemMaxAggregateOutputType | null
  }

  export type InventoryItemAvgAggregateOutputType = {
    id: number | null
    inventoryId: number | null
    itemsId: number | null
  }

  export type InventoryItemSumAggregateOutputType = {
    id: bigint | null
    inventoryId: bigint | null
    itemsId: bigint | null
  }

  export type InventoryItemMinAggregateOutputType = {
    id: bigint | null
    inventoryId: bigint | null
    itemsId: bigint | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InventoryItemMaxAggregateOutputType = {
    id: bigint | null
    inventoryId: bigint | null
    itemsId: bigint | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InventoryItemCountAggregateOutputType = {
    id: number
    inventoryId: number
    itemsId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InventoryItemAvgAggregateInputType = {
    id?: true
    inventoryId?: true
    itemsId?: true
  }

  export type InventoryItemSumAggregateInputType = {
    id?: true
    inventoryId?: true
    itemsId?: true
  }

  export type InventoryItemMinAggregateInputType = {
    id?: true
    inventoryId?: true
    itemsId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InventoryItemMaxAggregateInputType = {
    id?: true
    inventoryId?: true
    itemsId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InventoryItemCountAggregateInputType = {
    id?: true
    inventoryId?: true
    itemsId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InventoryItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryItem to aggregate.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryItems
    **/
    _count?: true | InventoryItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventoryItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryItemMaxAggregateInputType
  }

  export type GetInventoryItemAggregateType<T extends InventoryItemAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryItem[P]>
      : GetScalarType<T[P], AggregateInventoryItem[P]>
  }




  export type InventoryItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryItemWhereInput
    orderBy?: InventoryItemOrderByWithAggregationInput | InventoryItemOrderByWithAggregationInput[]
    by: InventoryItemScalarFieldEnum[] | InventoryItemScalarFieldEnum
    having?: InventoryItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryItemCountAggregateInputType | true
    _avg?: InventoryItemAvgAggregateInputType
    _sum?: InventoryItemSumAggregateInputType
    _min?: InventoryItemMinAggregateInputType
    _max?: InventoryItemMaxAggregateInputType
  }

  export type InventoryItemGroupByOutputType = {
    id: bigint
    inventoryId: bigint
    itemsId: bigint
    createdAt: Date
    updatedAt: Date
    _count: InventoryItemCountAggregateOutputType | null
    _avg: InventoryItemAvgAggregateOutputType | null
    _sum: InventoryItemSumAggregateOutputType | null
    _min: InventoryItemMinAggregateOutputType | null
    _max: InventoryItemMaxAggregateOutputType | null
  }

  type GetInventoryItemGroupByPayload<T extends InventoryItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryItemGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryItemGroupByOutputType[P]>
        }
      >
    >


  export type InventoryItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryId?: boolean
    itemsId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    item?: boolean | ItemsDefaultArgs<ExtArgs>
    equippedItem?: boolean | InventoryItem$equippedItemArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryItem"]>

  export type InventoryItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryId?: boolean
    itemsId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    item?: boolean | ItemsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryItem"]>

  export type InventoryItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryId?: boolean
    itemsId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    item?: boolean | ItemsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryItem"]>

  export type InventoryItemSelectScalar = {
    id?: boolean
    inventoryId?: boolean
    itemsId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InventoryItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "inventoryId" | "itemsId" | "createdAt" | "updatedAt", ExtArgs["result"]["inventoryItem"]>
  export type InventoryItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    item?: boolean | ItemsDefaultArgs<ExtArgs>
    equippedItem?: boolean | InventoryItem$equippedItemArgs<ExtArgs>
  }
  export type InventoryItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    item?: boolean | ItemsDefaultArgs<ExtArgs>
  }
  export type InventoryItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    item?: boolean | ItemsDefaultArgs<ExtArgs>
  }

  export type $InventoryItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryItem"
    objects: {
      inventory: Prisma.$InventoryPayload<ExtArgs>
      item: Prisma.$ItemsPayload<ExtArgs>
      equippedItem: Prisma.$EquippedItemPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      inventoryId: bigint
      itemsId: bigint
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["inventoryItem"]>
    composites: {}
  }

  type InventoryItemGetPayload<S extends boolean | null | undefined | InventoryItemDefaultArgs> = $Result.GetResult<Prisma.$InventoryItemPayload, S>

  type InventoryItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InventoryItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InventoryItemCountAggregateInputType | true
    }

  export interface InventoryItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryItem'], meta: { name: 'InventoryItem' } }
    /**
     * Find zero or one InventoryItem that matches the filter.
     * @param {InventoryItemFindUniqueArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryItemFindUniqueArgs>(args: SelectSubset<T, InventoryItemFindUniqueArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InventoryItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InventoryItemFindUniqueOrThrowArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryItemFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InventoryItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemFindFirstArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryItemFindFirstArgs>(args?: SelectSubset<T, InventoryItemFindFirstArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InventoryItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemFindFirstOrThrowArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryItemFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InventoryItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryItems
     * const inventoryItems = await prisma.inventoryItem.findMany()
     * 
     * // Get first 10 InventoryItems
     * const inventoryItems = await prisma.inventoryItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryItemWithIdOnly = await prisma.inventoryItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryItemFindManyArgs>(args?: SelectSubset<T, InventoryItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InventoryItem.
     * @param {InventoryItemCreateArgs} args - Arguments to create a InventoryItem.
     * @example
     * // Create one InventoryItem
     * const InventoryItem = await prisma.inventoryItem.create({
     *   data: {
     *     // ... data to create a InventoryItem
     *   }
     * })
     * 
     */
    create<T extends InventoryItemCreateArgs>(args: SelectSubset<T, InventoryItemCreateArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InventoryItems.
     * @param {InventoryItemCreateManyArgs} args - Arguments to create many InventoryItems.
     * @example
     * // Create many InventoryItems
     * const inventoryItem = await prisma.inventoryItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryItemCreateManyArgs>(args?: SelectSubset<T, InventoryItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InventoryItems and returns the data saved in the database.
     * @param {InventoryItemCreateManyAndReturnArgs} args - Arguments to create many InventoryItems.
     * @example
     * // Create many InventoryItems
     * const inventoryItem = await prisma.inventoryItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InventoryItems and only return the `id`
     * const inventoryItemWithIdOnly = await prisma.inventoryItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InventoryItemCreateManyAndReturnArgs>(args?: SelectSubset<T, InventoryItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InventoryItem.
     * @param {InventoryItemDeleteArgs} args - Arguments to delete one InventoryItem.
     * @example
     * // Delete one InventoryItem
     * const InventoryItem = await prisma.inventoryItem.delete({
     *   where: {
     *     // ... filter to delete one InventoryItem
     *   }
     * })
     * 
     */
    delete<T extends InventoryItemDeleteArgs>(args: SelectSubset<T, InventoryItemDeleteArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InventoryItem.
     * @param {InventoryItemUpdateArgs} args - Arguments to update one InventoryItem.
     * @example
     * // Update one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryItemUpdateArgs>(args: SelectSubset<T, InventoryItemUpdateArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InventoryItems.
     * @param {InventoryItemDeleteManyArgs} args - Arguments to filter InventoryItems to delete.
     * @example
     * // Delete a few InventoryItems
     * const { count } = await prisma.inventoryItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryItemDeleteManyArgs>(args?: SelectSubset<T, InventoryItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryItems
     * const inventoryItem = await prisma.inventoryItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryItemUpdateManyArgs>(args: SelectSubset<T, InventoryItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryItems and returns the data updated in the database.
     * @param {InventoryItemUpdateManyAndReturnArgs} args - Arguments to update many InventoryItems.
     * @example
     * // Update many InventoryItems
     * const inventoryItem = await prisma.inventoryItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InventoryItems and only return the `id`
     * const inventoryItemWithIdOnly = await prisma.inventoryItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InventoryItemUpdateManyAndReturnArgs>(args: SelectSubset<T, InventoryItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InventoryItem.
     * @param {InventoryItemUpsertArgs} args - Arguments to update or create a InventoryItem.
     * @example
     * // Update or create a InventoryItem
     * const inventoryItem = await prisma.inventoryItem.upsert({
     *   create: {
     *     // ... data to create a InventoryItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryItem we want to update
     *   }
     * })
     */
    upsert<T extends InventoryItemUpsertArgs>(args: SelectSubset<T, InventoryItemUpsertArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InventoryItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemCountArgs} args - Arguments to filter InventoryItems to count.
     * @example
     * // Count the number of InventoryItems
     * const count = await prisma.inventoryItem.count({
     *   where: {
     *     // ... the filter for the InventoryItems we want to count
     *   }
     * })
    **/
    count<T extends InventoryItemCountArgs>(
      args?: Subset<T, InventoryItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryItemAggregateArgs>(args: Subset<T, InventoryItemAggregateArgs>): Prisma.PrismaPromise<GetInventoryItemAggregateType<T>>

    /**
     * Group by InventoryItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryItemGroupByArgs['orderBy'] }
        : { orderBy?: InventoryItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryItem model
   */
  readonly fields: InventoryItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventory<T extends InventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDefaultArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    item<T extends ItemsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemsDefaultArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    equippedItem<T extends InventoryItem$equippedItemArgs<ExtArgs> = {}>(args?: Subset<T, InventoryItem$equippedItemArgs<ExtArgs>>): Prisma__EquippedItemClient<$Result.GetResult<Prisma.$EquippedItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryItem model
   */
  interface InventoryItemFieldRefs {
    readonly id: FieldRef<"InventoryItem", 'BigInt'>
    readonly inventoryId: FieldRef<"InventoryItem", 'BigInt'>
    readonly itemsId: FieldRef<"InventoryItem", 'BigInt'>
    readonly createdAt: FieldRef<"InventoryItem", 'DateTime'>
    readonly updatedAt: FieldRef<"InventoryItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InventoryItem findUnique
   */
  export type InventoryItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where: InventoryItemWhereUniqueInput
  }

  /**
   * InventoryItem findUniqueOrThrow
   */
  export type InventoryItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where: InventoryItemWhereUniqueInput
  }

  /**
   * InventoryItem findFirst
   */
  export type InventoryItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryItems.
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryItems.
     */
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
  }

  /**
   * InventoryItem findFirstOrThrow
   */
  export type InventoryItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryItems.
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryItems.
     */
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
  }

  /**
   * InventoryItem findMany
   */
  export type InventoryItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItems to fetch.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryItems.
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
  }

  /**
   * InventoryItem create
   */
  export type InventoryItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * The data needed to create a InventoryItem.
     */
    data: XOR<InventoryItemCreateInput, InventoryItemUncheckedCreateInput>
  }

  /**
   * InventoryItem createMany
   */
  export type InventoryItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryItems.
     */
    data: InventoryItemCreateManyInput | InventoryItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InventoryItem createManyAndReturn
   */
  export type InventoryItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * The data used to create many InventoryItems.
     */
    data: InventoryItemCreateManyInput | InventoryItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InventoryItem update
   */
  export type InventoryItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * The data needed to update a InventoryItem.
     */
    data: XOR<InventoryItemUpdateInput, InventoryItemUncheckedUpdateInput>
    /**
     * Choose, which InventoryItem to update.
     */
    where: InventoryItemWhereUniqueInput
  }

  /**
   * InventoryItem updateMany
   */
  export type InventoryItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryItems.
     */
    data: XOR<InventoryItemUpdateManyMutationInput, InventoryItemUncheckedUpdateManyInput>
    /**
     * Filter which InventoryItems to update
     */
    where?: InventoryItemWhereInput
    /**
     * Limit how many InventoryItems to update.
     */
    limit?: number
  }

  /**
   * InventoryItem updateManyAndReturn
   */
  export type InventoryItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * The data used to update InventoryItems.
     */
    data: XOR<InventoryItemUpdateManyMutationInput, InventoryItemUncheckedUpdateManyInput>
    /**
     * Filter which InventoryItems to update
     */
    where?: InventoryItemWhereInput
    /**
     * Limit how many InventoryItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InventoryItem upsert
   */
  export type InventoryItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * The filter to search for the InventoryItem to update in case it exists.
     */
    where: InventoryItemWhereUniqueInput
    /**
     * In case the InventoryItem found by the `where` argument doesn't exist, create a new InventoryItem with this data.
     */
    create: XOR<InventoryItemCreateInput, InventoryItemUncheckedCreateInput>
    /**
     * In case the InventoryItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryItemUpdateInput, InventoryItemUncheckedUpdateInput>
  }

  /**
   * InventoryItem delete
   */
  export type InventoryItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter which InventoryItem to delete.
     */
    where: InventoryItemWhereUniqueInput
  }

  /**
   * InventoryItem deleteMany
   */
  export type InventoryItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryItems to delete
     */
    where?: InventoryItemWhereInput
    /**
     * Limit how many InventoryItems to delete.
     */
    limit?: number
  }

  /**
   * InventoryItem.equippedItem
   */
  export type InventoryItem$equippedItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedItem
     */
    select?: EquippedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedItem
     */
    omit?: EquippedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedItemInclude<ExtArgs> | null
    where?: EquippedItemWhereInput
  }

  /**
   * InventoryItem without action
   */
  export type InventoryItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
  }


  /**
   * Model Items
   */

  export type AggregateItems = {
    _count: ItemsCountAggregateOutputType | null
    _avg: ItemsAvgAggregateOutputType | null
    _sum: ItemsSumAggregateOutputType | null
    _min: ItemsMinAggregateOutputType | null
    _max: ItemsMaxAggregateOutputType | null
  }

  export type ItemsAvgAggregateOutputType = {
    id: number | null
    campaignId: number | null
  }

  export type ItemsSumAggregateOutputType = {
    id: bigint | null
    campaignId: bigint | null
  }

  export type ItemsMinAggregateOutputType = {
    id: bigint | null
    campaignId: bigint | null
    type: string | null
    rarity: string | null
    name: string | null
    slot: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ItemsMaxAggregateOutputType = {
    id: bigint | null
    campaignId: bigint | null
    type: string | null
    rarity: string | null
    name: string | null
    slot: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ItemsCountAggregateOutputType = {
    id: number
    campaignId: number
    type: number
    rarity: number
    name: number
    slot: number
    attributes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ItemsAvgAggregateInputType = {
    id?: true
    campaignId?: true
  }

  export type ItemsSumAggregateInputType = {
    id?: true
    campaignId?: true
  }

  export type ItemsMinAggregateInputType = {
    id?: true
    campaignId?: true
    type?: true
    rarity?: true
    name?: true
    slot?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ItemsMaxAggregateInputType = {
    id?: true
    campaignId?: true
    type?: true
    rarity?: true
    name?: true
    slot?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ItemsCountAggregateInputType = {
    id?: true
    campaignId?: true
    type?: true
    rarity?: true
    name?: true
    slot?: true
    attributes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ItemsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to aggregate.
     */
    where?: ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Items
    **/
    _count?: true | ItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemsMaxAggregateInputType
  }

  export type GetItemsAggregateType<T extends ItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItems[P]>
      : GetScalarType<T[P], AggregateItems[P]>
  }




  export type ItemsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemsWhereInput
    orderBy?: ItemsOrderByWithAggregationInput | ItemsOrderByWithAggregationInput[]
    by: ItemsScalarFieldEnum[] | ItemsScalarFieldEnum
    having?: ItemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemsCountAggregateInputType | true
    _avg?: ItemsAvgAggregateInputType
    _sum?: ItemsSumAggregateInputType
    _min?: ItemsMinAggregateInputType
    _max?: ItemsMaxAggregateInputType
  }

  export type ItemsGroupByOutputType = {
    id: bigint
    campaignId: bigint
    type: string
    rarity: string
    name: string
    slot: string
    attributes: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: ItemsCountAggregateOutputType | null
    _avg: ItemsAvgAggregateOutputType | null
    _sum: ItemsSumAggregateOutputType | null
    _min: ItemsMinAggregateOutputType | null
    _max: ItemsMaxAggregateOutputType | null
  }

  type GetItemsGroupByPayload<T extends ItemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemsGroupByOutputType[P]>
            : GetScalarType<T[P], ItemsGroupByOutputType[P]>
        }
      >
    >


  export type ItemsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    type?: boolean
    rarity?: boolean
    name?: boolean
    slot?: boolean
    attributes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    inventoryItems?: boolean | Items$inventoryItemsArgs<ExtArgs>
    transactionHistories?: boolean | Items$transactionHistoriesArgs<ExtArgs>
    _count?: boolean | ItemsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["items"]>

  export type ItemsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    type?: boolean
    rarity?: boolean
    name?: boolean
    slot?: boolean
    attributes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["items"]>

  export type ItemsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    type?: boolean
    rarity?: boolean
    name?: boolean
    slot?: boolean
    attributes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["items"]>

  export type ItemsSelectScalar = {
    id?: boolean
    campaignId?: boolean
    type?: boolean
    rarity?: boolean
    name?: boolean
    slot?: boolean
    attributes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ItemsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "campaignId" | "type" | "rarity" | "name" | "slot" | "attributes" | "createdAt" | "updatedAt", ExtArgs["result"]["items"]>
  export type ItemsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    inventoryItems?: boolean | Items$inventoryItemsArgs<ExtArgs>
    transactionHistories?: boolean | Items$transactionHistoriesArgs<ExtArgs>
    _count?: boolean | ItemsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ItemsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }
  export type ItemsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }

  export type $ItemsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Items"
    objects: {
      campaign: Prisma.$CampaignPayload<ExtArgs>
      inventoryItems: Prisma.$InventoryItemPayload<ExtArgs>[]
      transactionHistories: Prisma.$ItemTransactionHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      campaignId: bigint
      type: string
      rarity: string
      name: string
      slot: string
      attributes: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["items"]>
    composites: {}
  }

  type ItemsGetPayload<S extends boolean | null | undefined | ItemsDefaultArgs> = $Result.GetResult<Prisma.$ItemsPayload, S>

  type ItemsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ItemsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ItemsCountAggregateInputType | true
    }

  export interface ItemsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Items'], meta: { name: 'Items' } }
    /**
     * Find zero or one Items that matches the filter.
     * @param {ItemsFindUniqueArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ItemsFindUniqueArgs>(args: SelectSubset<T, ItemsFindUniqueArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Items that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ItemsFindUniqueOrThrowArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ItemsFindUniqueOrThrowArgs>(args: SelectSubset<T, ItemsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsFindFirstArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ItemsFindFirstArgs>(args?: SelectSubset<T, ItemsFindFirstArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Items that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsFindFirstOrThrowArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ItemsFindFirstOrThrowArgs>(args?: SelectSubset<T, ItemsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.items.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.items.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemsWithIdOnly = await prisma.items.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ItemsFindManyArgs>(args?: SelectSubset<T, ItemsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Items.
     * @param {ItemsCreateArgs} args - Arguments to create a Items.
     * @example
     * // Create one Items
     * const Items = await prisma.items.create({
     *   data: {
     *     // ... data to create a Items
     *   }
     * })
     * 
     */
    create<T extends ItemsCreateArgs>(args: SelectSubset<T, ItemsCreateArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Items.
     * @param {ItemsCreateManyArgs} args - Arguments to create many Items.
     * @example
     * // Create many Items
     * const items = await prisma.items.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ItemsCreateManyArgs>(args?: SelectSubset<T, ItemsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Items and returns the data saved in the database.
     * @param {ItemsCreateManyAndReturnArgs} args - Arguments to create many Items.
     * @example
     * // Create many Items
     * const items = await prisma.items.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Items and only return the `id`
     * const itemsWithIdOnly = await prisma.items.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ItemsCreateManyAndReturnArgs>(args?: SelectSubset<T, ItemsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Items.
     * @param {ItemsDeleteArgs} args - Arguments to delete one Items.
     * @example
     * // Delete one Items
     * const Items = await prisma.items.delete({
     *   where: {
     *     // ... filter to delete one Items
     *   }
     * })
     * 
     */
    delete<T extends ItemsDeleteArgs>(args: SelectSubset<T, ItemsDeleteArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Items.
     * @param {ItemsUpdateArgs} args - Arguments to update one Items.
     * @example
     * // Update one Items
     * const items = await prisma.items.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ItemsUpdateArgs>(args: SelectSubset<T, ItemsUpdateArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Items.
     * @param {ItemsDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.items.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ItemsDeleteManyArgs>(args?: SelectSubset<T, ItemsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const items = await prisma.items.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ItemsUpdateManyArgs>(args: SelectSubset<T, ItemsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items and returns the data updated in the database.
     * @param {ItemsUpdateManyAndReturnArgs} args - Arguments to update many Items.
     * @example
     * // Update many Items
     * const items = await prisma.items.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Items and only return the `id`
     * const itemsWithIdOnly = await prisma.items.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ItemsUpdateManyAndReturnArgs>(args: SelectSubset<T, ItemsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Items.
     * @param {ItemsUpsertArgs} args - Arguments to update or create a Items.
     * @example
     * // Update or create a Items
     * const items = await prisma.items.upsert({
     *   create: {
     *     // ... data to create a Items
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Items we want to update
     *   }
     * })
     */
    upsert<T extends ItemsUpsertArgs>(args: SelectSubset<T, ItemsUpsertArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.items.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends ItemsCountArgs>(
      args?: Subset<T, ItemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemsAggregateArgs>(args: Subset<T, ItemsAggregateArgs>): Prisma.PrismaPromise<GetItemsAggregateType<T>>

    /**
     * Group by Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemsGroupByArgs['orderBy'] }
        : { orderBy?: ItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Items model
   */
  readonly fields: ItemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Items.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    campaign<T extends CampaignDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CampaignDefaultArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    inventoryItems<T extends Items$inventoryItemsArgs<ExtArgs> = {}>(args?: Subset<T, Items$inventoryItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactionHistories<T extends Items$transactionHistoriesArgs<ExtArgs> = {}>(args?: Subset<T, Items$transactionHistoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemTransactionHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Items model
   */
  interface ItemsFieldRefs {
    readonly id: FieldRef<"Items", 'BigInt'>
    readonly campaignId: FieldRef<"Items", 'BigInt'>
    readonly type: FieldRef<"Items", 'String'>
    readonly rarity: FieldRef<"Items", 'String'>
    readonly name: FieldRef<"Items", 'String'>
    readonly slot: FieldRef<"Items", 'String'>
    readonly attributes: FieldRef<"Items", 'Json'>
    readonly createdAt: FieldRef<"Items", 'DateTime'>
    readonly updatedAt: FieldRef<"Items", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Items findUnique
   */
  export type ItemsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Items
     */
    omit?: ItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where: ItemsWhereUniqueInput
  }

  /**
   * Items findUniqueOrThrow
   */
  export type ItemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Items
     */
    omit?: ItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where: ItemsWhereUniqueInput
  }

  /**
   * Items findFirst
   */
  export type ItemsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Items
     */
    omit?: ItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }

  /**
   * Items findFirstOrThrow
   */
  export type ItemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Items
     */
    omit?: ItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }

  /**
   * Items findMany
   */
  export type ItemsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Items
     */
    omit?: ItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Items.
     */
    cursor?: ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }

  /**
   * Items create
   */
  export type ItemsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Items
     */
    omit?: ItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * The data needed to create a Items.
     */
    data: XOR<ItemsCreateInput, ItemsUncheckedCreateInput>
  }

  /**
   * Items createMany
   */
  export type ItemsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Items.
     */
    data: ItemsCreateManyInput | ItemsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Items createManyAndReturn
   */
  export type ItemsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Items
     */
    omit?: ItemsOmit<ExtArgs> | null
    /**
     * The data used to create many Items.
     */
    data: ItemsCreateManyInput | ItemsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Items update
   */
  export type ItemsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Items
     */
    omit?: ItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * The data needed to update a Items.
     */
    data: XOR<ItemsUpdateInput, ItemsUncheckedUpdateInput>
    /**
     * Choose, which Items to update.
     */
    where: ItemsWhereUniqueInput
  }

  /**
   * Items updateMany
   */
  export type ItemsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Items.
     */
    data: XOR<ItemsUpdateManyMutationInput, ItemsUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     */
    where?: ItemsWhereInput
    /**
     * Limit how many Items to update.
     */
    limit?: number
  }

  /**
   * Items updateManyAndReturn
   */
  export type ItemsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Items
     */
    omit?: ItemsOmit<ExtArgs> | null
    /**
     * The data used to update Items.
     */
    data: XOR<ItemsUpdateManyMutationInput, ItemsUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     */
    where?: ItemsWhereInput
    /**
     * Limit how many Items to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Items upsert
   */
  export type ItemsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Items
     */
    omit?: ItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * The filter to search for the Items to update in case it exists.
     */
    where: ItemsWhereUniqueInput
    /**
     * In case the Items found by the `where` argument doesn't exist, create a new Items with this data.
     */
    create: XOR<ItemsCreateInput, ItemsUncheckedCreateInput>
    /**
     * In case the Items was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemsUpdateInput, ItemsUncheckedUpdateInput>
  }

  /**
   * Items delete
   */
  export type ItemsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Items
     */
    omit?: ItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * Filter which Items to delete.
     */
    where: ItemsWhereUniqueInput
  }

  /**
   * Items deleteMany
   */
  export type ItemsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to delete
     */
    where?: ItemsWhereInput
    /**
     * Limit how many Items to delete.
     */
    limit?: number
  }

  /**
   * Items.inventoryItems
   */
  export type Items$inventoryItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    where?: InventoryItemWhereInput
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    cursor?: InventoryItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
  }

  /**
   * Items.transactionHistories
   */
  export type Items$transactionHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemTransactionHistory
     */
    select?: ItemTransactionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemTransactionHistory
     */
    omit?: ItemTransactionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemTransactionHistoryInclude<ExtArgs> | null
    where?: ItemTransactionHistoryWhereInput
    orderBy?: ItemTransactionHistoryOrderByWithRelationInput | ItemTransactionHistoryOrderByWithRelationInput[]
    cursor?: ItemTransactionHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemTransactionHistoryScalarFieldEnum | ItemTransactionHistoryScalarFieldEnum[]
  }

  /**
   * Items without action
   */
  export type ItemsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Items
     */
    omit?: ItemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsInclude<ExtArgs> | null
  }


  /**
   * Model ItemTransactionHistory
   */

  export type AggregateItemTransactionHistory = {
    _count: ItemTransactionHistoryCountAggregateOutputType | null
    _avg: ItemTransactionHistoryAvgAggregateOutputType | null
    _sum: ItemTransactionHistorySumAggregateOutputType | null
    _min: ItemTransactionHistoryMinAggregateOutputType | null
    _max: ItemTransactionHistoryMaxAggregateOutputType | null
  }

  export type ItemTransactionHistoryAvgAggregateOutputType = {
    id: number | null
    campaignId: number | null
    itemId: number | null
    inventoryId: number | null
    fromInventoryId: number | null
  }

  export type ItemTransactionHistorySumAggregateOutputType = {
    id: bigint | null
    campaignId: bigint | null
    itemId: bigint | null
    inventoryId: bigint | null
    fromInventoryId: bigint | null
  }

  export type ItemTransactionHistoryMinAggregateOutputType = {
    id: bigint | null
    campaignId: bigint | null
    itemId: bigint | null
    inventoryId: bigint | null
    fromInventoryId: bigint | null
    transactionType: string | null
    amount: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ItemTransactionHistoryMaxAggregateOutputType = {
    id: bigint | null
    campaignId: bigint | null
    itemId: bigint | null
    inventoryId: bigint | null
    fromInventoryId: bigint | null
    transactionType: string | null
    amount: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ItemTransactionHistoryCountAggregateOutputType = {
    id: number
    campaignId: number
    itemId: number
    inventoryId: number
    fromInventoryId: number
    transactionType: number
    amount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ItemTransactionHistoryAvgAggregateInputType = {
    id?: true
    campaignId?: true
    itemId?: true
    inventoryId?: true
    fromInventoryId?: true
  }

  export type ItemTransactionHistorySumAggregateInputType = {
    id?: true
    campaignId?: true
    itemId?: true
    inventoryId?: true
    fromInventoryId?: true
  }

  export type ItemTransactionHistoryMinAggregateInputType = {
    id?: true
    campaignId?: true
    itemId?: true
    inventoryId?: true
    fromInventoryId?: true
    transactionType?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ItemTransactionHistoryMaxAggregateInputType = {
    id?: true
    campaignId?: true
    itemId?: true
    inventoryId?: true
    fromInventoryId?: true
    transactionType?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ItemTransactionHistoryCountAggregateInputType = {
    id?: true
    campaignId?: true
    itemId?: true
    inventoryId?: true
    fromInventoryId?: true
    transactionType?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ItemTransactionHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ItemTransactionHistory to aggregate.
     */
    where?: ItemTransactionHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemTransactionHistories to fetch.
     */
    orderBy?: ItemTransactionHistoryOrderByWithRelationInput | ItemTransactionHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemTransactionHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemTransactionHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemTransactionHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ItemTransactionHistories
    **/
    _count?: true | ItemTransactionHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemTransactionHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemTransactionHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemTransactionHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemTransactionHistoryMaxAggregateInputType
  }

  export type GetItemTransactionHistoryAggregateType<T extends ItemTransactionHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateItemTransactionHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItemTransactionHistory[P]>
      : GetScalarType<T[P], AggregateItemTransactionHistory[P]>
  }




  export type ItemTransactionHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemTransactionHistoryWhereInput
    orderBy?: ItemTransactionHistoryOrderByWithAggregationInput | ItemTransactionHistoryOrderByWithAggregationInput[]
    by: ItemTransactionHistoryScalarFieldEnum[] | ItemTransactionHistoryScalarFieldEnum
    having?: ItemTransactionHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemTransactionHistoryCountAggregateInputType | true
    _avg?: ItemTransactionHistoryAvgAggregateInputType
    _sum?: ItemTransactionHistorySumAggregateInputType
    _min?: ItemTransactionHistoryMinAggregateInputType
    _max?: ItemTransactionHistoryMaxAggregateInputType
  }

  export type ItemTransactionHistoryGroupByOutputType = {
    id: bigint
    campaignId: bigint
    itemId: bigint
    inventoryId: bigint
    fromInventoryId: bigint | null
    transactionType: string
    amount: string | null
    createdAt: Date
    updatedAt: Date
    _count: ItemTransactionHistoryCountAggregateOutputType | null
    _avg: ItemTransactionHistoryAvgAggregateOutputType | null
    _sum: ItemTransactionHistorySumAggregateOutputType | null
    _min: ItemTransactionHistoryMinAggregateOutputType | null
    _max: ItemTransactionHistoryMaxAggregateOutputType | null
  }

  type GetItemTransactionHistoryGroupByPayload<T extends ItemTransactionHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemTransactionHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemTransactionHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemTransactionHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], ItemTransactionHistoryGroupByOutputType[P]>
        }
      >
    >


  export type ItemTransactionHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    itemId?: boolean
    inventoryId?: boolean
    fromInventoryId?: boolean
    transactionType?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    item?: boolean | ItemsDefaultArgs<ExtArgs>
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["itemTransactionHistory"]>

  export type ItemTransactionHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    itemId?: boolean
    inventoryId?: boolean
    fromInventoryId?: boolean
    transactionType?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    item?: boolean | ItemsDefaultArgs<ExtArgs>
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["itemTransactionHistory"]>

  export type ItemTransactionHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    itemId?: boolean
    inventoryId?: boolean
    fromInventoryId?: boolean
    transactionType?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    item?: boolean | ItemsDefaultArgs<ExtArgs>
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["itemTransactionHistory"]>

  export type ItemTransactionHistorySelectScalar = {
    id?: boolean
    campaignId?: boolean
    itemId?: boolean
    inventoryId?: boolean
    fromInventoryId?: boolean
    transactionType?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ItemTransactionHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "campaignId" | "itemId" | "inventoryId" | "fromInventoryId" | "transactionType" | "amount" | "createdAt" | "updatedAt", ExtArgs["result"]["itemTransactionHistory"]>
  export type ItemTransactionHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    item?: boolean | ItemsDefaultArgs<ExtArgs>
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }
  export type ItemTransactionHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    item?: boolean | ItemsDefaultArgs<ExtArgs>
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }
  export type ItemTransactionHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    item?: boolean | ItemsDefaultArgs<ExtArgs>
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }

  export type $ItemTransactionHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ItemTransactionHistory"
    objects: {
      campaign: Prisma.$CampaignPayload<ExtArgs>
      item: Prisma.$ItemsPayload<ExtArgs>
      inventory: Prisma.$InventoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      campaignId: bigint
      itemId: bigint
      inventoryId: bigint
      fromInventoryId: bigint | null
      transactionType: string
      amount: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["itemTransactionHistory"]>
    composites: {}
  }

  type ItemTransactionHistoryGetPayload<S extends boolean | null | undefined | ItemTransactionHistoryDefaultArgs> = $Result.GetResult<Prisma.$ItemTransactionHistoryPayload, S>

  type ItemTransactionHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ItemTransactionHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ItemTransactionHistoryCountAggregateInputType | true
    }

  export interface ItemTransactionHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ItemTransactionHistory'], meta: { name: 'ItemTransactionHistory' } }
    /**
     * Find zero or one ItemTransactionHistory that matches the filter.
     * @param {ItemTransactionHistoryFindUniqueArgs} args - Arguments to find a ItemTransactionHistory
     * @example
     * // Get one ItemTransactionHistory
     * const itemTransactionHistory = await prisma.itemTransactionHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ItemTransactionHistoryFindUniqueArgs>(args: SelectSubset<T, ItemTransactionHistoryFindUniqueArgs<ExtArgs>>): Prisma__ItemTransactionHistoryClient<$Result.GetResult<Prisma.$ItemTransactionHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ItemTransactionHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ItemTransactionHistoryFindUniqueOrThrowArgs} args - Arguments to find a ItemTransactionHistory
     * @example
     * // Get one ItemTransactionHistory
     * const itemTransactionHistory = await prisma.itemTransactionHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ItemTransactionHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ItemTransactionHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ItemTransactionHistoryClient<$Result.GetResult<Prisma.$ItemTransactionHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ItemTransactionHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemTransactionHistoryFindFirstArgs} args - Arguments to find a ItemTransactionHistory
     * @example
     * // Get one ItemTransactionHistory
     * const itemTransactionHistory = await prisma.itemTransactionHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ItemTransactionHistoryFindFirstArgs>(args?: SelectSubset<T, ItemTransactionHistoryFindFirstArgs<ExtArgs>>): Prisma__ItemTransactionHistoryClient<$Result.GetResult<Prisma.$ItemTransactionHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ItemTransactionHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemTransactionHistoryFindFirstOrThrowArgs} args - Arguments to find a ItemTransactionHistory
     * @example
     * // Get one ItemTransactionHistory
     * const itemTransactionHistory = await prisma.itemTransactionHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ItemTransactionHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ItemTransactionHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ItemTransactionHistoryClient<$Result.GetResult<Prisma.$ItemTransactionHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ItemTransactionHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemTransactionHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ItemTransactionHistories
     * const itemTransactionHistories = await prisma.itemTransactionHistory.findMany()
     * 
     * // Get first 10 ItemTransactionHistories
     * const itemTransactionHistories = await prisma.itemTransactionHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemTransactionHistoryWithIdOnly = await prisma.itemTransactionHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ItemTransactionHistoryFindManyArgs>(args?: SelectSubset<T, ItemTransactionHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemTransactionHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ItemTransactionHistory.
     * @param {ItemTransactionHistoryCreateArgs} args - Arguments to create a ItemTransactionHistory.
     * @example
     * // Create one ItemTransactionHistory
     * const ItemTransactionHistory = await prisma.itemTransactionHistory.create({
     *   data: {
     *     // ... data to create a ItemTransactionHistory
     *   }
     * })
     * 
     */
    create<T extends ItemTransactionHistoryCreateArgs>(args: SelectSubset<T, ItemTransactionHistoryCreateArgs<ExtArgs>>): Prisma__ItemTransactionHistoryClient<$Result.GetResult<Prisma.$ItemTransactionHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ItemTransactionHistories.
     * @param {ItemTransactionHistoryCreateManyArgs} args - Arguments to create many ItemTransactionHistories.
     * @example
     * // Create many ItemTransactionHistories
     * const itemTransactionHistory = await prisma.itemTransactionHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ItemTransactionHistoryCreateManyArgs>(args?: SelectSubset<T, ItemTransactionHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ItemTransactionHistories and returns the data saved in the database.
     * @param {ItemTransactionHistoryCreateManyAndReturnArgs} args - Arguments to create many ItemTransactionHistories.
     * @example
     * // Create many ItemTransactionHistories
     * const itemTransactionHistory = await prisma.itemTransactionHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ItemTransactionHistories and only return the `id`
     * const itemTransactionHistoryWithIdOnly = await prisma.itemTransactionHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ItemTransactionHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ItemTransactionHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemTransactionHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ItemTransactionHistory.
     * @param {ItemTransactionHistoryDeleteArgs} args - Arguments to delete one ItemTransactionHistory.
     * @example
     * // Delete one ItemTransactionHistory
     * const ItemTransactionHistory = await prisma.itemTransactionHistory.delete({
     *   where: {
     *     // ... filter to delete one ItemTransactionHistory
     *   }
     * })
     * 
     */
    delete<T extends ItemTransactionHistoryDeleteArgs>(args: SelectSubset<T, ItemTransactionHistoryDeleteArgs<ExtArgs>>): Prisma__ItemTransactionHistoryClient<$Result.GetResult<Prisma.$ItemTransactionHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ItemTransactionHistory.
     * @param {ItemTransactionHistoryUpdateArgs} args - Arguments to update one ItemTransactionHistory.
     * @example
     * // Update one ItemTransactionHistory
     * const itemTransactionHistory = await prisma.itemTransactionHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ItemTransactionHistoryUpdateArgs>(args: SelectSubset<T, ItemTransactionHistoryUpdateArgs<ExtArgs>>): Prisma__ItemTransactionHistoryClient<$Result.GetResult<Prisma.$ItemTransactionHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ItemTransactionHistories.
     * @param {ItemTransactionHistoryDeleteManyArgs} args - Arguments to filter ItemTransactionHistories to delete.
     * @example
     * // Delete a few ItemTransactionHistories
     * const { count } = await prisma.itemTransactionHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ItemTransactionHistoryDeleteManyArgs>(args?: SelectSubset<T, ItemTransactionHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ItemTransactionHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemTransactionHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ItemTransactionHistories
     * const itemTransactionHistory = await prisma.itemTransactionHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ItemTransactionHistoryUpdateManyArgs>(args: SelectSubset<T, ItemTransactionHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ItemTransactionHistories and returns the data updated in the database.
     * @param {ItemTransactionHistoryUpdateManyAndReturnArgs} args - Arguments to update many ItemTransactionHistories.
     * @example
     * // Update many ItemTransactionHistories
     * const itemTransactionHistory = await prisma.itemTransactionHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ItemTransactionHistories and only return the `id`
     * const itemTransactionHistoryWithIdOnly = await prisma.itemTransactionHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ItemTransactionHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, ItemTransactionHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemTransactionHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ItemTransactionHistory.
     * @param {ItemTransactionHistoryUpsertArgs} args - Arguments to update or create a ItemTransactionHistory.
     * @example
     * // Update or create a ItemTransactionHistory
     * const itemTransactionHistory = await prisma.itemTransactionHistory.upsert({
     *   create: {
     *     // ... data to create a ItemTransactionHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ItemTransactionHistory we want to update
     *   }
     * })
     */
    upsert<T extends ItemTransactionHistoryUpsertArgs>(args: SelectSubset<T, ItemTransactionHistoryUpsertArgs<ExtArgs>>): Prisma__ItemTransactionHistoryClient<$Result.GetResult<Prisma.$ItemTransactionHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ItemTransactionHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemTransactionHistoryCountArgs} args - Arguments to filter ItemTransactionHistories to count.
     * @example
     * // Count the number of ItemTransactionHistories
     * const count = await prisma.itemTransactionHistory.count({
     *   where: {
     *     // ... the filter for the ItemTransactionHistories we want to count
     *   }
     * })
    **/
    count<T extends ItemTransactionHistoryCountArgs>(
      args?: Subset<T, ItemTransactionHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemTransactionHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ItemTransactionHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemTransactionHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemTransactionHistoryAggregateArgs>(args: Subset<T, ItemTransactionHistoryAggregateArgs>): Prisma.PrismaPromise<GetItemTransactionHistoryAggregateType<T>>

    /**
     * Group by ItemTransactionHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemTransactionHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemTransactionHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemTransactionHistoryGroupByArgs['orderBy'] }
        : { orderBy?: ItemTransactionHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemTransactionHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemTransactionHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ItemTransactionHistory model
   */
  readonly fields: ItemTransactionHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ItemTransactionHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemTransactionHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    campaign<T extends CampaignDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CampaignDefaultArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    item<T extends ItemsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemsDefaultArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    inventory<T extends InventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDefaultArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ItemTransactionHistory model
   */
  interface ItemTransactionHistoryFieldRefs {
    readonly id: FieldRef<"ItemTransactionHistory", 'BigInt'>
    readonly campaignId: FieldRef<"ItemTransactionHistory", 'BigInt'>
    readonly itemId: FieldRef<"ItemTransactionHistory", 'BigInt'>
    readonly inventoryId: FieldRef<"ItemTransactionHistory", 'BigInt'>
    readonly fromInventoryId: FieldRef<"ItemTransactionHistory", 'BigInt'>
    readonly transactionType: FieldRef<"ItemTransactionHistory", 'String'>
    readonly amount: FieldRef<"ItemTransactionHistory", 'String'>
    readonly createdAt: FieldRef<"ItemTransactionHistory", 'DateTime'>
    readonly updatedAt: FieldRef<"ItemTransactionHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ItemTransactionHistory findUnique
   */
  export type ItemTransactionHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemTransactionHistory
     */
    select?: ItemTransactionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemTransactionHistory
     */
    omit?: ItemTransactionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemTransactionHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ItemTransactionHistory to fetch.
     */
    where: ItemTransactionHistoryWhereUniqueInput
  }

  /**
   * ItemTransactionHistory findUniqueOrThrow
   */
  export type ItemTransactionHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemTransactionHistory
     */
    select?: ItemTransactionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemTransactionHistory
     */
    omit?: ItemTransactionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemTransactionHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ItemTransactionHistory to fetch.
     */
    where: ItemTransactionHistoryWhereUniqueInput
  }

  /**
   * ItemTransactionHistory findFirst
   */
  export type ItemTransactionHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemTransactionHistory
     */
    select?: ItemTransactionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemTransactionHistory
     */
    omit?: ItemTransactionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemTransactionHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ItemTransactionHistory to fetch.
     */
    where?: ItemTransactionHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemTransactionHistories to fetch.
     */
    orderBy?: ItemTransactionHistoryOrderByWithRelationInput | ItemTransactionHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ItemTransactionHistories.
     */
    cursor?: ItemTransactionHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemTransactionHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemTransactionHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ItemTransactionHistories.
     */
    distinct?: ItemTransactionHistoryScalarFieldEnum | ItemTransactionHistoryScalarFieldEnum[]
  }

  /**
   * ItemTransactionHistory findFirstOrThrow
   */
  export type ItemTransactionHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemTransactionHistory
     */
    select?: ItemTransactionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemTransactionHistory
     */
    omit?: ItemTransactionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemTransactionHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ItemTransactionHistory to fetch.
     */
    where?: ItemTransactionHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemTransactionHistories to fetch.
     */
    orderBy?: ItemTransactionHistoryOrderByWithRelationInput | ItemTransactionHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ItemTransactionHistories.
     */
    cursor?: ItemTransactionHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemTransactionHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemTransactionHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ItemTransactionHistories.
     */
    distinct?: ItemTransactionHistoryScalarFieldEnum | ItemTransactionHistoryScalarFieldEnum[]
  }

  /**
   * ItemTransactionHistory findMany
   */
  export type ItemTransactionHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemTransactionHistory
     */
    select?: ItemTransactionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemTransactionHistory
     */
    omit?: ItemTransactionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemTransactionHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ItemTransactionHistories to fetch.
     */
    where?: ItemTransactionHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemTransactionHistories to fetch.
     */
    orderBy?: ItemTransactionHistoryOrderByWithRelationInput | ItemTransactionHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ItemTransactionHistories.
     */
    cursor?: ItemTransactionHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemTransactionHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemTransactionHistories.
     */
    skip?: number
    distinct?: ItemTransactionHistoryScalarFieldEnum | ItemTransactionHistoryScalarFieldEnum[]
  }

  /**
   * ItemTransactionHistory create
   */
  export type ItemTransactionHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemTransactionHistory
     */
    select?: ItemTransactionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemTransactionHistory
     */
    omit?: ItemTransactionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemTransactionHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ItemTransactionHistory.
     */
    data: XOR<ItemTransactionHistoryCreateInput, ItemTransactionHistoryUncheckedCreateInput>
  }

  /**
   * ItemTransactionHistory createMany
   */
  export type ItemTransactionHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ItemTransactionHistories.
     */
    data: ItemTransactionHistoryCreateManyInput | ItemTransactionHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ItemTransactionHistory createManyAndReturn
   */
  export type ItemTransactionHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemTransactionHistory
     */
    select?: ItemTransactionHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ItemTransactionHistory
     */
    omit?: ItemTransactionHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many ItemTransactionHistories.
     */
    data: ItemTransactionHistoryCreateManyInput | ItemTransactionHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemTransactionHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ItemTransactionHistory update
   */
  export type ItemTransactionHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemTransactionHistory
     */
    select?: ItemTransactionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemTransactionHistory
     */
    omit?: ItemTransactionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemTransactionHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ItemTransactionHistory.
     */
    data: XOR<ItemTransactionHistoryUpdateInput, ItemTransactionHistoryUncheckedUpdateInput>
    /**
     * Choose, which ItemTransactionHistory to update.
     */
    where: ItemTransactionHistoryWhereUniqueInput
  }

  /**
   * ItemTransactionHistory updateMany
   */
  export type ItemTransactionHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ItemTransactionHistories.
     */
    data: XOR<ItemTransactionHistoryUpdateManyMutationInput, ItemTransactionHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ItemTransactionHistories to update
     */
    where?: ItemTransactionHistoryWhereInput
    /**
     * Limit how many ItemTransactionHistories to update.
     */
    limit?: number
  }

  /**
   * ItemTransactionHistory updateManyAndReturn
   */
  export type ItemTransactionHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemTransactionHistory
     */
    select?: ItemTransactionHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ItemTransactionHistory
     */
    omit?: ItemTransactionHistoryOmit<ExtArgs> | null
    /**
     * The data used to update ItemTransactionHistories.
     */
    data: XOR<ItemTransactionHistoryUpdateManyMutationInput, ItemTransactionHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ItemTransactionHistories to update
     */
    where?: ItemTransactionHistoryWhereInput
    /**
     * Limit how many ItemTransactionHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemTransactionHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ItemTransactionHistory upsert
   */
  export type ItemTransactionHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemTransactionHistory
     */
    select?: ItemTransactionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemTransactionHistory
     */
    omit?: ItemTransactionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemTransactionHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ItemTransactionHistory to update in case it exists.
     */
    where: ItemTransactionHistoryWhereUniqueInput
    /**
     * In case the ItemTransactionHistory found by the `where` argument doesn't exist, create a new ItemTransactionHistory with this data.
     */
    create: XOR<ItemTransactionHistoryCreateInput, ItemTransactionHistoryUncheckedCreateInput>
    /**
     * In case the ItemTransactionHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemTransactionHistoryUpdateInput, ItemTransactionHistoryUncheckedUpdateInput>
  }

  /**
   * ItemTransactionHistory delete
   */
  export type ItemTransactionHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemTransactionHistory
     */
    select?: ItemTransactionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemTransactionHistory
     */
    omit?: ItemTransactionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemTransactionHistoryInclude<ExtArgs> | null
    /**
     * Filter which ItemTransactionHistory to delete.
     */
    where: ItemTransactionHistoryWhereUniqueInput
  }

  /**
   * ItemTransactionHistory deleteMany
   */
  export type ItemTransactionHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ItemTransactionHistories to delete
     */
    where?: ItemTransactionHistoryWhereInput
    /**
     * Limit how many ItemTransactionHistories to delete.
     */
    limit?: number
  }

  /**
   * ItemTransactionHistory without action
   */
  export type ItemTransactionHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemTransactionHistory
     */
    select?: ItemTransactionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemTransactionHistory
     */
    omit?: ItemTransactionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemTransactionHistoryInclude<ExtArgs> | null
  }


  /**
   * Model EquippedItem
   */

  export type AggregateEquippedItem = {
    _count: EquippedItemCountAggregateOutputType | null
    _avg: EquippedItemAvgAggregateOutputType | null
    _sum: EquippedItemSumAggregateOutputType | null
    _min: EquippedItemMinAggregateOutputType | null
    _max: EquippedItemMaxAggregateOutputType | null
  }

  export type EquippedItemAvgAggregateOutputType = {
    id: number | null
    characterId: number | null
    inventoryItemId: number | null
  }

  export type EquippedItemSumAggregateOutputType = {
    id: bigint | null
    characterId: bigint | null
    inventoryItemId: bigint | null
  }

  export type EquippedItemMinAggregateOutputType = {
    id: bigint | null
    characterId: bigint | null
    inventoryItemId: bigint | null
    slot: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EquippedItemMaxAggregateOutputType = {
    id: bigint | null
    characterId: bigint | null
    inventoryItemId: bigint | null
    slot: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EquippedItemCountAggregateOutputType = {
    id: number
    characterId: number
    inventoryItemId: number
    slot: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EquippedItemAvgAggregateInputType = {
    id?: true
    characterId?: true
    inventoryItemId?: true
  }

  export type EquippedItemSumAggregateInputType = {
    id?: true
    characterId?: true
    inventoryItemId?: true
  }

  export type EquippedItemMinAggregateInputType = {
    id?: true
    characterId?: true
    inventoryItemId?: true
    slot?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EquippedItemMaxAggregateInputType = {
    id?: true
    characterId?: true
    inventoryItemId?: true
    slot?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EquippedItemCountAggregateInputType = {
    id?: true
    characterId?: true
    inventoryItemId?: true
    slot?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EquippedItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EquippedItem to aggregate.
     */
    where?: EquippedItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquippedItems to fetch.
     */
    orderBy?: EquippedItemOrderByWithRelationInput | EquippedItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EquippedItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquippedItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquippedItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EquippedItems
    **/
    _count?: true | EquippedItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EquippedItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EquippedItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EquippedItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EquippedItemMaxAggregateInputType
  }

  export type GetEquippedItemAggregateType<T extends EquippedItemAggregateArgs> = {
        [P in keyof T & keyof AggregateEquippedItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEquippedItem[P]>
      : GetScalarType<T[P], AggregateEquippedItem[P]>
  }




  export type EquippedItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EquippedItemWhereInput
    orderBy?: EquippedItemOrderByWithAggregationInput | EquippedItemOrderByWithAggregationInput[]
    by: EquippedItemScalarFieldEnum[] | EquippedItemScalarFieldEnum
    having?: EquippedItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EquippedItemCountAggregateInputType | true
    _avg?: EquippedItemAvgAggregateInputType
    _sum?: EquippedItemSumAggregateInputType
    _min?: EquippedItemMinAggregateInputType
    _max?: EquippedItemMaxAggregateInputType
  }

  export type EquippedItemGroupByOutputType = {
    id: bigint
    characterId: bigint
    inventoryItemId: bigint
    slot: string
    createdAt: Date
    updatedAt: Date
    _count: EquippedItemCountAggregateOutputType | null
    _avg: EquippedItemAvgAggregateOutputType | null
    _sum: EquippedItemSumAggregateOutputType | null
    _min: EquippedItemMinAggregateOutputType | null
    _max: EquippedItemMaxAggregateOutputType | null
  }

  type GetEquippedItemGroupByPayload<T extends EquippedItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EquippedItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EquippedItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EquippedItemGroupByOutputType[P]>
            : GetScalarType<T[P], EquippedItemGroupByOutputType[P]>
        }
      >
    >


  export type EquippedItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    characterId?: boolean
    inventoryItemId?: boolean
    slot?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    inventoryItem?: boolean | InventoryItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["equippedItem"]>

  export type EquippedItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    characterId?: boolean
    inventoryItemId?: boolean
    slot?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    inventoryItem?: boolean | InventoryItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["equippedItem"]>

  export type EquippedItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    characterId?: boolean
    inventoryItemId?: boolean
    slot?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    inventoryItem?: boolean | InventoryItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["equippedItem"]>

  export type EquippedItemSelectScalar = {
    id?: boolean
    characterId?: boolean
    inventoryItemId?: boolean
    slot?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EquippedItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "characterId" | "inventoryItemId" | "slot" | "createdAt" | "updatedAt", ExtArgs["result"]["equippedItem"]>
  export type EquippedItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    inventoryItem?: boolean | InventoryItemDefaultArgs<ExtArgs>
  }
  export type EquippedItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    inventoryItem?: boolean | InventoryItemDefaultArgs<ExtArgs>
  }
  export type EquippedItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    inventoryItem?: boolean | InventoryItemDefaultArgs<ExtArgs>
  }

  export type $EquippedItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EquippedItem"
    objects: {
      character: Prisma.$CharacterPayload<ExtArgs>
      inventoryItem: Prisma.$InventoryItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      characterId: bigint
      inventoryItemId: bigint
      slot: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["equippedItem"]>
    composites: {}
  }

  type EquippedItemGetPayload<S extends boolean | null | undefined | EquippedItemDefaultArgs> = $Result.GetResult<Prisma.$EquippedItemPayload, S>

  type EquippedItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EquippedItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EquippedItemCountAggregateInputType | true
    }

  export interface EquippedItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EquippedItem'], meta: { name: 'EquippedItem' } }
    /**
     * Find zero or one EquippedItem that matches the filter.
     * @param {EquippedItemFindUniqueArgs} args - Arguments to find a EquippedItem
     * @example
     * // Get one EquippedItem
     * const equippedItem = await prisma.equippedItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EquippedItemFindUniqueArgs>(args: SelectSubset<T, EquippedItemFindUniqueArgs<ExtArgs>>): Prisma__EquippedItemClient<$Result.GetResult<Prisma.$EquippedItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EquippedItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EquippedItemFindUniqueOrThrowArgs} args - Arguments to find a EquippedItem
     * @example
     * // Get one EquippedItem
     * const equippedItem = await prisma.equippedItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EquippedItemFindUniqueOrThrowArgs>(args: SelectSubset<T, EquippedItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EquippedItemClient<$Result.GetResult<Prisma.$EquippedItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EquippedItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquippedItemFindFirstArgs} args - Arguments to find a EquippedItem
     * @example
     * // Get one EquippedItem
     * const equippedItem = await prisma.equippedItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EquippedItemFindFirstArgs>(args?: SelectSubset<T, EquippedItemFindFirstArgs<ExtArgs>>): Prisma__EquippedItemClient<$Result.GetResult<Prisma.$EquippedItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EquippedItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquippedItemFindFirstOrThrowArgs} args - Arguments to find a EquippedItem
     * @example
     * // Get one EquippedItem
     * const equippedItem = await prisma.equippedItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EquippedItemFindFirstOrThrowArgs>(args?: SelectSubset<T, EquippedItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__EquippedItemClient<$Result.GetResult<Prisma.$EquippedItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EquippedItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquippedItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EquippedItems
     * const equippedItems = await prisma.equippedItem.findMany()
     * 
     * // Get first 10 EquippedItems
     * const equippedItems = await prisma.equippedItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const equippedItemWithIdOnly = await prisma.equippedItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EquippedItemFindManyArgs>(args?: SelectSubset<T, EquippedItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquippedItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EquippedItem.
     * @param {EquippedItemCreateArgs} args - Arguments to create a EquippedItem.
     * @example
     * // Create one EquippedItem
     * const EquippedItem = await prisma.equippedItem.create({
     *   data: {
     *     // ... data to create a EquippedItem
     *   }
     * })
     * 
     */
    create<T extends EquippedItemCreateArgs>(args: SelectSubset<T, EquippedItemCreateArgs<ExtArgs>>): Prisma__EquippedItemClient<$Result.GetResult<Prisma.$EquippedItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EquippedItems.
     * @param {EquippedItemCreateManyArgs} args - Arguments to create many EquippedItems.
     * @example
     * // Create many EquippedItems
     * const equippedItem = await prisma.equippedItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EquippedItemCreateManyArgs>(args?: SelectSubset<T, EquippedItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EquippedItems and returns the data saved in the database.
     * @param {EquippedItemCreateManyAndReturnArgs} args - Arguments to create many EquippedItems.
     * @example
     * // Create many EquippedItems
     * const equippedItem = await prisma.equippedItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EquippedItems and only return the `id`
     * const equippedItemWithIdOnly = await prisma.equippedItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EquippedItemCreateManyAndReturnArgs>(args?: SelectSubset<T, EquippedItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquippedItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EquippedItem.
     * @param {EquippedItemDeleteArgs} args - Arguments to delete one EquippedItem.
     * @example
     * // Delete one EquippedItem
     * const EquippedItem = await prisma.equippedItem.delete({
     *   where: {
     *     // ... filter to delete one EquippedItem
     *   }
     * })
     * 
     */
    delete<T extends EquippedItemDeleteArgs>(args: SelectSubset<T, EquippedItemDeleteArgs<ExtArgs>>): Prisma__EquippedItemClient<$Result.GetResult<Prisma.$EquippedItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EquippedItem.
     * @param {EquippedItemUpdateArgs} args - Arguments to update one EquippedItem.
     * @example
     * // Update one EquippedItem
     * const equippedItem = await prisma.equippedItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EquippedItemUpdateArgs>(args: SelectSubset<T, EquippedItemUpdateArgs<ExtArgs>>): Prisma__EquippedItemClient<$Result.GetResult<Prisma.$EquippedItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EquippedItems.
     * @param {EquippedItemDeleteManyArgs} args - Arguments to filter EquippedItems to delete.
     * @example
     * // Delete a few EquippedItems
     * const { count } = await prisma.equippedItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EquippedItemDeleteManyArgs>(args?: SelectSubset<T, EquippedItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EquippedItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquippedItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EquippedItems
     * const equippedItem = await prisma.equippedItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EquippedItemUpdateManyArgs>(args: SelectSubset<T, EquippedItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EquippedItems and returns the data updated in the database.
     * @param {EquippedItemUpdateManyAndReturnArgs} args - Arguments to update many EquippedItems.
     * @example
     * // Update many EquippedItems
     * const equippedItem = await prisma.equippedItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EquippedItems and only return the `id`
     * const equippedItemWithIdOnly = await prisma.equippedItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EquippedItemUpdateManyAndReturnArgs>(args: SelectSubset<T, EquippedItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquippedItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EquippedItem.
     * @param {EquippedItemUpsertArgs} args - Arguments to update or create a EquippedItem.
     * @example
     * // Update or create a EquippedItem
     * const equippedItem = await prisma.equippedItem.upsert({
     *   create: {
     *     // ... data to create a EquippedItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EquippedItem we want to update
     *   }
     * })
     */
    upsert<T extends EquippedItemUpsertArgs>(args: SelectSubset<T, EquippedItemUpsertArgs<ExtArgs>>): Prisma__EquippedItemClient<$Result.GetResult<Prisma.$EquippedItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EquippedItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquippedItemCountArgs} args - Arguments to filter EquippedItems to count.
     * @example
     * // Count the number of EquippedItems
     * const count = await prisma.equippedItem.count({
     *   where: {
     *     // ... the filter for the EquippedItems we want to count
     *   }
     * })
    **/
    count<T extends EquippedItemCountArgs>(
      args?: Subset<T, EquippedItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EquippedItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EquippedItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquippedItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EquippedItemAggregateArgs>(args: Subset<T, EquippedItemAggregateArgs>): Prisma.PrismaPromise<GetEquippedItemAggregateType<T>>

    /**
     * Group by EquippedItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquippedItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EquippedItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EquippedItemGroupByArgs['orderBy'] }
        : { orderBy?: EquippedItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EquippedItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEquippedItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EquippedItem model
   */
  readonly fields: EquippedItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EquippedItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EquippedItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    character<T extends CharacterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CharacterDefaultArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    inventoryItem<T extends InventoryItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryItemDefaultArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EquippedItem model
   */
  interface EquippedItemFieldRefs {
    readonly id: FieldRef<"EquippedItem", 'BigInt'>
    readonly characterId: FieldRef<"EquippedItem", 'BigInt'>
    readonly inventoryItemId: FieldRef<"EquippedItem", 'BigInt'>
    readonly slot: FieldRef<"EquippedItem", 'String'>
    readonly createdAt: FieldRef<"EquippedItem", 'DateTime'>
    readonly updatedAt: FieldRef<"EquippedItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EquippedItem findUnique
   */
  export type EquippedItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedItem
     */
    select?: EquippedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedItem
     */
    omit?: EquippedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedItemInclude<ExtArgs> | null
    /**
     * Filter, which EquippedItem to fetch.
     */
    where: EquippedItemWhereUniqueInput
  }

  /**
   * EquippedItem findUniqueOrThrow
   */
  export type EquippedItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedItem
     */
    select?: EquippedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedItem
     */
    omit?: EquippedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedItemInclude<ExtArgs> | null
    /**
     * Filter, which EquippedItem to fetch.
     */
    where: EquippedItemWhereUniqueInput
  }

  /**
   * EquippedItem findFirst
   */
  export type EquippedItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedItem
     */
    select?: EquippedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedItem
     */
    omit?: EquippedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedItemInclude<ExtArgs> | null
    /**
     * Filter, which EquippedItem to fetch.
     */
    where?: EquippedItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquippedItems to fetch.
     */
    orderBy?: EquippedItemOrderByWithRelationInput | EquippedItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EquippedItems.
     */
    cursor?: EquippedItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquippedItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquippedItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EquippedItems.
     */
    distinct?: EquippedItemScalarFieldEnum | EquippedItemScalarFieldEnum[]
  }

  /**
   * EquippedItem findFirstOrThrow
   */
  export type EquippedItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedItem
     */
    select?: EquippedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedItem
     */
    omit?: EquippedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedItemInclude<ExtArgs> | null
    /**
     * Filter, which EquippedItem to fetch.
     */
    where?: EquippedItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquippedItems to fetch.
     */
    orderBy?: EquippedItemOrderByWithRelationInput | EquippedItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EquippedItems.
     */
    cursor?: EquippedItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquippedItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquippedItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EquippedItems.
     */
    distinct?: EquippedItemScalarFieldEnum | EquippedItemScalarFieldEnum[]
  }

  /**
   * EquippedItem findMany
   */
  export type EquippedItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedItem
     */
    select?: EquippedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedItem
     */
    omit?: EquippedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedItemInclude<ExtArgs> | null
    /**
     * Filter, which EquippedItems to fetch.
     */
    where?: EquippedItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquippedItems to fetch.
     */
    orderBy?: EquippedItemOrderByWithRelationInput | EquippedItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EquippedItems.
     */
    cursor?: EquippedItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquippedItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquippedItems.
     */
    skip?: number
    distinct?: EquippedItemScalarFieldEnum | EquippedItemScalarFieldEnum[]
  }

  /**
   * EquippedItem create
   */
  export type EquippedItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedItem
     */
    select?: EquippedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedItem
     */
    omit?: EquippedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedItemInclude<ExtArgs> | null
    /**
     * The data needed to create a EquippedItem.
     */
    data: XOR<EquippedItemCreateInput, EquippedItemUncheckedCreateInput>
  }

  /**
   * EquippedItem createMany
   */
  export type EquippedItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EquippedItems.
     */
    data: EquippedItemCreateManyInput | EquippedItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EquippedItem createManyAndReturn
   */
  export type EquippedItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedItem
     */
    select?: EquippedItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedItem
     */
    omit?: EquippedItemOmit<ExtArgs> | null
    /**
     * The data used to create many EquippedItems.
     */
    data: EquippedItemCreateManyInput | EquippedItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EquippedItem update
   */
  export type EquippedItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedItem
     */
    select?: EquippedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedItem
     */
    omit?: EquippedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedItemInclude<ExtArgs> | null
    /**
     * The data needed to update a EquippedItem.
     */
    data: XOR<EquippedItemUpdateInput, EquippedItemUncheckedUpdateInput>
    /**
     * Choose, which EquippedItem to update.
     */
    where: EquippedItemWhereUniqueInput
  }

  /**
   * EquippedItem updateMany
   */
  export type EquippedItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EquippedItems.
     */
    data: XOR<EquippedItemUpdateManyMutationInput, EquippedItemUncheckedUpdateManyInput>
    /**
     * Filter which EquippedItems to update
     */
    where?: EquippedItemWhereInput
    /**
     * Limit how many EquippedItems to update.
     */
    limit?: number
  }

  /**
   * EquippedItem updateManyAndReturn
   */
  export type EquippedItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedItem
     */
    select?: EquippedItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedItem
     */
    omit?: EquippedItemOmit<ExtArgs> | null
    /**
     * The data used to update EquippedItems.
     */
    data: XOR<EquippedItemUpdateManyMutationInput, EquippedItemUncheckedUpdateManyInput>
    /**
     * Filter which EquippedItems to update
     */
    where?: EquippedItemWhereInput
    /**
     * Limit how many EquippedItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EquippedItem upsert
   */
  export type EquippedItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedItem
     */
    select?: EquippedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedItem
     */
    omit?: EquippedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedItemInclude<ExtArgs> | null
    /**
     * The filter to search for the EquippedItem to update in case it exists.
     */
    where: EquippedItemWhereUniqueInput
    /**
     * In case the EquippedItem found by the `where` argument doesn't exist, create a new EquippedItem with this data.
     */
    create: XOR<EquippedItemCreateInput, EquippedItemUncheckedCreateInput>
    /**
     * In case the EquippedItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EquippedItemUpdateInput, EquippedItemUncheckedUpdateInput>
  }

  /**
   * EquippedItem delete
   */
  export type EquippedItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedItem
     */
    select?: EquippedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedItem
     */
    omit?: EquippedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedItemInclude<ExtArgs> | null
    /**
     * Filter which EquippedItem to delete.
     */
    where: EquippedItemWhereUniqueInput
  }

  /**
   * EquippedItem deleteMany
   */
  export type EquippedItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EquippedItems to delete
     */
    where?: EquippedItemWhereInput
    /**
     * Limit how many EquippedItems to delete.
     */
    limit?: number
  }

  /**
   * EquippedItem without action
   */
  export type EquippedItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedItem
     */
    select?: EquippedItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedItem
     */
    omit?: EquippedItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedItemInclude<ExtArgs> | null
  }


  /**
   * Model Spells
   */

  export type AggregateSpells = {
    _count: SpellsCountAggregateOutputType | null
    _avg: SpellsAvgAggregateOutputType | null
    _sum: SpellsSumAggregateOutputType | null
    _min: SpellsMinAggregateOutputType | null
    _max: SpellsMaxAggregateOutputType | null
  }

  export type SpellsAvgAggregateOutputType = {
    id: number | null
    campaignId: number | null
  }

  export type SpellsSumAggregateOutputType = {
    id: bigint | null
    campaignId: bigint | null
  }

  export type SpellsMinAggregateOutputType = {
    id: bigint | null
    campaignId: bigint | null
    name: string | null
    type: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SpellsMaxAggregateOutputType = {
    id: bigint | null
    campaignId: bigint | null
    name: string | null
    type: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SpellsCountAggregateOutputType = {
    id: number
    campaignId: number
    name: number
    type: number
    description: number
    specifications: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SpellsAvgAggregateInputType = {
    id?: true
    campaignId?: true
  }

  export type SpellsSumAggregateInputType = {
    id?: true
    campaignId?: true
  }

  export type SpellsMinAggregateInputType = {
    id?: true
    campaignId?: true
    name?: true
    type?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SpellsMaxAggregateInputType = {
    id?: true
    campaignId?: true
    name?: true
    type?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SpellsCountAggregateInputType = {
    id?: true
    campaignId?: true
    name?: true
    type?: true
    description?: true
    specifications?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SpellsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Spells to aggregate.
     */
    where?: SpellsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spells to fetch.
     */
    orderBy?: SpellsOrderByWithRelationInput | SpellsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpellsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Spells
    **/
    _count?: true | SpellsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SpellsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SpellsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpellsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpellsMaxAggregateInputType
  }

  export type GetSpellsAggregateType<T extends SpellsAggregateArgs> = {
        [P in keyof T & keyof AggregateSpells]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpells[P]>
      : GetScalarType<T[P], AggregateSpells[P]>
  }




  export type SpellsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpellsWhereInput
    orderBy?: SpellsOrderByWithAggregationInput | SpellsOrderByWithAggregationInput[]
    by: SpellsScalarFieldEnum[] | SpellsScalarFieldEnum
    having?: SpellsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpellsCountAggregateInputType | true
    _avg?: SpellsAvgAggregateInputType
    _sum?: SpellsSumAggregateInputType
    _min?: SpellsMinAggregateInputType
    _max?: SpellsMaxAggregateInputType
  }

  export type SpellsGroupByOutputType = {
    id: bigint
    campaignId: bigint
    name: string
    type: string
    description: string | null
    specifications: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: SpellsCountAggregateOutputType | null
    _avg: SpellsAvgAggregateOutputType | null
    _sum: SpellsSumAggregateOutputType | null
    _min: SpellsMinAggregateOutputType | null
    _max: SpellsMaxAggregateOutputType | null
  }

  type GetSpellsGroupByPayload<T extends SpellsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpellsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpellsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpellsGroupByOutputType[P]>
            : GetScalarType<T[P], SpellsGroupByOutputType[P]>
        }
      >
    >


  export type SpellsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    name?: boolean
    type?: boolean
    description?: boolean
    specifications?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    equippedSpells?: boolean | Spells$equippedSpellsArgs<ExtArgs>
    _count?: boolean | SpellsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spells"]>

  export type SpellsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    name?: boolean
    type?: boolean
    description?: boolean
    specifications?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spells"]>

  export type SpellsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    name?: boolean
    type?: boolean
    description?: boolean
    specifications?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spells"]>

  export type SpellsSelectScalar = {
    id?: boolean
    campaignId?: boolean
    name?: boolean
    type?: boolean
    description?: boolean
    specifications?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SpellsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "campaignId" | "name" | "type" | "description" | "specifications" | "createdAt" | "updatedAt", ExtArgs["result"]["spells"]>
  export type SpellsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    equippedSpells?: boolean | Spells$equippedSpellsArgs<ExtArgs>
    _count?: boolean | SpellsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SpellsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }
  export type SpellsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }

  export type $SpellsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Spells"
    objects: {
      campaign: Prisma.$CampaignPayload<ExtArgs>
      equippedSpells: Prisma.$EquippedSpellPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      campaignId: bigint
      name: string
      type: string
      description: string | null
      specifications: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["spells"]>
    composites: {}
  }

  type SpellsGetPayload<S extends boolean | null | undefined | SpellsDefaultArgs> = $Result.GetResult<Prisma.$SpellsPayload, S>

  type SpellsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SpellsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SpellsCountAggregateInputType | true
    }

  export interface SpellsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Spells'], meta: { name: 'Spells' } }
    /**
     * Find zero or one Spells that matches the filter.
     * @param {SpellsFindUniqueArgs} args - Arguments to find a Spells
     * @example
     * // Get one Spells
     * const spells = await prisma.spells.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SpellsFindUniqueArgs>(args: SelectSubset<T, SpellsFindUniqueArgs<ExtArgs>>): Prisma__SpellsClient<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Spells that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SpellsFindUniqueOrThrowArgs} args - Arguments to find a Spells
     * @example
     * // Get one Spells
     * const spells = await prisma.spells.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SpellsFindUniqueOrThrowArgs>(args: SelectSubset<T, SpellsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SpellsClient<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Spells that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellsFindFirstArgs} args - Arguments to find a Spells
     * @example
     * // Get one Spells
     * const spells = await prisma.spells.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SpellsFindFirstArgs>(args?: SelectSubset<T, SpellsFindFirstArgs<ExtArgs>>): Prisma__SpellsClient<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Spells that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellsFindFirstOrThrowArgs} args - Arguments to find a Spells
     * @example
     * // Get one Spells
     * const spells = await prisma.spells.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SpellsFindFirstOrThrowArgs>(args?: SelectSubset<T, SpellsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SpellsClient<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Spells that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Spells
     * const spells = await prisma.spells.findMany()
     * 
     * // Get first 10 Spells
     * const spells = await prisma.spells.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const spellsWithIdOnly = await prisma.spells.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SpellsFindManyArgs>(args?: SelectSubset<T, SpellsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Spells.
     * @param {SpellsCreateArgs} args - Arguments to create a Spells.
     * @example
     * // Create one Spells
     * const Spells = await prisma.spells.create({
     *   data: {
     *     // ... data to create a Spells
     *   }
     * })
     * 
     */
    create<T extends SpellsCreateArgs>(args: SelectSubset<T, SpellsCreateArgs<ExtArgs>>): Prisma__SpellsClient<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Spells.
     * @param {SpellsCreateManyArgs} args - Arguments to create many Spells.
     * @example
     * // Create many Spells
     * const spells = await prisma.spells.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SpellsCreateManyArgs>(args?: SelectSubset<T, SpellsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Spells and returns the data saved in the database.
     * @param {SpellsCreateManyAndReturnArgs} args - Arguments to create many Spells.
     * @example
     * // Create many Spells
     * const spells = await prisma.spells.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Spells and only return the `id`
     * const spellsWithIdOnly = await prisma.spells.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SpellsCreateManyAndReturnArgs>(args?: SelectSubset<T, SpellsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Spells.
     * @param {SpellsDeleteArgs} args - Arguments to delete one Spells.
     * @example
     * // Delete one Spells
     * const Spells = await prisma.spells.delete({
     *   where: {
     *     // ... filter to delete one Spells
     *   }
     * })
     * 
     */
    delete<T extends SpellsDeleteArgs>(args: SelectSubset<T, SpellsDeleteArgs<ExtArgs>>): Prisma__SpellsClient<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Spells.
     * @param {SpellsUpdateArgs} args - Arguments to update one Spells.
     * @example
     * // Update one Spells
     * const spells = await prisma.spells.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SpellsUpdateArgs>(args: SelectSubset<T, SpellsUpdateArgs<ExtArgs>>): Prisma__SpellsClient<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Spells.
     * @param {SpellsDeleteManyArgs} args - Arguments to filter Spells to delete.
     * @example
     * // Delete a few Spells
     * const { count } = await prisma.spells.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SpellsDeleteManyArgs>(args?: SelectSubset<T, SpellsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Spells.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Spells
     * const spells = await prisma.spells.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SpellsUpdateManyArgs>(args: SelectSubset<T, SpellsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Spells and returns the data updated in the database.
     * @param {SpellsUpdateManyAndReturnArgs} args - Arguments to update many Spells.
     * @example
     * // Update many Spells
     * const spells = await prisma.spells.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Spells and only return the `id`
     * const spellsWithIdOnly = await prisma.spells.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SpellsUpdateManyAndReturnArgs>(args: SelectSubset<T, SpellsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Spells.
     * @param {SpellsUpsertArgs} args - Arguments to update or create a Spells.
     * @example
     * // Update or create a Spells
     * const spells = await prisma.spells.upsert({
     *   create: {
     *     // ... data to create a Spells
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Spells we want to update
     *   }
     * })
     */
    upsert<T extends SpellsUpsertArgs>(args: SelectSubset<T, SpellsUpsertArgs<ExtArgs>>): Prisma__SpellsClient<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Spells.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellsCountArgs} args - Arguments to filter Spells to count.
     * @example
     * // Count the number of Spells
     * const count = await prisma.spells.count({
     *   where: {
     *     // ... the filter for the Spells we want to count
     *   }
     * })
    **/
    count<T extends SpellsCountArgs>(
      args?: Subset<T, SpellsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpellsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Spells.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpellsAggregateArgs>(args: Subset<T, SpellsAggregateArgs>): Prisma.PrismaPromise<GetSpellsAggregateType<T>>

    /**
     * Group by Spells.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpellsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpellsGroupByArgs['orderBy'] }
        : { orderBy?: SpellsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpellsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpellsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Spells model
   */
  readonly fields: SpellsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Spells.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpellsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    campaign<T extends CampaignDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CampaignDefaultArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    equippedSpells<T extends Spells$equippedSpellsArgs<ExtArgs> = {}>(args?: Subset<T, Spells$equippedSpellsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquippedSpellPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Spells model
   */
  interface SpellsFieldRefs {
    readonly id: FieldRef<"Spells", 'BigInt'>
    readonly campaignId: FieldRef<"Spells", 'BigInt'>
    readonly name: FieldRef<"Spells", 'String'>
    readonly type: FieldRef<"Spells", 'String'>
    readonly description: FieldRef<"Spells", 'String'>
    readonly specifications: FieldRef<"Spells", 'Json'>
    readonly createdAt: FieldRef<"Spells", 'DateTime'>
    readonly updatedAt: FieldRef<"Spells", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Spells findUnique
   */
  export type SpellsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spells
     */
    omit?: SpellsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellsInclude<ExtArgs> | null
    /**
     * Filter, which Spells to fetch.
     */
    where: SpellsWhereUniqueInput
  }

  /**
   * Spells findUniqueOrThrow
   */
  export type SpellsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spells
     */
    omit?: SpellsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellsInclude<ExtArgs> | null
    /**
     * Filter, which Spells to fetch.
     */
    where: SpellsWhereUniqueInput
  }

  /**
   * Spells findFirst
   */
  export type SpellsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spells
     */
    omit?: SpellsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellsInclude<ExtArgs> | null
    /**
     * Filter, which Spells to fetch.
     */
    where?: SpellsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spells to fetch.
     */
    orderBy?: SpellsOrderByWithRelationInput | SpellsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Spells.
     */
    cursor?: SpellsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Spells.
     */
    distinct?: SpellsScalarFieldEnum | SpellsScalarFieldEnum[]
  }

  /**
   * Spells findFirstOrThrow
   */
  export type SpellsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spells
     */
    omit?: SpellsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellsInclude<ExtArgs> | null
    /**
     * Filter, which Spells to fetch.
     */
    where?: SpellsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spells to fetch.
     */
    orderBy?: SpellsOrderByWithRelationInput | SpellsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Spells.
     */
    cursor?: SpellsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Spells.
     */
    distinct?: SpellsScalarFieldEnum | SpellsScalarFieldEnum[]
  }

  /**
   * Spells findMany
   */
  export type SpellsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spells
     */
    omit?: SpellsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellsInclude<ExtArgs> | null
    /**
     * Filter, which Spells to fetch.
     */
    where?: SpellsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spells to fetch.
     */
    orderBy?: SpellsOrderByWithRelationInput | SpellsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Spells.
     */
    cursor?: SpellsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spells.
     */
    skip?: number
    distinct?: SpellsScalarFieldEnum | SpellsScalarFieldEnum[]
  }

  /**
   * Spells create
   */
  export type SpellsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spells
     */
    omit?: SpellsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellsInclude<ExtArgs> | null
    /**
     * The data needed to create a Spells.
     */
    data: XOR<SpellsCreateInput, SpellsUncheckedCreateInput>
  }

  /**
   * Spells createMany
   */
  export type SpellsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Spells.
     */
    data: SpellsCreateManyInput | SpellsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Spells createManyAndReturn
   */
  export type SpellsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Spells
     */
    omit?: SpellsOmit<ExtArgs> | null
    /**
     * The data used to create many Spells.
     */
    data: SpellsCreateManyInput | SpellsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Spells update
   */
  export type SpellsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spells
     */
    omit?: SpellsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellsInclude<ExtArgs> | null
    /**
     * The data needed to update a Spells.
     */
    data: XOR<SpellsUpdateInput, SpellsUncheckedUpdateInput>
    /**
     * Choose, which Spells to update.
     */
    where: SpellsWhereUniqueInput
  }

  /**
   * Spells updateMany
   */
  export type SpellsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Spells.
     */
    data: XOR<SpellsUpdateManyMutationInput, SpellsUncheckedUpdateManyInput>
    /**
     * Filter which Spells to update
     */
    where?: SpellsWhereInput
    /**
     * Limit how many Spells to update.
     */
    limit?: number
  }

  /**
   * Spells updateManyAndReturn
   */
  export type SpellsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Spells
     */
    omit?: SpellsOmit<ExtArgs> | null
    /**
     * The data used to update Spells.
     */
    data: XOR<SpellsUpdateManyMutationInput, SpellsUncheckedUpdateManyInput>
    /**
     * Filter which Spells to update
     */
    where?: SpellsWhereInput
    /**
     * Limit how many Spells to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Spells upsert
   */
  export type SpellsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spells
     */
    omit?: SpellsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellsInclude<ExtArgs> | null
    /**
     * The filter to search for the Spells to update in case it exists.
     */
    where: SpellsWhereUniqueInput
    /**
     * In case the Spells found by the `where` argument doesn't exist, create a new Spells with this data.
     */
    create: XOR<SpellsCreateInput, SpellsUncheckedCreateInput>
    /**
     * In case the Spells was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpellsUpdateInput, SpellsUncheckedUpdateInput>
  }

  /**
   * Spells delete
   */
  export type SpellsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spells
     */
    omit?: SpellsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellsInclude<ExtArgs> | null
    /**
     * Filter which Spells to delete.
     */
    where: SpellsWhereUniqueInput
  }

  /**
   * Spells deleteMany
   */
  export type SpellsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Spells to delete
     */
    where?: SpellsWhereInput
    /**
     * Limit how many Spells to delete.
     */
    limit?: number
  }

  /**
   * Spells.equippedSpells
   */
  export type Spells$equippedSpellsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedSpell
     */
    select?: EquippedSpellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedSpell
     */
    omit?: EquippedSpellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedSpellInclude<ExtArgs> | null
    where?: EquippedSpellWhereInput
    orderBy?: EquippedSpellOrderByWithRelationInput | EquippedSpellOrderByWithRelationInput[]
    cursor?: EquippedSpellWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EquippedSpellScalarFieldEnum | EquippedSpellScalarFieldEnum[]
  }

  /**
   * Spells without action
   */
  export type SpellsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spells
     */
    omit?: SpellsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellsInclude<ExtArgs> | null
  }


  /**
   * Model EquippedSpell
   */

  export type AggregateEquippedSpell = {
    _count: EquippedSpellCountAggregateOutputType | null
    _avg: EquippedSpellAvgAggregateOutputType | null
    _sum: EquippedSpellSumAggregateOutputType | null
    _min: EquippedSpellMinAggregateOutputType | null
    _max: EquippedSpellMaxAggregateOutputType | null
  }

  export type EquippedSpellAvgAggregateOutputType = {
    id: number | null
    characterId: number | null
    spellId: number | null
  }

  export type EquippedSpellSumAggregateOutputType = {
    id: bigint | null
    characterId: bigint | null
    spellId: bigint | null
  }

  export type EquippedSpellMinAggregateOutputType = {
    id: bigint | null
    characterId: bigint | null
    spellId: bigint | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EquippedSpellMaxAggregateOutputType = {
    id: bigint | null
    characterId: bigint | null
    spellId: bigint | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EquippedSpellCountAggregateOutputType = {
    id: number
    characterId: number
    spellId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EquippedSpellAvgAggregateInputType = {
    id?: true
    characterId?: true
    spellId?: true
  }

  export type EquippedSpellSumAggregateInputType = {
    id?: true
    characterId?: true
    spellId?: true
  }

  export type EquippedSpellMinAggregateInputType = {
    id?: true
    characterId?: true
    spellId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EquippedSpellMaxAggregateInputType = {
    id?: true
    characterId?: true
    spellId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EquippedSpellCountAggregateInputType = {
    id?: true
    characterId?: true
    spellId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EquippedSpellAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EquippedSpell to aggregate.
     */
    where?: EquippedSpellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquippedSpells to fetch.
     */
    orderBy?: EquippedSpellOrderByWithRelationInput | EquippedSpellOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EquippedSpellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquippedSpells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquippedSpells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EquippedSpells
    **/
    _count?: true | EquippedSpellCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EquippedSpellAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EquippedSpellSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EquippedSpellMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EquippedSpellMaxAggregateInputType
  }

  export type GetEquippedSpellAggregateType<T extends EquippedSpellAggregateArgs> = {
        [P in keyof T & keyof AggregateEquippedSpell]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEquippedSpell[P]>
      : GetScalarType<T[P], AggregateEquippedSpell[P]>
  }




  export type EquippedSpellGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EquippedSpellWhereInput
    orderBy?: EquippedSpellOrderByWithAggregationInput | EquippedSpellOrderByWithAggregationInput[]
    by: EquippedSpellScalarFieldEnum[] | EquippedSpellScalarFieldEnum
    having?: EquippedSpellScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EquippedSpellCountAggregateInputType | true
    _avg?: EquippedSpellAvgAggregateInputType
    _sum?: EquippedSpellSumAggregateInputType
    _min?: EquippedSpellMinAggregateInputType
    _max?: EquippedSpellMaxAggregateInputType
  }

  export type EquippedSpellGroupByOutputType = {
    id: bigint
    characterId: bigint
    spellId: bigint
    createdAt: Date
    updatedAt: Date
    _count: EquippedSpellCountAggregateOutputType | null
    _avg: EquippedSpellAvgAggregateOutputType | null
    _sum: EquippedSpellSumAggregateOutputType | null
    _min: EquippedSpellMinAggregateOutputType | null
    _max: EquippedSpellMaxAggregateOutputType | null
  }

  type GetEquippedSpellGroupByPayload<T extends EquippedSpellGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EquippedSpellGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EquippedSpellGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EquippedSpellGroupByOutputType[P]>
            : GetScalarType<T[P], EquippedSpellGroupByOutputType[P]>
        }
      >
    >


  export type EquippedSpellSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    characterId?: boolean
    spellId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    spell?: boolean | SpellsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["equippedSpell"]>

  export type EquippedSpellSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    characterId?: boolean
    spellId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    spell?: boolean | SpellsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["equippedSpell"]>

  export type EquippedSpellSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    characterId?: boolean
    spellId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    spell?: boolean | SpellsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["equippedSpell"]>

  export type EquippedSpellSelectScalar = {
    id?: boolean
    characterId?: boolean
    spellId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EquippedSpellOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "characterId" | "spellId" | "createdAt" | "updatedAt", ExtArgs["result"]["equippedSpell"]>
  export type EquippedSpellInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    spell?: boolean | SpellsDefaultArgs<ExtArgs>
  }
  export type EquippedSpellIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    spell?: boolean | SpellsDefaultArgs<ExtArgs>
  }
  export type EquippedSpellIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    spell?: boolean | SpellsDefaultArgs<ExtArgs>
  }

  export type $EquippedSpellPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EquippedSpell"
    objects: {
      character: Prisma.$CharacterPayload<ExtArgs>
      spell: Prisma.$SpellsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      characterId: bigint
      spellId: bigint
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["equippedSpell"]>
    composites: {}
  }

  type EquippedSpellGetPayload<S extends boolean | null | undefined | EquippedSpellDefaultArgs> = $Result.GetResult<Prisma.$EquippedSpellPayload, S>

  type EquippedSpellCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EquippedSpellFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EquippedSpellCountAggregateInputType | true
    }

  export interface EquippedSpellDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EquippedSpell'], meta: { name: 'EquippedSpell' } }
    /**
     * Find zero or one EquippedSpell that matches the filter.
     * @param {EquippedSpellFindUniqueArgs} args - Arguments to find a EquippedSpell
     * @example
     * // Get one EquippedSpell
     * const equippedSpell = await prisma.equippedSpell.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EquippedSpellFindUniqueArgs>(args: SelectSubset<T, EquippedSpellFindUniqueArgs<ExtArgs>>): Prisma__EquippedSpellClient<$Result.GetResult<Prisma.$EquippedSpellPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EquippedSpell that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EquippedSpellFindUniqueOrThrowArgs} args - Arguments to find a EquippedSpell
     * @example
     * // Get one EquippedSpell
     * const equippedSpell = await prisma.equippedSpell.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EquippedSpellFindUniqueOrThrowArgs>(args: SelectSubset<T, EquippedSpellFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EquippedSpellClient<$Result.GetResult<Prisma.$EquippedSpellPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EquippedSpell that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquippedSpellFindFirstArgs} args - Arguments to find a EquippedSpell
     * @example
     * // Get one EquippedSpell
     * const equippedSpell = await prisma.equippedSpell.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EquippedSpellFindFirstArgs>(args?: SelectSubset<T, EquippedSpellFindFirstArgs<ExtArgs>>): Prisma__EquippedSpellClient<$Result.GetResult<Prisma.$EquippedSpellPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EquippedSpell that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquippedSpellFindFirstOrThrowArgs} args - Arguments to find a EquippedSpell
     * @example
     * // Get one EquippedSpell
     * const equippedSpell = await prisma.equippedSpell.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EquippedSpellFindFirstOrThrowArgs>(args?: SelectSubset<T, EquippedSpellFindFirstOrThrowArgs<ExtArgs>>): Prisma__EquippedSpellClient<$Result.GetResult<Prisma.$EquippedSpellPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EquippedSpells that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquippedSpellFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EquippedSpells
     * const equippedSpells = await prisma.equippedSpell.findMany()
     * 
     * // Get first 10 EquippedSpells
     * const equippedSpells = await prisma.equippedSpell.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const equippedSpellWithIdOnly = await prisma.equippedSpell.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EquippedSpellFindManyArgs>(args?: SelectSubset<T, EquippedSpellFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquippedSpellPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EquippedSpell.
     * @param {EquippedSpellCreateArgs} args - Arguments to create a EquippedSpell.
     * @example
     * // Create one EquippedSpell
     * const EquippedSpell = await prisma.equippedSpell.create({
     *   data: {
     *     // ... data to create a EquippedSpell
     *   }
     * })
     * 
     */
    create<T extends EquippedSpellCreateArgs>(args: SelectSubset<T, EquippedSpellCreateArgs<ExtArgs>>): Prisma__EquippedSpellClient<$Result.GetResult<Prisma.$EquippedSpellPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EquippedSpells.
     * @param {EquippedSpellCreateManyArgs} args - Arguments to create many EquippedSpells.
     * @example
     * // Create many EquippedSpells
     * const equippedSpell = await prisma.equippedSpell.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EquippedSpellCreateManyArgs>(args?: SelectSubset<T, EquippedSpellCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EquippedSpells and returns the data saved in the database.
     * @param {EquippedSpellCreateManyAndReturnArgs} args - Arguments to create many EquippedSpells.
     * @example
     * // Create many EquippedSpells
     * const equippedSpell = await prisma.equippedSpell.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EquippedSpells and only return the `id`
     * const equippedSpellWithIdOnly = await prisma.equippedSpell.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EquippedSpellCreateManyAndReturnArgs>(args?: SelectSubset<T, EquippedSpellCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquippedSpellPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EquippedSpell.
     * @param {EquippedSpellDeleteArgs} args - Arguments to delete one EquippedSpell.
     * @example
     * // Delete one EquippedSpell
     * const EquippedSpell = await prisma.equippedSpell.delete({
     *   where: {
     *     // ... filter to delete one EquippedSpell
     *   }
     * })
     * 
     */
    delete<T extends EquippedSpellDeleteArgs>(args: SelectSubset<T, EquippedSpellDeleteArgs<ExtArgs>>): Prisma__EquippedSpellClient<$Result.GetResult<Prisma.$EquippedSpellPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EquippedSpell.
     * @param {EquippedSpellUpdateArgs} args - Arguments to update one EquippedSpell.
     * @example
     * // Update one EquippedSpell
     * const equippedSpell = await prisma.equippedSpell.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EquippedSpellUpdateArgs>(args: SelectSubset<T, EquippedSpellUpdateArgs<ExtArgs>>): Prisma__EquippedSpellClient<$Result.GetResult<Prisma.$EquippedSpellPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EquippedSpells.
     * @param {EquippedSpellDeleteManyArgs} args - Arguments to filter EquippedSpells to delete.
     * @example
     * // Delete a few EquippedSpells
     * const { count } = await prisma.equippedSpell.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EquippedSpellDeleteManyArgs>(args?: SelectSubset<T, EquippedSpellDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EquippedSpells.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquippedSpellUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EquippedSpells
     * const equippedSpell = await prisma.equippedSpell.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EquippedSpellUpdateManyArgs>(args: SelectSubset<T, EquippedSpellUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EquippedSpells and returns the data updated in the database.
     * @param {EquippedSpellUpdateManyAndReturnArgs} args - Arguments to update many EquippedSpells.
     * @example
     * // Update many EquippedSpells
     * const equippedSpell = await prisma.equippedSpell.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EquippedSpells and only return the `id`
     * const equippedSpellWithIdOnly = await prisma.equippedSpell.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EquippedSpellUpdateManyAndReturnArgs>(args: SelectSubset<T, EquippedSpellUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquippedSpellPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EquippedSpell.
     * @param {EquippedSpellUpsertArgs} args - Arguments to update or create a EquippedSpell.
     * @example
     * // Update or create a EquippedSpell
     * const equippedSpell = await prisma.equippedSpell.upsert({
     *   create: {
     *     // ... data to create a EquippedSpell
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EquippedSpell we want to update
     *   }
     * })
     */
    upsert<T extends EquippedSpellUpsertArgs>(args: SelectSubset<T, EquippedSpellUpsertArgs<ExtArgs>>): Prisma__EquippedSpellClient<$Result.GetResult<Prisma.$EquippedSpellPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EquippedSpells.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquippedSpellCountArgs} args - Arguments to filter EquippedSpells to count.
     * @example
     * // Count the number of EquippedSpells
     * const count = await prisma.equippedSpell.count({
     *   where: {
     *     // ... the filter for the EquippedSpells we want to count
     *   }
     * })
    **/
    count<T extends EquippedSpellCountArgs>(
      args?: Subset<T, EquippedSpellCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EquippedSpellCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EquippedSpell.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquippedSpellAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EquippedSpellAggregateArgs>(args: Subset<T, EquippedSpellAggregateArgs>): Prisma.PrismaPromise<GetEquippedSpellAggregateType<T>>

    /**
     * Group by EquippedSpell.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquippedSpellGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EquippedSpellGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EquippedSpellGroupByArgs['orderBy'] }
        : { orderBy?: EquippedSpellGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EquippedSpellGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEquippedSpellGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EquippedSpell model
   */
  readonly fields: EquippedSpellFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EquippedSpell.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EquippedSpellClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    character<T extends CharacterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CharacterDefaultArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    spell<T extends SpellsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SpellsDefaultArgs<ExtArgs>>): Prisma__SpellsClient<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EquippedSpell model
   */
  interface EquippedSpellFieldRefs {
    readonly id: FieldRef<"EquippedSpell", 'BigInt'>
    readonly characterId: FieldRef<"EquippedSpell", 'BigInt'>
    readonly spellId: FieldRef<"EquippedSpell", 'BigInt'>
    readonly createdAt: FieldRef<"EquippedSpell", 'DateTime'>
    readonly updatedAt: FieldRef<"EquippedSpell", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EquippedSpell findUnique
   */
  export type EquippedSpellFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedSpell
     */
    select?: EquippedSpellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedSpell
     */
    omit?: EquippedSpellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedSpellInclude<ExtArgs> | null
    /**
     * Filter, which EquippedSpell to fetch.
     */
    where: EquippedSpellWhereUniqueInput
  }

  /**
   * EquippedSpell findUniqueOrThrow
   */
  export type EquippedSpellFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedSpell
     */
    select?: EquippedSpellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedSpell
     */
    omit?: EquippedSpellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedSpellInclude<ExtArgs> | null
    /**
     * Filter, which EquippedSpell to fetch.
     */
    where: EquippedSpellWhereUniqueInput
  }

  /**
   * EquippedSpell findFirst
   */
  export type EquippedSpellFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedSpell
     */
    select?: EquippedSpellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedSpell
     */
    omit?: EquippedSpellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedSpellInclude<ExtArgs> | null
    /**
     * Filter, which EquippedSpell to fetch.
     */
    where?: EquippedSpellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquippedSpells to fetch.
     */
    orderBy?: EquippedSpellOrderByWithRelationInput | EquippedSpellOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EquippedSpells.
     */
    cursor?: EquippedSpellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquippedSpells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquippedSpells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EquippedSpells.
     */
    distinct?: EquippedSpellScalarFieldEnum | EquippedSpellScalarFieldEnum[]
  }

  /**
   * EquippedSpell findFirstOrThrow
   */
  export type EquippedSpellFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedSpell
     */
    select?: EquippedSpellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedSpell
     */
    omit?: EquippedSpellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedSpellInclude<ExtArgs> | null
    /**
     * Filter, which EquippedSpell to fetch.
     */
    where?: EquippedSpellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquippedSpells to fetch.
     */
    orderBy?: EquippedSpellOrderByWithRelationInput | EquippedSpellOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EquippedSpells.
     */
    cursor?: EquippedSpellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquippedSpells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquippedSpells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EquippedSpells.
     */
    distinct?: EquippedSpellScalarFieldEnum | EquippedSpellScalarFieldEnum[]
  }

  /**
   * EquippedSpell findMany
   */
  export type EquippedSpellFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedSpell
     */
    select?: EquippedSpellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedSpell
     */
    omit?: EquippedSpellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedSpellInclude<ExtArgs> | null
    /**
     * Filter, which EquippedSpells to fetch.
     */
    where?: EquippedSpellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquippedSpells to fetch.
     */
    orderBy?: EquippedSpellOrderByWithRelationInput | EquippedSpellOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EquippedSpells.
     */
    cursor?: EquippedSpellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquippedSpells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquippedSpells.
     */
    skip?: number
    distinct?: EquippedSpellScalarFieldEnum | EquippedSpellScalarFieldEnum[]
  }

  /**
   * EquippedSpell create
   */
  export type EquippedSpellCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedSpell
     */
    select?: EquippedSpellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedSpell
     */
    omit?: EquippedSpellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedSpellInclude<ExtArgs> | null
    /**
     * The data needed to create a EquippedSpell.
     */
    data: XOR<EquippedSpellCreateInput, EquippedSpellUncheckedCreateInput>
  }

  /**
   * EquippedSpell createMany
   */
  export type EquippedSpellCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EquippedSpells.
     */
    data: EquippedSpellCreateManyInput | EquippedSpellCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EquippedSpell createManyAndReturn
   */
  export type EquippedSpellCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedSpell
     */
    select?: EquippedSpellSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedSpell
     */
    omit?: EquippedSpellOmit<ExtArgs> | null
    /**
     * The data used to create many EquippedSpells.
     */
    data: EquippedSpellCreateManyInput | EquippedSpellCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedSpellIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EquippedSpell update
   */
  export type EquippedSpellUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedSpell
     */
    select?: EquippedSpellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedSpell
     */
    omit?: EquippedSpellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedSpellInclude<ExtArgs> | null
    /**
     * The data needed to update a EquippedSpell.
     */
    data: XOR<EquippedSpellUpdateInput, EquippedSpellUncheckedUpdateInput>
    /**
     * Choose, which EquippedSpell to update.
     */
    where: EquippedSpellWhereUniqueInput
  }

  /**
   * EquippedSpell updateMany
   */
  export type EquippedSpellUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EquippedSpells.
     */
    data: XOR<EquippedSpellUpdateManyMutationInput, EquippedSpellUncheckedUpdateManyInput>
    /**
     * Filter which EquippedSpells to update
     */
    where?: EquippedSpellWhereInput
    /**
     * Limit how many EquippedSpells to update.
     */
    limit?: number
  }

  /**
   * EquippedSpell updateManyAndReturn
   */
  export type EquippedSpellUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedSpell
     */
    select?: EquippedSpellSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedSpell
     */
    omit?: EquippedSpellOmit<ExtArgs> | null
    /**
     * The data used to update EquippedSpells.
     */
    data: XOR<EquippedSpellUpdateManyMutationInput, EquippedSpellUncheckedUpdateManyInput>
    /**
     * Filter which EquippedSpells to update
     */
    where?: EquippedSpellWhereInput
    /**
     * Limit how many EquippedSpells to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedSpellIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EquippedSpell upsert
   */
  export type EquippedSpellUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedSpell
     */
    select?: EquippedSpellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedSpell
     */
    omit?: EquippedSpellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedSpellInclude<ExtArgs> | null
    /**
     * The filter to search for the EquippedSpell to update in case it exists.
     */
    where: EquippedSpellWhereUniqueInput
    /**
     * In case the EquippedSpell found by the `where` argument doesn't exist, create a new EquippedSpell with this data.
     */
    create: XOR<EquippedSpellCreateInput, EquippedSpellUncheckedCreateInput>
    /**
     * In case the EquippedSpell was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EquippedSpellUpdateInput, EquippedSpellUncheckedUpdateInput>
  }

  /**
   * EquippedSpell delete
   */
  export type EquippedSpellDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedSpell
     */
    select?: EquippedSpellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedSpell
     */
    omit?: EquippedSpellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedSpellInclude<ExtArgs> | null
    /**
     * Filter which EquippedSpell to delete.
     */
    where: EquippedSpellWhereUniqueInput
  }

  /**
   * EquippedSpell deleteMany
   */
  export type EquippedSpellDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EquippedSpells to delete
     */
    where?: EquippedSpellWhereInput
    /**
     * Limit how many EquippedSpells to delete.
     */
    limit?: number
  }

  /**
   * EquippedSpell without action
   */
  export type EquippedSpellDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquippedSpell
     */
    select?: EquippedSpellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquippedSpell
     */
    omit?: EquippedSpellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquippedSpellInclude<ExtArgs> | null
  }


  /**
   * Model CharacterBattleHistory
   */

  export type AggregateCharacterBattleHistory = {
    _count: CharacterBattleHistoryCountAggregateOutputType | null
    _avg: CharacterBattleHistoryAvgAggregateOutputType | null
    _sum: CharacterBattleHistorySumAggregateOutputType | null
    _min: CharacterBattleHistoryMinAggregateOutputType | null
    _max: CharacterBattleHistoryMaxAggregateOutputType | null
  }

  export type CharacterBattleHistoryAvgAggregateOutputType = {
    id: number | null
    characterId: number | null
    xpGained: number | null
  }

  export type CharacterBattleHistorySumAggregateOutputType = {
    id: bigint | null
    characterId: bigint | null
    xpGained: number | null
  }

  export type CharacterBattleHistoryMinAggregateOutputType = {
    id: bigint | null
    characterId: bigint | null
    sourceType: string | null
    description: string | null
    xpGained: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CharacterBattleHistoryMaxAggregateOutputType = {
    id: bigint | null
    characterId: bigint | null
    sourceType: string | null
    description: string | null
    xpGained: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CharacterBattleHistoryCountAggregateOutputType = {
    id: number
    characterId: number
    sourceType: number
    description: number
    xpGained: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CharacterBattleHistoryAvgAggregateInputType = {
    id?: true
    characterId?: true
    xpGained?: true
  }

  export type CharacterBattleHistorySumAggregateInputType = {
    id?: true
    characterId?: true
    xpGained?: true
  }

  export type CharacterBattleHistoryMinAggregateInputType = {
    id?: true
    characterId?: true
    sourceType?: true
    description?: true
    xpGained?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CharacterBattleHistoryMaxAggregateInputType = {
    id?: true
    characterId?: true
    sourceType?: true
    description?: true
    xpGained?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CharacterBattleHistoryCountAggregateInputType = {
    id?: true
    characterId?: true
    sourceType?: true
    description?: true
    xpGained?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CharacterBattleHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CharacterBattleHistory to aggregate.
     */
    where?: CharacterBattleHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterBattleHistories to fetch.
     */
    orderBy?: CharacterBattleHistoryOrderByWithRelationInput | CharacterBattleHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CharacterBattleHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterBattleHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterBattleHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CharacterBattleHistories
    **/
    _count?: true | CharacterBattleHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CharacterBattleHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CharacterBattleHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CharacterBattleHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CharacterBattleHistoryMaxAggregateInputType
  }

  export type GetCharacterBattleHistoryAggregateType<T extends CharacterBattleHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCharacterBattleHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCharacterBattleHistory[P]>
      : GetScalarType<T[P], AggregateCharacterBattleHistory[P]>
  }




  export type CharacterBattleHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterBattleHistoryWhereInput
    orderBy?: CharacterBattleHistoryOrderByWithAggregationInput | CharacterBattleHistoryOrderByWithAggregationInput[]
    by: CharacterBattleHistoryScalarFieldEnum[] | CharacterBattleHistoryScalarFieldEnum
    having?: CharacterBattleHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CharacterBattleHistoryCountAggregateInputType | true
    _avg?: CharacterBattleHistoryAvgAggregateInputType
    _sum?: CharacterBattleHistorySumAggregateInputType
    _min?: CharacterBattleHistoryMinAggregateInputType
    _max?: CharacterBattleHistoryMaxAggregateInputType
  }

  export type CharacterBattleHistoryGroupByOutputType = {
    id: bigint
    characterId: bigint
    sourceType: string
    description: string | null
    xpGained: number
    createdAt: Date
    updatedAt: Date
    _count: CharacterBattleHistoryCountAggregateOutputType | null
    _avg: CharacterBattleHistoryAvgAggregateOutputType | null
    _sum: CharacterBattleHistorySumAggregateOutputType | null
    _min: CharacterBattleHistoryMinAggregateOutputType | null
    _max: CharacterBattleHistoryMaxAggregateOutputType | null
  }

  type GetCharacterBattleHistoryGroupByPayload<T extends CharacterBattleHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CharacterBattleHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CharacterBattleHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CharacterBattleHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], CharacterBattleHistoryGroupByOutputType[P]>
        }
      >
    >


  export type CharacterBattleHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    characterId?: boolean
    sourceType?: boolean
    description?: boolean
    xpGained?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["characterBattleHistory"]>

  export type CharacterBattleHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    characterId?: boolean
    sourceType?: boolean
    description?: boolean
    xpGained?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["characterBattleHistory"]>

  export type CharacterBattleHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    characterId?: boolean
    sourceType?: boolean
    description?: boolean
    xpGained?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["characterBattleHistory"]>

  export type CharacterBattleHistorySelectScalar = {
    id?: boolean
    characterId?: boolean
    sourceType?: boolean
    description?: boolean
    xpGained?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CharacterBattleHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "characterId" | "sourceType" | "description" | "xpGained" | "createdAt" | "updatedAt", ExtArgs["result"]["characterBattleHistory"]>
  export type CharacterBattleHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }
  export type CharacterBattleHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }
  export type CharacterBattleHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }

  export type $CharacterBattleHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CharacterBattleHistory"
    objects: {
      character: Prisma.$CharacterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      characterId: bigint
      sourceType: string
      description: string | null
      xpGained: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["characterBattleHistory"]>
    composites: {}
  }

  type CharacterBattleHistoryGetPayload<S extends boolean | null | undefined | CharacterBattleHistoryDefaultArgs> = $Result.GetResult<Prisma.$CharacterBattleHistoryPayload, S>

  type CharacterBattleHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CharacterBattleHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CharacterBattleHistoryCountAggregateInputType | true
    }

  export interface CharacterBattleHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CharacterBattleHistory'], meta: { name: 'CharacterBattleHistory' } }
    /**
     * Find zero or one CharacterBattleHistory that matches the filter.
     * @param {CharacterBattleHistoryFindUniqueArgs} args - Arguments to find a CharacterBattleHistory
     * @example
     * // Get one CharacterBattleHistory
     * const characterBattleHistory = await prisma.characterBattleHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CharacterBattleHistoryFindUniqueArgs>(args: SelectSubset<T, CharacterBattleHistoryFindUniqueArgs<ExtArgs>>): Prisma__CharacterBattleHistoryClient<$Result.GetResult<Prisma.$CharacterBattleHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CharacterBattleHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CharacterBattleHistoryFindUniqueOrThrowArgs} args - Arguments to find a CharacterBattleHistory
     * @example
     * // Get one CharacterBattleHistory
     * const characterBattleHistory = await prisma.characterBattleHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CharacterBattleHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CharacterBattleHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CharacterBattleHistoryClient<$Result.GetResult<Prisma.$CharacterBattleHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CharacterBattleHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterBattleHistoryFindFirstArgs} args - Arguments to find a CharacterBattleHistory
     * @example
     * // Get one CharacterBattleHistory
     * const characterBattleHistory = await prisma.characterBattleHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CharacterBattleHistoryFindFirstArgs>(args?: SelectSubset<T, CharacterBattleHistoryFindFirstArgs<ExtArgs>>): Prisma__CharacterBattleHistoryClient<$Result.GetResult<Prisma.$CharacterBattleHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CharacterBattleHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterBattleHistoryFindFirstOrThrowArgs} args - Arguments to find a CharacterBattleHistory
     * @example
     * // Get one CharacterBattleHistory
     * const characterBattleHistory = await prisma.characterBattleHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CharacterBattleHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CharacterBattleHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CharacterBattleHistoryClient<$Result.GetResult<Prisma.$CharacterBattleHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CharacterBattleHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterBattleHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CharacterBattleHistories
     * const characterBattleHistories = await prisma.characterBattleHistory.findMany()
     * 
     * // Get first 10 CharacterBattleHistories
     * const characterBattleHistories = await prisma.characterBattleHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const characterBattleHistoryWithIdOnly = await prisma.characterBattleHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CharacterBattleHistoryFindManyArgs>(args?: SelectSubset<T, CharacterBattleHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterBattleHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CharacterBattleHistory.
     * @param {CharacterBattleHistoryCreateArgs} args - Arguments to create a CharacterBattleHistory.
     * @example
     * // Create one CharacterBattleHistory
     * const CharacterBattleHistory = await prisma.characterBattleHistory.create({
     *   data: {
     *     // ... data to create a CharacterBattleHistory
     *   }
     * })
     * 
     */
    create<T extends CharacterBattleHistoryCreateArgs>(args: SelectSubset<T, CharacterBattleHistoryCreateArgs<ExtArgs>>): Prisma__CharacterBattleHistoryClient<$Result.GetResult<Prisma.$CharacterBattleHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CharacterBattleHistories.
     * @param {CharacterBattleHistoryCreateManyArgs} args - Arguments to create many CharacterBattleHistories.
     * @example
     * // Create many CharacterBattleHistories
     * const characterBattleHistory = await prisma.characterBattleHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CharacterBattleHistoryCreateManyArgs>(args?: SelectSubset<T, CharacterBattleHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CharacterBattleHistories and returns the data saved in the database.
     * @param {CharacterBattleHistoryCreateManyAndReturnArgs} args - Arguments to create many CharacterBattleHistories.
     * @example
     * // Create many CharacterBattleHistories
     * const characterBattleHistory = await prisma.characterBattleHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CharacterBattleHistories and only return the `id`
     * const characterBattleHistoryWithIdOnly = await prisma.characterBattleHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CharacterBattleHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CharacterBattleHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterBattleHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CharacterBattleHistory.
     * @param {CharacterBattleHistoryDeleteArgs} args - Arguments to delete one CharacterBattleHistory.
     * @example
     * // Delete one CharacterBattleHistory
     * const CharacterBattleHistory = await prisma.characterBattleHistory.delete({
     *   where: {
     *     // ... filter to delete one CharacterBattleHistory
     *   }
     * })
     * 
     */
    delete<T extends CharacterBattleHistoryDeleteArgs>(args: SelectSubset<T, CharacterBattleHistoryDeleteArgs<ExtArgs>>): Prisma__CharacterBattleHistoryClient<$Result.GetResult<Prisma.$CharacterBattleHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CharacterBattleHistory.
     * @param {CharacterBattleHistoryUpdateArgs} args - Arguments to update one CharacterBattleHistory.
     * @example
     * // Update one CharacterBattleHistory
     * const characterBattleHistory = await prisma.characterBattleHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CharacterBattleHistoryUpdateArgs>(args: SelectSubset<T, CharacterBattleHistoryUpdateArgs<ExtArgs>>): Prisma__CharacterBattleHistoryClient<$Result.GetResult<Prisma.$CharacterBattleHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CharacterBattleHistories.
     * @param {CharacterBattleHistoryDeleteManyArgs} args - Arguments to filter CharacterBattleHistories to delete.
     * @example
     * // Delete a few CharacterBattleHistories
     * const { count } = await prisma.characterBattleHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CharacterBattleHistoryDeleteManyArgs>(args?: SelectSubset<T, CharacterBattleHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CharacterBattleHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterBattleHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CharacterBattleHistories
     * const characterBattleHistory = await prisma.characterBattleHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CharacterBattleHistoryUpdateManyArgs>(args: SelectSubset<T, CharacterBattleHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CharacterBattleHistories and returns the data updated in the database.
     * @param {CharacterBattleHistoryUpdateManyAndReturnArgs} args - Arguments to update many CharacterBattleHistories.
     * @example
     * // Update many CharacterBattleHistories
     * const characterBattleHistory = await prisma.characterBattleHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CharacterBattleHistories and only return the `id`
     * const characterBattleHistoryWithIdOnly = await prisma.characterBattleHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CharacterBattleHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CharacterBattleHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterBattleHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CharacterBattleHistory.
     * @param {CharacterBattleHistoryUpsertArgs} args - Arguments to update or create a CharacterBattleHistory.
     * @example
     * // Update or create a CharacterBattleHistory
     * const characterBattleHistory = await prisma.characterBattleHistory.upsert({
     *   create: {
     *     // ... data to create a CharacterBattleHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CharacterBattleHistory we want to update
     *   }
     * })
     */
    upsert<T extends CharacterBattleHistoryUpsertArgs>(args: SelectSubset<T, CharacterBattleHistoryUpsertArgs<ExtArgs>>): Prisma__CharacterBattleHistoryClient<$Result.GetResult<Prisma.$CharacterBattleHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CharacterBattleHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterBattleHistoryCountArgs} args - Arguments to filter CharacterBattleHistories to count.
     * @example
     * // Count the number of CharacterBattleHistories
     * const count = await prisma.characterBattleHistory.count({
     *   where: {
     *     // ... the filter for the CharacterBattleHistories we want to count
     *   }
     * })
    **/
    count<T extends CharacterBattleHistoryCountArgs>(
      args?: Subset<T, CharacterBattleHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CharacterBattleHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CharacterBattleHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterBattleHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CharacterBattleHistoryAggregateArgs>(args: Subset<T, CharacterBattleHistoryAggregateArgs>): Prisma.PrismaPromise<GetCharacterBattleHistoryAggregateType<T>>

    /**
     * Group by CharacterBattleHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterBattleHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CharacterBattleHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CharacterBattleHistoryGroupByArgs['orderBy'] }
        : { orderBy?: CharacterBattleHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CharacterBattleHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCharacterBattleHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CharacterBattleHistory model
   */
  readonly fields: CharacterBattleHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CharacterBattleHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CharacterBattleHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    character<T extends CharacterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CharacterDefaultArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CharacterBattleHistory model
   */
  interface CharacterBattleHistoryFieldRefs {
    readonly id: FieldRef<"CharacterBattleHistory", 'BigInt'>
    readonly characterId: FieldRef<"CharacterBattleHistory", 'BigInt'>
    readonly sourceType: FieldRef<"CharacterBattleHistory", 'String'>
    readonly description: FieldRef<"CharacterBattleHistory", 'String'>
    readonly xpGained: FieldRef<"CharacterBattleHistory", 'Int'>
    readonly createdAt: FieldRef<"CharacterBattleHistory", 'DateTime'>
    readonly updatedAt: FieldRef<"CharacterBattleHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CharacterBattleHistory findUnique
   */
  export type CharacterBattleHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterBattleHistory
     */
    select?: CharacterBattleHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CharacterBattleHistory
     */
    omit?: CharacterBattleHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterBattleHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CharacterBattleHistory to fetch.
     */
    where: CharacterBattleHistoryWhereUniqueInput
  }

  /**
   * CharacterBattleHistory findUniqueOrThrow
   */
  export type CharacterBattleHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterBattleHistory
     */
    select?: CharacterBattleHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CharacterBattleHistory
     */
    omit?: CharacterBattleHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterBattleHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CharacterBattleHistory to fetch.
     */
    where: CharacterBattleHistoryWhereUniqueInput
  }

  /**
   * CharacterBattleHistory findFirst
   */
  export type CharacterBattleHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterBattleHistory
     */
    select?: CharacterBattleHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CharacterBattleHistory
     */
    omit?: CharacterBattleHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterBattleHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CharacterBattleHistory to fetch.
     */
    where?: CharacterBattleHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterBattleHistories to fetch.
     */
    orderBy?: CharacterBattleHistoryOrderByWithRelationInput | CharacterBattleHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CharacterBattleHistories.
     */
    cursor?: CharacterBattleHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterBattleHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterBattleHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CharacterBattleHistories.
     */
    distinct?: CharacterBattleHistoryScalarFieldEnum | CharacterBattleHistoryScalarFieldEnum[]
  }

  /**
   * CharacterBattleHistory findFirstOrThrow
   */
  export type CharacterBattleHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterBattleHistory
     */
    select?: CharacterBattleHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CharacterBattleHistory
     */
    omit?: CharacterBattleHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterBattleHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CharacterBattleHistory to fetch.
     */
    where?: CharacterBattleHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterBattleHistories to fetch.
     */
    orderBy?: CharacterBattleHistoryOrderByWithRelationInput | CharacterBattleHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CharacterBattleHistories.
     */
    cursor?: CharacterBattleHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterBattleHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterBattleHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CharacterBattleHistories.
     */
    distinct?: CharacterBattleHistoryScalarFieldEnum | CharacterBattleHistoryScalarFieldEnum[]
  }

  /**
   * CharacterBattleHistory findMany
   */
  export type CharacterBattleHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterBattleHistory
     */
    select?: CharacterBattleHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CharacterBattleHistory
     */
    omit?: CharacterBattleHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterBattleHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CharacterBattleHistories to fetch.
     */
    where?: CharacterBattleHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterBattleHistories to fetch.
     */
    orderBy?: CharacterBattleHistoryOrderByWithRelationInput | CharacterBattleHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CharacterBattleHistories.
     */
    cursor?: CharacterBattleHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterBattleHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterBattleHistories.
     */
    skip?: number
    distinct?: CharacterBattleHistoryScalarFieldEnum | CharacterBattleHistoryScalarFieldEnum[]
  }

  /**
   * CharacterBattleHistory create
   */
  export type CharacterBattleHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterBattleHistory
     */
    select?: CharacterBattleHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CharacterBattleHistory
     */
    omit?: CharacterBattleHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterBattleHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a CharacterBattleHistory.
     */
    data: XOR<CharacterBattleHistoryCreateInput, CharacterBattleHistoryUncheckedCreateInput>
  }

  /**
   * CharacterBattleHistory createMany
   */
  export type CharacterBattleHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CharacterBattleHistories.
     */
    data: CharacterBattleHistoryCreateManyInput | CharacterBattleHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CharacterBattleHistory createManyAndReturn
   */
  export type CharacterBattleHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterBattleHistory
     */
    select?: CharacterBattleHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CharacterBattleHistory
     */
    omit?: CharacterBattleHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many CharacterBattleHistories.
     */
    data: CharacterBattleHistoryCreateManyInput | CharacterBattleHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterBattleHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CharacterBattleHistory update
   */
  export type CharacterBattleHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterBattleHistory
     */
    select?: CharacterBattleHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CharacterBattleHistory
     */
    omit?: CharacterBattleHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterBattleHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a CharacterBattleHistory.
     */
    data: XOR<CharacterBattleHistoryUpdateInput, CharacterBattleHistoryUncheckedUpdateInput>
    /**
     * Choose, which CharacterBattleHistory to update.
     */
    where: CharacterBattleHistoryWhereUniqueInput
  }

  /**
   * CharacterBattleHistory updateMany
   */
  export type CharacterBattleHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CharacterBattleHistories.
     */
    data: XOR<CharacterBattleHistoryUpdateManyMutationInput, CharacterBattleHistoryUncheckedUpdateManyInput>
    /**
     * Filter which CharacterBattleHistories to update
     */
    where?: CharacterBattleHistoryWhereInput
    /**
     * Limit how many CharacterBattleHistories to update.
     */
    limit?: number
  }

  /**
   * CharacterBattleHistory updateManyAndReturn
   */
  export type CharacterBattleHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterBattleHistory
     */
    select?: CharacterBattleHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CharacterBattleHistory
     */
    omit?: CharacterBattleHistoryOmit<ExtArgs> | null
    /**
     * The data used to update CharacterBattleHistories.
     */
    data: XOR<CharacterBattleHistoryUpdateManyMutationInput, CharacterBattleHistoryUncheckedUpdateManyInput>
    /**
     * Filter which CharacterBattleHistories to update
     */
    where?: CharacterBattleHistoryWhereInput
    /**
     * Limit how many CharacterBattleHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterBattleHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CharacterBattleHistory upsert
   */
  export type CharacterBattleHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterBattleHistory
     */
    select?: CharacterBattleHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CharacterBattleHistory
     */
    omit?: CharacterBattleHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterBattleHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the CharacterBattleHistory to update in case it exists.
     */
    where: CharacterBattleHistoryWhereUniqueInput
    /**
     * In case the CharacterBattleHistory found by the `where` argument doesn't exist, create a new CharacterBattleHistory with this data.
     */
    create: XOR<CharacterBattleHistoryCreateInput, CharacterBattleHistoryUncheckedCreateInput>
    /**
     * In case the CharacterBattleHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CharacterBattleHistoryUpdateInput, CharacterBattleHistoryUncheckedUpdateInput>
  }

  /**
   * CharacterBattleHistory delete
   */
  export type CharacterBattleHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterBattleHistory
     */
    select?: CharacterBattleHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CharacterBattleHistory
     */
    omit?: CharacterBattleHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterBattleHistoryInclude<ExtArgs> | null
    /**
     * Filter which CharacterBattleHistory to delete.
     */
    where: CharacterBattleHistoryWhereUniqueInput
  }

  /**
   * CharacterBattleHistory deleteMany
   */
  export type CharacterBattleHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CharacterBattleHistories to delete
     */
    where?: CharacterBattleHistoryWhereInput
    /**
     * Limit how many CharacterBattleHistories to delete.
     */
    limit?: number
  }

  /**
   * CharacterBattleHistory without action
   */
  export type CharacterBattleHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterBattleHistory
     */
    select?: CharacterBattleHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CharacterBattleHistory
     */
    omit?: CharacterBattleHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterBattleHistoryInclude<ExtArgs> | null
  }


  /**
   * Model LevelingRule
   */

  export type AggregateLevelingRule = {
    _count: LevelingRuleCountAggregateOutputType | null
    _avg: LevelingRuleAvgAggregateOutputType | null
    _sum: LevelingRuleSumAggregateOutputType | null
    _min: LevelingRuleMinAggregateOutputType | null
    _max: LevelingRuleMaxAggregateOutputType | null
  }

  export type LevelingRuleAvgAggregateOutputType = {
    id: number | null
    campaignId: number | null
    level: number | null
    requiredXp: number | null
  }

  export type LevelingRuleSumAggregateOutputType = {
    id: bigint | null
    campaignId: bigint | null
    level: bigint | null
    requiredXp: bigint | null
  }

  export type LevelingRuleMinAggregateOutputType = {
    id: bigint | null
    campaignId: bigint | null
    level: bigint | null
    requiredXp: bigint | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LevelingRuleMaxAggregateOutputType = {
    id: bigint | null
    campaignId: bigint | null
    level: bigint | null
    requiredXp: bigint | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LevelingRuleCountAggregateOutputType = {
    id: number
    campaignId: number
    level: number
    requiredXp: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LevelingRuleAvgAggregateInputType = {
    id?: true
    campaignId?: true
    level?: true
    requiredXp?: true
  }

  export type LevelingRuleSumAggregateInputType = {
    id?: true
    campaignId?: true
    level?: true
    requiredXp?: true
  }

  export type LevelingRuleMinAggregateInputType = {
    id?: true
    campaignId?: true
    level?: true
    requiredXp?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LevelingRuleMaxAggregateInputType = {
    id?: true
    campaignId?: true
    level?: true
    requiredXp?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LevelingRuleCountAggregateInputType = {
    id?: true
    campaignId?: true
    level?: true
    requiredXp?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LevelingRuleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LevelingRule to aggregate.
     */
    where?: LevelingRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LevelingRules to fetch.
     */
    orderBy?: LevelingRuleOrderByWithRelationInput | LevelingRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LevelingRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LevelingRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LevelingRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LevelingRules
    **/
    _count?: true | LevelingRuleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LevelingRuleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LevelingRuleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LevelingRuleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LevelingRuleMaxAggregateInputType
  }

  export type GetLevelingRuleAggregateType<T extends LevelingRuleAggregateArgs> = {
        [P in keyof T & keyof AggregateLevelingRule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLevelingRule[P]>
      : GetScalarType<T[P], AggregateLevelingRule[P]>
  }




  export type LevelingRuleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LevelingRuleWhereInput
    orderBy?: LevelingRuleOrderByWithAggregationInput | LevelingRuleOrderByWithAggregationInput[]
    by: LevelingRuleScalarFieldEnum[] | LevelingRuleScalarFieldEnum
    having?: LevelingRuleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LevelingRuleCountAggregateInputType | true
    _avg?: LevelingRuleAvgAggregateInputType
    _sum?: LevelingRuleSumAggregateInputType
    _min?: LevelingRuleMinAggregateInputType
    _max?: LevelingRuleMaxAggregateInputType
  }

  export type LevelingRuleGroupByOutputType = {
    id: bigint
    campaignId: bigint
    level: bigint
    requiredXp: bigint
    createdAt: Date
    updatedAt: Date
    _count: LevelingRuleCountAggregateOutputType | null
    _avg: LevelingRuleAvgAggregateOutputType | null
    _sum: LevelingRuleSumAggregateOutputType | null
    _min: LevelingRuleMinAggregateOutputType | null
    _max: LevelingRuleMaxAggregateOutputType | null
  }

  type GetLevelingRuleGroupByPayload<T extends LevelingRuleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LevelingRuleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LevelingRuleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LevelingRuleGroupByOutputType[P]>
            : GetScalarType<T[P], LevelingRuleGroupByOutputType[P]>
        }
      >
    >


  export type LevelingRuleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    level?: boolean
    requiredXp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["levelingRule"]>

  export type LevelingRuleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    level?: boolean
    requiredXp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["levelingRule"]>

  export type LevelingRuleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    level?: boolean
    requiredXp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["levelingRule"]>

  export type LevelingRuleSelectScalar = {
    id?: boolean
    campaignId?: boolean
    level?: boolean
    requiredXp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LevelingRuleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "campaignId" | "level" | "requiredXp" | "createdAt" | "updatedAt", ExtArgs["result"]["levelingRule"]>
  export type LevelingRuleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }
  export type LevelingRuleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }
  export type LevelingRuleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }

  export type $LevelingRulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LevelingRule"
    objects: {
      campaign: Prisma.$CampaignPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      campaignId: bigint
      level: bigint
      requiredXp: bigint
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["levelingRule"]>
    composites: {}
  }

  type LevelingRuleGetPayload<S extends boolean | null | undefined | LevelingRuleDefaultArgs> = $Result.GetResult<Prisma.$LevelingRulePayload, S>

  type LevelingRuleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LevelingRuleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LevelingRuleCountAggregateInputType | true
    }

  export interface LevelingRuleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LevelingRule'], meta: { name: 'LevelingRule' } }
    /**
     * Find zero or one LevelingRule that matches the filter.
     * @param {LevelingRuleFindUniqueArgs} args - Arguments to find a LevelingRule
     * @example
     * // Get one LevelingRule
     * const levelingRule = await prisma.levelingRule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LevelingRuleFindUniqueArgs>(args: SelectSubset<T, LevelingRuleFindUniqueArgs<ExtArgs>>): Prisma__LevelingRuleClient<$Result.GetResult<Prisma.$LevelingRulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LevelingRule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LevelingRuleFindUniqueOrThrowArgs} args - Arguments to find a LevelingRule
     * @example
     * // Get one LevelingRule
     * const levelingRule = await prisma.levelingRule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LevelingRuleFindUniqueOrThrowArgs>(args: SelectSubset<T, LevelingRuleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LevelingRuleClient<$Result.GetResult<Prisma.$LevelingRulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LevelingRule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelingRuleFindFirstArgs} args - Arguments to find a LevelingRule
     * @example
     * // Get one LevelingRule
     * const levelingRule = await prisma.levelingRule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LevelingRuleFindFirstArgs>(args?: SelectSubset<T, LevelingRuleFindFirstArgs<ExtArgs>>): Prisma__LevelingRuleClient<$Result.GetResult<Prisma.$LevelingRulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LevelingRule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelingRuleFindFirstOrThrowArgs} args - Arguments to find a LevelingRule
     * @example
     * // Get one LevelingRule
     * const levelingRule = await prisma.levelingRule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LevelingRuleFindFirstOrThrowArgs>(args?: SelectSubset<T, LevelingRuleFindFirstOrThrowArgs<ExtArgs>>): Prisma__LevelingRuleClient<$Result.GetResult<Prisma.$LevelingRulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LevelingRules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelingRuleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LevelingRules
     * const levelingRules = await prisma.levelingRule.findMany()
     * 
     * // Get first 10 LevelingRules
     * const levelingRules = await prisma.levelingRule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const levelingRuleWithIdOnly = await prisma.levelingRule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LevelingRuleFindManyArgs>(args?: SelectSubset<T, LevelingRuleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelingRulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LevelingRule.
     * @param {LevelingRuleCreateArgs} args - Arguments to create a LevelingRule.
     * @example
     * // Create one LevelingRule
     * const LevelingRule = await prisma.levelingRule.create({
     *   data: {
     *     // ... data to create a LevelingRule
     *   }
     * })
     * 
     */
    create<T extends LevelingRuleCreateArgs>(args: SelectSubset<T, LevelingRuleCreateArgs<ExtArgs>>): Prisma__LevelingRuleClient<$Result.GetResult<Prisma.$LevelingRulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LevelingRules.
     * @param {LevelingRuleCreateManyArgs} args - Arguments to create many LevelingRules.
     * @example
     * // Create many LevelingRules
     * const levelingRule = await prisma.levelingRule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LevelingRuleCreateManyArgs>(args?: SelectSubset<T, LevelingRuleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LevelingRules and returns the data saved in the database.
     * @param {LevelingRuleCreateManyAndReturnArgs} args - Arguments to create many LevelingRules.
     * @example
     * // Create many LevelingRules
     * const levelingRule = await prisma.levelingRule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LevelingRules and only return the `id`
     * const levelingRuleWithIdOnly = await prisma.levelingRule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LevelingRuleCreateManyAndReturnArgs>(args?: SelectSubset<T, LevelingRuleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelingRulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LevelingRule.
     * @param {LevelingRuleDeleteArgs} args - Arguments to delete one LevelingRule.
     * @example
     * // Delete one LevelingRule
     * const LevelingRule = await prisma.levelingRule.delete({
     *   where: {
     *     // ... filter to delete one LevelingRule
     *   }
     * })
     * 
     */
    delete<T extends LevelingRuleDeleteArgs>(args: SelectSubset<T, LevelingRuleDeleteArgs<ExtArgs>>): Prisma__LevelingRuleClient<$Result.GetResult<Prisma.$LevelingRulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LevelingRule.
     * @param {LevelingRuleUpdateArgs} args - Arguments to update one LevelingRule.
     * @example
     * // Update one LevelingRule
     * const levelingRule = await prisma.levelingRule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LevelingRuleUpdateArgs>(args: SelectSubset<T, LevelingRuleUpdateArgs<ExtArgs>>): Prisma__LevelingRuleClient<$Result.GetResult<Prisma.$LevelingRulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LevelingRules.
     * @param {LevelingRuleDeleteManyArgs} args - Arguments to filter LevelingRules to delete.
     * @example
     * // Delete a few LevelingRules
     * const { count } = await prisma.levelingRule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LevelingRuleDeleteManyArgs>(args?: SelectSubset<T, LevelingRuleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LevelingRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelingRuleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LevelingRules
     * const levelingRule = await prisma.levelingRule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LevelingRuleUpdateManyArgs>(args: SelectSubset<T, LevelingRuleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LevelingRules and returns the data updated in the database.
     * @param {LevelingRuleUpdateManyAndReturnArgs} args - Arguments to update many LevelingRules.
     * @example
     * // Update many LevelingRules
     * const levelingRule = await prisma.levelingRule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LevelingRules and only return the `id`
     * const levelingRuleWithIdOnly = await prisma.levelingRule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LevelingRuleUpdateManyAndReturnArgs>(args: SelectSubset<T, LevelingRuleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelingRulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LevelingRule.
     * @param {LevelingRuleUpsertArgs} args - Arguments to update or create a LevelingRule.
     * @example
     * // Update or create a LevelingRule
     * const levelingRule = await prisma.levelingRule.upsert({
     *   create: {
     *     // ... data to create a LevelingRule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LevelingRule we want to update
     *   }
     * })
     */
    upsert<T extends LevelingRuleUpsertArgs>(args: SelectSubset<T, LevelingRuleUpsertArgs<ExtArgs>>): Prisma__LevelingRuleClient<$Result.GetResult<Prisma.$LevelingRulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LevelingRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelingRuleCountArgs} args - Arguments to filter LevelingRules to count.
     * @example
     * // Count the number of LevelingRules
     * const count = await prisma.levelingRule.count({
     *   where: {
     *     // ... the filter for the LevelingRules we want to count
     *   }
     * })
    **/
    count<T extends LevelingRuleCountArgs>(
      args?: Subset<T, LevelingRuleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LevelingRuleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LevelingRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelingRuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LevelingRuleAggregateArgs>(args: Subset<T, LevelingRuleAggregateArgs>): Prisma.PrismaPromise<GetLevelingRuleAggregateType<T>>

    /**
     * Group by LevelingRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelingRuleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LevelingRuleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LevelingRuleGroupByArgs['orderBy'] }
        : { orderBy?: LevelingRuleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LevelingRuleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLevelingRuleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LevelingRule model
   */
  readonly fields: LevelingRuleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LevelingRule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LevelingRuleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    campaign<T extends CampaignDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CampaignDefaultArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LevelingRule model
   */
  interface LevelingRuleFieldRefs {
    readonly id: FieldRef<"LevelingRule", 'BigInt'>
    readonly campaignId: FieldRef<"LevelingRule", 'BigInt'>
    readonly level: FieldRef<"LevelingRule", 'BigInt'>
    readonly requiredXp: FieldRef<"LevelingRule", 'BigInt'>
    readonly createdAt: FieldRef<"LevelingRule", 'DateTime'>
    readonly updatedAt: FieldRef<"LevelingRule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LevelingRule findUnique
   */
  export type LevelingRuleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelingRule
     */
    select?: LevelingRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelingRule
     */
    omit?: LevelingRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelingRuleInclude<ExtArgs> | null
    /**
     * Filter, which LevelingRule to fetch.
     */
    where: LevelingRuleWhereUniqueInput
  }

  /**
   * LevelingRule findUniqueOrThrow
   */
  export type LevelingRuleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelingRule
     */
    select?: LevelingRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelingRule
     */
    omit?: LevelingRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelingRuleInclude<ExtArgs> | null
    /**
     * Filter, which LevelingRule to fetch.
     */
    where: LevelingRuleWhereUniqueInput
  }

  /**
   * LevelingRule findFirst
   */
  export type LevelingRuleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelingRule
     */
    select?: LevelingRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelingRule
     */
    omit?: LevelingRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelingRuleInclude<ExtArgs> | null
    /**
     * Filter, which LevelingRule to fetch.
     */
    where?: LevelingRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LevelingRules to fetch.
     */
    orderBy?: LevelingRuleOrderByWithRelationInput | LevelingRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LevelingRules.
     */
    cursor?: LevelingRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LevelingRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LevelingRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LevelingRules.
     */
    distinct?: LevelingRuleScalarFieldEnum | LevelingRuleScalarFieldEnum[]
  }

  /**
   * LevelingRule findFirstOrThrow
   */
  export type LevelingRuleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelingRule
     */
    select?: LevelingRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelingRule
     */
    omit?: LevelingRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelingRuleInclude<ExtArgs> | null
    /**
     * Filter, which LevelingRule to fetch.
     */
    where?: LevelingRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LevelingRules to fetch.
     */
    orderBy?: LevelingRuleOrderByWithRelationInput | LevelingRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LevelingRules.
     */
    cursor?: LevelingRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LevelingRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LevelingRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LevelingRules.
     */
    distinct?: LevelingRuleScalarFieldEnum | LevelingRuleScalarFieldEnum[]
  }

  /**
   * LevelingRule findMany
   */
  export type LevelingRuleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelingRule
     */
    select?: LevelingRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelingRule
     */
    omit?: LevelingRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelingRuleInclude<ExtArgs> | null
    /**
     * Filter, which LevelingRules to fetch.
     */
    where?: LevelingRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LevelingRules to fetch.
     */
    orderBy?: LevelingRuleOrderByWithRelationInput | LevelingRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LevelingRules.
     */
    cursor?: LevelingRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LevelingRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LevelingRules.
     */
    skip?: number
    distinct?: LevelingRuleScalarFieldEnum | LevelingRuleScalarFieldEnum[]
  }

  /**
   * LevelingRule create
   */
  export type LevelingRuleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelingRule
     */
    select?: LevelingRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelingRule
     */
    omit?: LevelingRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelingRuleInclude<ExtArgs> | null
    /**
     * The data needed to create a LevelingRule.
     */
    data: XOR<LevelingRuleCreateInput, LevelingRuleUncheckedCreateInput>
  }

  /**
   * LevelingRule createMany
   */
  export type LevelingRuleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LevelingRules.
     */
    data: LevelingRuleCreateManyInput | LevelingRuleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LevelingRule createManyAndReturn
   */
  export type LevelingRuleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelingRule
     */
    select?: LevelingRuleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LevelingRule
     */
    omit?: LevelingRuleOmit<ExtArgs> | null
    /**
     * The data used to create many LevelingRules.
     */
    data: LevelingRuleCreateManyInput | LevelingRuleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelingRuleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LevelingRule update
   */
  export type LevelingRuleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelingRule
     */
    select?: LevelingRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelingRule
     */
    omit?: LevelingRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelingRuleInclude<ExtArgs> | null
    /**
     * The data needed to update a LevelingRule.
     */
    data: XOR<LevelingRuleUpdateInput, LevelingRuleUncheckedUpdateInput>
    /**
     * Choose, which LevelingRule to update.
     */
    where: LevelingRuleWhereUniqueInput
  }

  /**
   * LevelingRule updateMany
   */
  export type LevelingRuleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LevelingRules.
     */
    data: XOR<LevelingRuleUpdateManyMutationInput, LevelingRuleUncheckedUpdateManyInput>
    /**
     * Filter which LevelingRules to update
     */
    where?: LevelingRuleWhereInput
    /**
     * Limit how many LevelingRules to update.
     */
    limit?: number
  }

  /**
   * LevelingRule updateManyAndReturn
   */
  export type LevelingRuleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelingRule
     */
    select?: LevelingRuleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LevelingRule
     */
    omit?: LevelingRuleOmit<ExtArgs> | null
    /**
     * The data used to update LevelingRules.
     */
    data: XOR<LevelingRuleUpdateManyMutationInput, LevelingRuleUncheckedUpdateManyInput>
    /**
     * Filter which LevelingRules to update
     */
    where?: LevelingRuleWhereInput
    /**
     * Limit how many LevelingRules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelingRuleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LevelingRule upsert
   */
  export type LevelingRuleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelingRule
     */
    select?: LevelingRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelingRule
     */
    omit?: LevelingRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelingRuleInclude<ExtArgs> | null
    /**
     * The filter to search for the LevelingRule to update in case it exists.
     */
    where: LevelingRuleWhereUniqueInput
    /**
     * In case the LevelingRule found by the `where` argument doesn't exist, create a new LevelingRule with this data.
     */
    create: XOR<LevelingRuleCreateInput, LevelingRuleUncheckedCreateInput>
    /**
     * In case the LevelingRule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LevelingRuleUpdateInput, LevelingRuleUncheckedUpdateInput>
  }

  /**
   * LevelingRule delete
   */
  export type LevelingRuleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelingRule
     */
    select?: LevelingRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelingRule
     */
    omit?: LevelingRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelingRuleInclude<ExtArgs> | null
    /**
     * Filter which LevelingRule to delete.
     */
    where: LevelingRuleWhereUniqueInput
  }

  /**
   * LevelingRule deleteMany
   */
  export type LevelingRuleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LevelingRules to delete
     */
    where?: LevelingRuleWhereInput
    /**
     * Limit how many LevelingRules to delete.
     */
    limit?: number
  }

  /**
   * LevelingRule without action
   */
  export type LevelingRuleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelingRule
     */
    select?: LevelingRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LevelingRule
     */
    omit?: LevelingRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelingRuleInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    password: 'password',
    email: 'email',
    avatar: 'avatar',
    type: 'type',
    active: 'active',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CampaignScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    active: 'active',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CampaignScalarFieldEnum = (typeof CampaignScalarFieldEnum)[keyof typeof CampaignScalarFieldEnum]


  export const CampaignUserScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    campaignId: 'campaignId',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CampaignUserScalarFieldEnum = (typeof CampaignUserScalarFieldEnum)[keyof typeof CampaignUserScalarFieldEnum]


  export const CharacterScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    campaignId: 'campaignId',
    name: 'name',
    avatar: 'avatar',
    sheet: 'sheet',
    active: 'active',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CharacterScalarFieldEnum = (typeof CharacterScalarFieldEnum)[keyof typeof CharacterScalarFieldEnum]


  export const CurrencyScalarFieldEnum: {
    id: 'id',
    inventoryId: 'inventoryId',
    name: 'name',
    amount: 'amount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CurrencyScalarFieldEnum = (typeof CurrencyScalarFieldEnum)[keyof typeof CurrencyScalarFieldEnum]


  export const InventoryScalarFieldEnum: {
    id: 'id',
    characterId: 'characterId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InventoryScalarFieldEnum = (typeof InventoryScalarFieldEnum)[keyof typeof InventoryScalarFieldEnum]


  export const InventoryItemScalarFieldEnum: {
    id: 'id',
    inventoryId: 'inventoryId',
    itemsId: 'itemsId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InventoryItemScalarFieldEnum = (typeof InventoryItemScalarFieldEnum)[keyof typeof InventoryItemScalarFieldEnum]


  export const ItemsScalarFieldEnum: {
    id: 'id',
    campaignId: 'campaignId',
    type: 'type',
    rarity: 'rarity',
    name: 'name',
    slot: 'slot',
    attributes: 'attributes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ItemsScalarFieldEnum = (typeof ItemsScalarFieldEnum)[keyof typeof ItemsScalarFieldEnum]


  export const ItemTransactionHistoryScalarFieldEnum: {
    id: 'id',
    campaignId: 'campaignId',
    itemId: 'itemId',
    inventoryId: 'inventoryId',
    fromInventoryId: 'fromInventoryId',
    transactionType: 'transactionType',
    amount: 'amount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ItemTransactionHistoryScalarFieldEnum = (typeof ItemTransactionHistoryScalarFieldEnum)[keyof typeof ItemTransactionHistoryScalarFieldEnum]


  export const EquippedItemScalarFieldEnum: {
    id: 'id',
    characterId: 'characterId',
    inventoryItemId: 'inventoryItemId',
    slot: 'slot',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EquippedItemScalarFieldEnum = (typeof EquippedItemScalarFieldEnum)[keyof typeof EquippedItemScalarFieldEnum]


  export const SpellsScalarFieldEnum: {
    id: 'id',
    campaignId: 'campaignId',
    name: 'name',
    type: 'type',
    description: 'description',
    specifications: 'specifications',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SpellsScalarFieldEnum = (typeof SpellsScalarFieldEnum)[keyof typeof SpellsScalarFieldEnum]


  export const EquippedSpellScalarFieldEnum: {
    id: 'id',
    characterId: 'characterId',
    spellId: 'spellId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EquippedSpellScalarFieldEnum = (typeof EquippedSpellScalarFieldEnum)[keyof typeof EquippedSpellScalarFieldEnum]


  export const CharacterBattleHistoryScalarFieldEnum: {
    id: 'id',
    characterId: 'characterId',
    sourceType: 'sourceType',
    description: 'description',
    xpGained: 'xpGained',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CharacterBattleHistoryScalarFieldEnum = (typeof CharacterBattleHistoryScalarFieldEnum)[keyof typeof CharacterBattleHistoryScalarFieldEnum]


  export const LevelingRuleScalarFieldEnum: {
    id: 'id',
    campaignId: 'campaignId',
    level: 'level',
    requiredXp: 'requiredXp',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LevelingRuleScalarFieldEnum = (typeof LevelingRuleScalarFieldEnum)[keyof typeof LevelingRuleScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: BigIntFilter<"User"> | bigint | number
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    type?: StringFilter<"User"> | string
    active?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    characters?: CharacterListRelationFilter
    campaignUsers?: CampaignUserListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    avatar?: SortOrderInput | SortOrder
    type?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    characters?: CharacterOrderByRelationAggregateInput
    campaignUsers?: CampaignUserOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    type?: StringFilter<"User"> | string
    active?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    characters?: CharacterListRelationFilter
    campaignUsers?: CampaignUserListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    avatar?: SortOrderInput | SortOrder
    type?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"User"> | bigint | number
    name?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    type?: StringWithAggregatesFilter<"User"> | string
    active?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CampaignWhereInput = {
    AND?: CampaignWhereInput | CampaignWhereInput[]
    OR?: CampaignWhereInput[]
    NOT?: CampaignWhereInput | CampaignWhereInput[]
    id?: BigIntFilter<"Campaign"> | bigint | number
    name?: StringFilter<"Campaign"> | string
    description?: StringFilter<"Campaign"> | string
    active?: BoolFilter<"Campaign"> | boolean
    createdAt?: DateTimeFilter<"Campaign"> | Date | string
    updatedAt?: DateTimeFilter<"Campaign"> | Date | string
    characters?: CharacterListRelationFilter
    campaignUsers?: CampaignUserListRelationFilter
    items?: ItemsListRelationFilter
    spells?: SpellsListRelationFilter
    levelingRules?: LevelingRuleListRelationFilter
    ItemTransactionHistory?: ItemTransactionHistoryListRelationFilter
  }

  export type CampaignOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    characters?: CharacterOrderByRelationAggregateInput
    campaignUsers?: CampaignUserOrderByRelationAggregateInput
    items?: ItemsOrderByRelationAggregateInput
    spells?: SpellsOrderByRelationAggregateInput
    levelingRules?: LevelingRuleOrderByRelationAggregateInput
    ItemTransactionHistory?: ItemTransactionHistoryOrderByRelationAggregateInput
  }

  export type CampaignWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: CampaignWhereInput | CampaignWhereInput[]
    OR?: CampaignWhereInput[]
    NOT?: CampaignWhereInput | CampaignWhereInput[]
    name?: StringFilter<"Campaign"> | string
    description?: StringFilter<"Campaign"> | string
    active?: BoolFilter<"Campaign"> | boolean
    createdAt?: DateTimeFilter<"Campaign"> | Date | string
    updatedAt?: DateTimeFilter<"Campaign"> | Date | string
    characters?: CharacterListRelationFilter
    campaignUsers?: CampaignUserListRelationFilter
    items?: ItemsListRelationFilter
    spells?: SpellsListRelationFilter
    levelingRules?: LevelingRuleListRelationFilter
    ItemTransactionHistory?: ItemTransactionHistoryListRelationFilter
  }, "id">

  export type CampaignOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CampaignCountOrderByAggregateInput
    _avg?: CampaignAvgOrderByAggregateInput
    _max?: CampaignMaxOrderByAggregateInput
    _min?: CampaignMinOrderByAggregateInput
    _sum?: CampaignSumOrderByAggregateInput
  }

  export type CampaignScalarWhereWithAggregatesInput = {
    AND?: CampaignScalarWhereWithAggregatesInput | CampaignScalarWhereWithAggregatesInput[]
    OR?: CampaignScalarWhereWithAggregatesInput[]
    NOT?: CampaignScalarWhereWithAggregatesInput | CampaignScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Campaign"> | bigint | number
    name?: StringWithAggregatesFilter<"Campaign"> | string
    description?: StringWithAggregatesFilter<"Campaign"> | string
    active?: BoolWithAggregatesFilter<"Campaign"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Campaign"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Campaign"> | Date | string
  }

  export type CampaignUserWhereInput = {
    AND?: CampaignUserWhereInput | CampaignUserWhereInput[]
    OR?: CampaignUserWhereInput[]
    NOT?: CampaignUserWhereInput | CampaignUserWhereInput[]
    id?: BigIntFilter<"CampaignUser"> | bigint | number
    userId?: BigIntFilter<"CampaignUser"> | bigint | number
    campaignId?: BigIntFilter<"CampaignUser"> | bigint | number
    role?: StringFilter<"CampaignUser"> | string
    createdAt?: DateTimeFilter<"CampaignUser"> | Date | string
    updatedAt?: DateTimeFilter<"CampaignUser"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
  }

  export type CampaignUserOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    campaignId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    campaign?: CampaignOrderByWithRelationInput
  }

  export type CampaignUserWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    userId_campaignId?: CampaignUserUserIdCampaignIdCompoundUniqueInput
    AND?: CampaignUserWhereInput | CampaignUserWhereInput[]
    OR?: CampaignUserWhereInput[]
    NOT?: CampaignUserWhereInput | CampaignUserWhereInput[]
    userId?: BigIntFilter<"CampaignUser"> | bigint | number
    campaignId?: BigIntFilter<"CampaignUser"> | bigint | number
    role?: StringFilter<"CampaignUser"> | string
    createdAt?: DateTimeFilter<"CampaignUser"> | Date | string
    updatedAt?: DateTimeFilter<"CampaignUser"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
  }, "id" | "userId_campaignId">

  export type CampaignUserOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    campaignId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CampaignUserCountOrderByAggregateInput
    _avg?: CampaignUserAvgOrderByAggregateInput
    _max?: CampaignUserMaxOrderByAggregateInput
    _min?: CampaignUserMinOrderByAggregateInput
    _sum?: CampaignUserSumOrderByAggregateInput
  }

  export type CampaignUserScalarWhereWithAggregatesInput = {
    AND?: CampaignUserScalarWhereWithAggregatesInput | CampaignUserScalarWhereWithAggregatesInput[]
    OR?: CampaignUserScalarWhereWithAggregatesInput[]
    NOT?: CampaignUserScalarWhereWithAggregatesInput | CampaignUserScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"CampaignUser"> | bigint | number
    userId?: BigIntWithAggregatesFilter<"CampaignUser"> | bigint | number
    campaignId?: BigIntWithAggregatesFilter<"CampaignUser"> | bigint | number
    role?: StringWithAggregatesFilter<"CampaignUser"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CampaignUser"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CampaignUser"> | Date | string
  }

  export type CharacterWhereInput = {
    AND?: CharacterWhereInput | CharacterWhereInput[]
    OR?: CharacterWhereInput[]
    NOT?: CharacterWhereInput | CharacterWhereInput[]
    id?: BigIntFilter<"Character"> | bigint | number
    userId?: BigIntFilter<"Character"> | bigint | number
    campaignId?: BigIntFilter<"Character"> | bigint | number
    name?: StringFilter<"Character"> | string
    avatar?: StringNullableFilter<"Character"> | string | null
    sheet?: JsonFilter<"Character">
    active?: BoolFilter<"Character"> | boolean
    createdAt?: DateTimeFilter<"Character"> | Date | string
    updatedAt?: DateTimeFilter<"Character"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
    inventory?: XOR<InventoryNullableScalarRelationFilter, InventoryWhereInput> | null
    equippedItems?: EquippedItemListRelationFilter
    equippedSpells?: EquippedSpellListRelationFilter
    battleHistory?: CharacterBattleHistoryListRelationFilter
  }

  export type CharacterOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    campaignId?: SortOrder
    name?: SortOrder
    avatar?: SortOrderInput | SortOrder
    sheet?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    campaign?: CampaignOrderByWithRelationInput
    inventory?: InventoryOrderByWithRelationInput
    equippedItems?: EquippedItemOrderByRelationAggregateInput
    equippedSpells?: EquippedSpellOrderByRelationAggregateInput
    battleHistory?: CharacterBattleHistoryOrderByRelationAggregateInput
  }

  export type CharacterWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: CharacterWhereInput | CharacterWhereInput[]
    OR?: CharacterWhereInput[]
    NOT?: CharacterWhereInput | CharacterWhereInput[]
    userId?: BigIntFilter<"Character"> | bigint | number
    campaignId?: BigIntFilter<"Character"> | bigint | number
    name?: StringFilter<"Character"> | string
    avatar?: StringNullableFilter<"Character"> | string | null
    sheet?: JsonFilter<"Character">
    active?: BoolFilter<"Character"> | boolean
    createdAt?: DateTimeFilter<"Character"> | Date | string
    updatedAt?: DateTimeFilter<"Character"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
    inventory?: XOR<InventoryNullableScalarRelationFilter, InventoryWhereInput> | null
    equippedItems?: EquippedItemListRelationFilter
    equippedSpells?: EquippedSpellListRelationFilter
    battleHistory?: CharacterBattleHistoryListRelationFilter
  }, "id">

  export type CharacterOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    campaignId?: SortOrder
    name?: SortOrder
    avatar?: SortOrderInput | SortOrder
    sheet?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CharacterCountOrderByAggregateInput
    _avg?: CharacterAvgOrderByAggregateInput
    _max?: CharacterMaxOrderByAggregateInput
    _min?: CharacterMinOrderByAggregateInput
    _sum?: CharacterSumOrderByAggregateInput
  }

  export type CharacterScalarWhereWithAggregatesInput = {
    AND?: CharacterScalarWhereWithAggregatesInput | CharacterScalarWhereWithAggregatesInput[]
    OR?: CharacterScalarWhereWithAggregatesInput[]
    NOT?: CharacterScalarWhereWithAggregatesInput | CharacterScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Character"> | bigint | number
    userId?: BigIntWithAggregatesFilter<"Character"> | bigint | number
    campaignId?: BigIntWithAggregatesFilter<"Character"> | bigint | number
    name?: StringWithAggregatesFilter<"Character"> | string
    avatar?: StringNullableWithAggregatesFilter<"Character"> | string | null
    sheet?: JsonWithAggregatesFilter<"Character">
    active?: BoolWithAggregatesFilter<"Character"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Character"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Character"> | Date | string
  }

  export type CurrencyWhereInput = {
    AND?: CurrencyWhereInput | CurrencyWhereInput[]
    OR?: CurrencyWhereInput[]
    NOT?: CurrencyWhereInput | CurrencyWhereInput[]
    id?: BigIntFilter<"Currency"> | bigint | number
    inventoryId?: BigIntFilter<"Currency"> | bigint | number
    name?: StringFilter<"Currency"> | string
    amount?: StringFilter<"Currency"> | string
    createdAt?: DateTimeFilter<"Currency"> | Date | string
    updatedAt?: DateTimeFilter<"Currency"> | Date | string
    inventory?: XOR<InventoryScalarRelationFilter, InventoryWhereInput>
  }

  export type CurrencyOrderByWithRelationInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    inventory?: InventoryOrderByWithRelationInput
  }

  export type CurrencyWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    inventoryId?: bigint | number
    AND?: CurrencyWhereInput | CurrencyWhereInput[]
    OR?: CurrencyWhereInput[]
    NOT?: CurrencyWhereInput | CurrencyWhereInput[]
    name?: StringFilter<"Currency"> | string
    amount?: StringFilter<"Currency"> | string
    createdAt?: DateTimeFilter<"Currency"> | Date | string
    updatedAt?: DateTimeFilter<"Currency"> | Date | string
    inventory?: XOR<InventoryScalarRelationFilter, InventoryWhereInput>
  }, "id" | "inventoryId">

  export type CurrencyOrderByWithAggregationInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CurrencyCountOrderByAggregateInput
    _avg?: CurrencyAvgOrderByAggregateInput
    _max?: CurrencyMaxOrderByAggregateInput
    _min?: CurrencyMinOrderByAggregateInput
    _sum?: CurrencySumOrderByAggregateInput
  }

  export type CurrencyScalarWhereWithAggregatesInput = {
    AND?: CurrencyScalarWhereWithAggregatesInput | CurrencyScalarWhereWithAggregatesInput[]
    OR?: CurrencyScalarWhereWithAggregatesInput[]
    NOT?: CurrencyScalarWhereWithAggregatesInput | CurrencyScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Currency"> | bigint | number
    inventoryId?: BigIntWithAggregatesFilter<"Currency"> | bigint | number
    name?: StringWithAggregatesFilter<"Currency"> | string
    amount?: StringWithAggregatesFilter<"Currency"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Currency"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Currency"> | Date | string
  }

  export type InventoryWhereInput = {
    AND?: InventoryWhereInput | InventoryWhereInput[]
    OR?: InventoryWhereInput[]
    NOT?: InventoryWhereInput | InventoryWhereInput[]
    id?: BigIntFilter<"Inventory"> | bigint | number
    characterId?: BigIntFilter<"Inventory"> | bigint | number
    createdAt?: DateTimeFilter<"Inventory"> | Date | string
    updatedAt?: DateTimeFilter<"Inventory"> | Date | string
    character?: XOR<CharacterScalarRelationFilter, CharacterWhereInput>
    inventoryItems?: InventoryItemListRelationFilter
    transactions?: ItemTransactionHistoryListRelationFilter
    Currency?: CurrencyListRelationFilter
  }

  export type InventoryOrderByWithRelationInput = {
    id?: SortOrder
    characterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    character?: CharacterOrderByWithRelationInput
    inventoryItems?: InventoryItemOrderByRelationAggregateInput
    transactions?: ItemTransactionHistoryOrderByRelationAggregateInput
    Currency?: CurrencyOrderByRelationAggregateInput
  }

  export type InventoryWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    characterId?: bigint | number
    AND?: InventoryWhereInput | InventoryWhereInput[]
    OR?: InventoryWhereInput[]
    NOT?: InventoryWhereInput | InventoryWhereInput[]
    createdAt?: DateTimeFilter<"Inventory"> | Date | string
    updatedAt?: DateTimeFilter<"Inventory"> | Date | string
    character?: XOR<CharacterScalarRelationFilter, CharacterWhereInput>
    inventoryItems?: InventoryItemListRelationFilter
    transactions?: ItemTransactionHistoryListRelationFilter
    Currency?: CurrencyListRelationFilter
  }, "id" | "characterId">

  export type InventoryOrderByWithAggregationInput = {
    id?: SortOrder
    characterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InventoryCountOrderByAggregateInput
    _avg?: InventoryAvgOrderByAggregateInput
    _max?: InventoryMaxOrderByAggregateInput
    _min?: InventoryMinOrderByAggregateInput
    _sum?: InventorySumOrderByAggregateInput
  }

  export type InventoryScalarWhereWithAggregatesInput = {
    AND?: InventoryScalarWhereWithAggregatesInput | InventoryScalarWhereWithAggregatesInput[]
    OR?: InventoryScalarWhereWithAggregatesInput[]
    NOT?: InventoryScalarWhereWithAggregatesInput | InventoryScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Inventory"> | bigint | number
    characterId?: BigIntWithAggregatesFilter<"Inventory"> | bigint | number
    createdAt?: DateTimeWithAggregatesFilter<"Inventory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Inventory"> | Date | string
  }

  export type InventoryItemWhereInput = {
    AND?: InventoryItemWhereInput | InventoryItemWhereInput[]
    OR?: InventoryItemWhereInput[]
    NOT?: InventoryItemWhereInput | InventoryItemWhereInput[]
    id?: BigIntFilter<"InventoryItem"> | bigint | number
    inventoryId?: BigIntFilter<"InventoryItem"> | bigint | number
    itemsId?: BigIntFilter<"InventoryItem"> | bigint | number
    createdAt?: DateTimeFilter<"InventoryItem"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryItem"> | Date | string
    inventory?: XOR<InventoryScalarRelationFilter, InventoryWhereInput>
    item?: XOR<ItemsScalarRelationFilter, ItemsWhereInput>
    equippedItem?: XOR<EquippedItemNullableScalarRelationFilter, EquippedItemWhereInput> | null
  }

  export type InventoryItemOrderByWithRelationInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    itemsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    inventory?: InventoryOrderByWithRelationInput
    item?: ItemsOrderByWithRelationInput
    equippedItem?: EquippedItemOrderByWithRelationInput
  }

  export type InventoryItemWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: InventoryItemWhereInput | InventoryItemWhereInput[]
    OR?: InventoryItemWhereInput[]
    NOT?: InventoryItemWhereInput | InventoryItemWhereInput[]
    inventoryId?: BigIntFilter<"InventoryItem"> | bigint | number
    itemsId?: BigIntFilter<"InventoryItem"> | bigint | number
    createdAt?: DateTimeFilter<"InventoryItem"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryItem"> | Date | string
    inventory?: XOR<InventoryScalarRelationFilter, InventoryWhereInput>
    item?: XOR<ItemsScalarRelationFilter, ItemsWhereInput>
    equippedItem?: XOR<EquippedItemNullableScalarRelationFilter, EquippedItemWhereInput> | null
  }, "id">

  export type InventoryItemOrderByWithAggregationInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    itemsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InventoryItemCountOrderByAggregateInput
    _avg?: InventoryItemAvgOrderByAggregateInput
    _max?: InventoryItemMaxOrderByAggregateInput
    _min?: InventoryItemMinOrderByAggregateInput
    _sum?: InventoryItemSumOrderByAggregateInput
  }

  export type InventoryItemScalarWhereWithAggregatesInput = {
    AND?: InventoryItemScalarWhereWithAggregatesInput | InventoryItemScalarWhereWithAggregatesInput[]
    OR?: InventoryItemScalarWhereWithAggregatesInput[]
    NOT?: InventoryItemScalarWhereWithAggregatesInput | InventoryItemScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"InventoryItem"> | bigint | number
    inventoryId?: BigIntWithAggregatesFilter<"InventoryItem"> | bigint | number
    itemsId?: BigIntWithAggregatesFilter<"InventoryItem"> | bigint | number
    createdAt?: DateTimeWithAggregatesFilter<"InventoryItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InventoryItem"> | Date | string
  }

  export type ItemsWhereInput = {
    AND?: ItemsWhereInput | ItemsWhereInput[]
    OR?: ItemsWhereInput[]
    NOT?: ItemsWhereInput | ItemsWhereInput[]
    id?: BigIntFilter<"Items"> | bigint | number
    campaignId?: BigIntFilter<"Items"> | bigint | number
    type?: StringFilter<"Items"> | string
    rarity?: StringFilter<"Items"> | string
    name?: StringFilter<"Items"> | string
    slot?: StringFilter<"Items"> | string
    attributes?: JsonFilter<"Items">
    createdAt?: DateTimeFilter<"Items"> | Date | string
    updatedAt?: DateTimeFilter<"Items"> | Date | string
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
    inventoryItems?: InventoryItemListRelationFilter
    transactionHistories?: ItemTransactionHistoryListRelationFilter
  }

  export type ItemsOrderByWithRelationInput = {
    id?: SortOrder
    campaignId?: SortOrder
    type?: SortOrder
    rarity?: SortOrder
    name?: SortOrder
    slot?: SortOrder
    attributes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    campaign?: CampaignOrderByWithRelationInput
    inventoryItems?: InventoryItemOrderByRelationAggregateInput
    transactionHistories?: ItemTransactionHistoryOrderByRelationAggregateInput
  }

  export type ItemsWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: ItemsWhereInput | ItemsWhereInput[]
    OR?: ItemsWhereInput[]
    NOT?: ItemsWhereInput | ItemsWhereInput[]
    campaignId?: BigIntFilter<"Items"> | bigint | number
    type?: StringFilter<"Items"> | string
    rarity?: StringFilter<"Items"> | string
    name?: StringFilter<"Items"> | string
    slot?: StringFilter<"Items"> | string
    attributes?: JsonFilter<"Items">
    createdAt?: DateTimeFilter<"Items"> | Date | string
    updatedAt?: DateTimeFilter<"Items"> | Date | string
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
    inventoryItems?: InventoryItemListRelationFilter
    transactionHistories?: ItemTransactionHistoryListRelationFilter
  }, "id">

  export type ItemsOrderByWithAggregationInput = {
    id?: SortOrder
    campaignId?: SortOrder
    type?: SortOrder
    rarity?: SortOrder
    name?: SortOrder
    slot?: SortOrder
    attributes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ItemsCountOrderByAggregateInput
    _avg?: ItemsAvgOrderByAggregateInput
    _max?: ItemsMaxOrderByAggregateInput
    _min?: ItemsMinOrderByAggregateInput
    _sum?: ItemsSumOrderByAggregateInput
  }

  export type ItemsScalarWhereWithAggregatesInput = {
    AND?: ItemsScalarWhereWithAggregatesInput | ItemsScalarWhereWithAggregatesInput[]
    OR?: ItemsScalarWhereWithAggregatesInput[]
    NOT?: ItemsScalarWhereWithAggregatesInput | ItemsScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Items"> | bigint | number
    campaignId?: BigIntWithAggregatesFilter<"Items"> | bigint | number
    type?: StringWithAggregatesFilter<"Items"> | string
    rarity?: StringWithAggregatesFilter<"Items"> | string
    name?: StringWithAggregatesFilter<"Items"> | string
    slot?: StringWithAggregatesFilter<"Items"> | string
    attributes?: JsonWithAggregatesFilter<"Items">
    createdAt?: DateTimeWithAggregatesFilter<"Items"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Items"> | Date | string
  }

  export type ItemTransactionHistoryWhereInput = {
    AND?: ItemTransactionHistoryWhereInput | ItemTransactionHistoryWhereInput[]
    OR?: ItemTransactionHistoryWhereInput[]
    NOT?: ItemTransactionHistoryWhereInput | ItemTransactionHistoryWhereInput[]
    id?: BigIntFilter<"ItemTransactionHistory"> | bigint | number
    campaignId?: BigIntFilter<"ItemTransactionHistory"> | bigint | number
    itemId?: BigIntFilter<"ItemTransactionHistory"> | bigint | number
    inventoryId?: BigIntFilter<"ItemTransactionHistory"> | bigint | number
    fromInventoryId?: BigIntNullableFilter<"ItemTransactionHistory"> | bigint | number | null
    transactionType?: StringFilter<"ItemTransactionHistory"> | string
    amount?: StringNullableFilter<"ItemTransactionHistory"> | string | null
    createdAt?: DateTimeFilter<"ItemTransactionHistory"> | Date | string
    updatedAt?: DateTimeFilter<"ItemTransactionHistory"> | Date | string
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
    item?: XOR<ItemsScalarRelationFilter, ItemsWhereInput>
    inventory?: XOR<InventoryScalarRelationFilter, InventoryWhereInput>
  }

  export type ItemTransactionHistoryOrderByWithRelationInput = {
    id?: SortOrder
    campaignId?: SortOrder
    itemId?: SortOrder
    inventoryId?: SortOrder
    fromInventoryId?: SortOrderInput | SortOrder
    transactionType?: SortOrder
    amount?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    campaign?: CampaignOrderByWithRelationInput
    item?: ItemsOrderByWithRelationInput
    inventory?: InventoryOrderByWithRelationInput
  }

  export type ItemTransactionHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: ItemTransactionHistoryWhereInput | ItemTransactionHistoryWhereInput[]
    OR?: ItemTransactionHistoryWhereInput[]
    NOT?: ItemTransactionHistoryWhereInput | ItemTransactionHistoryWhereInput[]
    campaignId?: BigIntFilter<"ItemTransactionHistory"> | bigint | number
    itemId?: BigIntFilter<"ItemTransactionHistory"> | bigint | number
    inventoryId?: BigIntFilter<"ItemTransactionHistory"> | bigint | number
    fromInventoryId?: BigIntNullableFilter<"ItemTransactionHistory"> | bigint | number | null
    transactionType?: StringFilter<"ItemTransactionHistory"> | string
    amount?: StringNullableFilter<"ItemTransactionHistory"> | string | null
    createdAt?: DateTimeFilter<"ItemTransactionHistory"> | Date | string
    updatedAt?: DateTimeFilter<"ItemTransactionHistory"> | Date | string
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
    item?: XOR<ItemsScalarRelationFilter, ItemsWhereInput>
    inventory?: XOR<InventoryScalarRelationFilter, InventoryWhereInput>
  }, "id">

  export type ItemTransactionHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    campaignId?: SortOrder
    itemId?: SortOrder
    inventoryId?: SortOrder
    fromInventoryId?: SortOrderInput | SortOrder
    transactionType?: SortOrder
    amount?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ItemTransactionHistoryCountOrderByAggregateInput
    _avg?: ItemTransactionHistoryAvgOrderByAggregateInput
    _max?: ItemTransactionHistoryMaxOrderByAggregateInput
    _min?: ItemTransactionHistoryMinOrderByAggregateInput
    _sum?: ItemTransactionHistorySumOrderByAggregateInput
  }

  export type ItemTransactionHistoryScalarWhereWithAggregatesInput = {
    AND?: ItemTransactionHistoryScalarWhereWithAggregatesInput | ItemTransactionHistoryScalarWhereWithAggregatesInput[]
    OR?: ItemTransactionHistoryScalarWhereWithAggregatesInput[]
    NOT?: ItemTransactionHistoryScalarWhereWithAggregatesInput | ItemTransactionHistoryScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"ItemTransactionHistory"> | bigint | number
    campaignId?: BigIntWithAggregatesFilter<"ItemTransactionHistory"> | bigint | number
    itemId?: BigIntWithAggregatesFilter<"ItemTransactionHistory"> | bigint | number
    inventoryId?: BigIntWithAggregatesFilter<"ItemTransactionHistory"> | bigint | number
    fromInventoryId?: BigIntNullableWithAggregatesFilter<"ItemTransactionHistory"> | bigint | number | null
    transactionType?: StringWithAggregatesFilter<"ItemTransactionHistory"> | string
    amount?: StringNullableWithAggregatesFilter<"ItemTransactionHistory"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ItemTransactionHistory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ItemTransactionHistory"> | Date | string
  }

  export type EquippedItemWhereInput = {
    AND?: EquippedItemWhereInput | EquippedItemWhereInput[]
    OR?: EquippedItemWhereInput[]
    NOT?: EquippedItemWhereInput | EquippedItemWhereInput[]
    id?: BigIntFilter<"EquippedItem"> | bigint | number
    characterId?: BigIntFilter<"EquippedItem"> | bigint | number
    inventoryItemId?: BigIntFilter<"EquippedItem"> | bigint | number
    slot?: StringFilter<"EquippedItem"> | string
    createdAt?: DateTimeFilter<"EquippedItem"> | Date | string
    updatedAt?: DateTimeFilter<"EquippedItem"> | Date | string
    character?: XOR<CharacterScalarRelationFilter, CharacterWhereInput>
    inventoryItem?: XOR<InventoryItemScalarRelationFilter, InventoryItemWhereInput>
  }

  export type EquippedItemOrderByWithRelationInput = {
    id?: SortOrder
    characterId?: SortOrder
    inventoryItemId?: SortOrder
    slot?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    character?: CharacterOrderByWithRelationInput
    inventoryItem?: InventoryItemOrderByWithRelationInput
  }

  export type EquippedItemWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    inventoryItemId?: bigint | number
    AND?: EquippedItemWhereInput | EquippedItemWhereInput[]
    OR?: EquippedItemWhereInput[]
    NOT?: EquippedItemWhereInput | EquippedItemWhereInput[]
    characterId?: BigIntFilter<"EquippedItem"> | bigint | number
    slot?: StringFilter<"EquippedItem"> | string
    createdAt?: DateTimeFilter<"EquippedItem"> | Date | string
    updatedAt?: DateTimeFilter<"EquippedItem"> | Date | string
    character?: XOR<CharacterScalarRelationFilter, CharacterWhereInput>
    inventoryItem?: XOR<InventoryItemScalarRelationFilter, InventoryItemWhereInput>
  }, "id" | "inventoryItemId">

  export type EquippedItemOrderByWithAggregationInput = {
    id?: SortOrder
    characterId?: SortOrder
    inventoryItemId?: SortOrder
    slot?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EquippedItemCountOrderByAggregateInput
    _avg?: EquippedItemAvgOrderByAggregateInput
    _max?: EquippedItemMaxOrderByAggregateInput
    _min?: EquippedItemMinOrderByAggregateInput
    _sum?: EquippedItemSumOrderByAggregateInput
  }

  export type EquippedItemScalarWhereWithAggregatesInput = {
    AND?: EquippedItemScalarWhereWithAggregatesInput | EquippedItemScalarWhereWithAggregatesInput[]
    OR?: EquippedItemScalarWhereWithAggregatesInput[]
    NOT?: EquippedItemScalarWhereWithAggregatesInput | EquippedItemScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"EquippedItem"> | bigint | number
    characterId?: BigIntWithAggregatesFilter<"EquippedItem"> | bigint | number
    inventoryItemId?: BigIntWithAggregatesFilter<"EquippedItem"> | bigint | number
    slot?: StringWithAggregatesFilter<"EquippedItem"> | string
    createdAt?: DateTimeWithAggregatesFilter<"EquippedItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EquippedItem"> | Date | string
  }

  export type SpellsWhereInput = {
    AND?: SpellsWhereInput | SpellsWhereInput[]
    OR?: SpellsWhereInput[]
    NOT?: SpellsWhereInput | SpellsWhereInput[]
    id?: BigIntFilter<"Spells"> | bigint | number
    campaignId?: BigIntFilter<"Spells"> | bigint | number
    name?: StringFilter<"Spells"> | string
    type?: StringFilter<"Spells"> | string
    description?: StringNullableFilter<"Spells"> | string | null
    specifications?: JsonFilter<"Spells">
    createdAt?: DateTimeFilter<"Spells"> | Date | string
    updatedAt?: DateTimeFilter<"Spells"> | Date | string
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
    equippedSpells?: EquippedSpellListRelationFilter
  }

  export type SpellsOrderByWithRelationInput = {
    id?: SortOrder
    campaignId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    specifications?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    campaign?: CampaignOrderByWithRelationInput
    equippedSpells?: EquippedSpellOrderByRelationAggregateInput
  }

  export type SpellsWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: SpellsWhereInput | SpellsWhereInput[]
    OR?: SpellsWhereInput[]
    NOT?: SpellsWhereInput | SpellsWhereInput[]
    campaignId?: BigIntFilter<"Spells"> | bigint | number
    name?: StringFilter<"Spells"> | string
    type?: StringFilter<"Spells"> | string
    description?: StringNullableFilter<"Spells"> | string | null
    specifications?: JsonFilter<"Spells">
    createdAt?: DateTimeFilter<"Spells"> | Date | string
    updatedAt?: DateTimeFilter<"Spells"> | Date | string
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
    equippedSpells?: EquippedSpellListRelationFilter
  }, "id">

  export type SpellsOrderByWithAggregationInput = {
    id?: SortOrder
    campaignId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    specifications?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SpellsCountOrderByAggregateInput
    _avg?: SpellsAvgOrderByAggregateInput
    _max?: SpellsMaxOrderByAggregateInput
    _min?: SpellsMinOrderByAggregateInput
    _sum?: SpellsSumOrderByAggregateInput
  }

  export type SpellsScalarWhereWithAggregatesInput = {
    AND?: SpellsScalarWhereWithAggregatesInput | SpellsScalarWhereWithAggregatesInput[]
    OR?: SpellsScalarWhereWithAggregatesInput[]
    NOT?: SpellsScalarWhereWithAggregatesInput | SpellsScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Spells"> | bigint | number
    campaignId?: BigIntWithAggregatesFilter<"Spells"> | bigint | number
    name?: StringWithAggregatesFilter<"Spells"> | string
    type?: StringWithAggregatesFilter<"Spells"> | string
    description?: StringNullableWithAggregatesFilter<"Spells"> | string | null
    specifications?: JsonWithAggregatesFilter<"Spells">
    createdAt?: DateTimeWithAggregatesFilter<"Spells"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Spells"> | Date | string
  }

  export type EquippedSpellWhereInput = {
    AND?: EquippedSpellWhereInput | EquippedSpellWhereInput[]
    OR?: EquippedSpellWhereInput[]
    NOT?: EquippedSpellWhereInput | EquippedSpellWhereInput[]
    id?: BigIntFilter<"EquippedSpell"> | bigint | number
    characterId?: BigIntFilter<"EquippedSpell"> | bigint | number
    spellId?: BigIntFilter<"EquippedSpell"> | bigint | number
    createdAt?: DateTimeFilter<"EquippedSpell"> | Date | string
    updatedAt?: DateTimeFilter<"EquippedSpell"> | Date | string
    character?: XOR<CharacterScalarRelationFilter, CharacterWhereInput>
    spell?: XOR<SpellsScalarRelationFilter, SpellsWhereInput>
  }

  export type EquippedSpellOrderByWithRelationInput = {
    id?: SortOrder
    characterId?: SortOrder
    spellId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    character?: CharacterOrderByWithRelationInput
    spell?: SpellsOrderByWithRelationInput
  }

  export type EquippedSpellWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: EquippedSpellWhereInput | EquippedSpellWhereInput[]
    OR?: EquippedSpellWhereInput[]
    NOT?: EquippedSpellWhereInput | EquippedSpellWhereInput[]
    characterId?: BigIntFilter<"EquippedSpell"> | bigint | number
    spellId?: BigIntFilter<"EquippedSpell"> | bigint | number
    createdAt?: DateTimeFilter<"EquippedSpell"> | Date | string
    updatedAt?: DateTimeFilter<"EquippedSpell"> | Date | string
    character?: XOR<CharacterScalarRelationFilter, CharacterWhereInput>
    spell?: XOR<SpellsScalarRelationFilter, SpellsWhereInput>
  }, "id">

  export type EquippedSpellOrderByWithAggregationInput = {
    id?: SortOrder
    characterId?: SortOrder
    spellId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EquippedSpellCountOrderByAggregateInput
    _avg?: EquippedSpellAvgOrderByAggregateInput
    _max?: EquippedSpellMaxOrderByAggregateInput
    _min?: EquippedSpellMinOrderByAggregateInput
    _sum?: EquippedSpellSumOrderByAggregateInput
  }

  export type EquippedSpellScalarWhereWithAggregatesInput = {
    AND?: EquippedSpellScalarWhereWithAggregatesInput | EquippedSpellScalarWhereWithAggregatesInput[]
    OR?: EquippedSpellScalarWhereWithAggregatesInput[]
    NOT?: EquippedSpellScalarWhereWithAggregatesInput | EquippedSpellScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"EquippedSpell"> | bigint | number
    characterId?: BigIntWithAggregatesFilter<"EquippedSpell"> | bigint | number
    spellId?: BigIntWithAggregatesFilter<"EquippedSpell"> | bigint | number
    createdAt?: DateTimeWithAggregatesFilter<"EquippedSpell"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EquippedSpell"> | Date | string
  }

  export type CharacterBattleHistoryWhereInput = {
    AND?: CharacterBattleHistoryWhereInput | CharacterBattleHistoryWhereInput[]
    OR?: CharacterBattleHistoryWhereInput[]
    NOT?: CharacterBattleHistoryWhereInput | CharacterBattleHistoryWhereInput[]
    id?: BigIntFilter<"CharacterBattleHistory"> | bigint | number
    characterId?: BigIntFilter<"CharacterBattleHistory"> | bigint | number
    sourceType?: StringFilter<"CharacterBattleHistory"> | string
    description?: StringNullableFilter<"CharacterBattleHistory"> | string | null
    xpGained?: IntFilter<"CharacterBattleHistory"> | number
    createdAt?: DateTimeFilter<"CharacterBattleHistory"> | Date | string
    updatedAt?: DateTimeFilter<"CharacterBattleHistory"> | Date | string
    character?: XOR<CharacterScalarRelationFilter, CharacterWhereInput>
  }

  export type CharacterBattleHistoryOrderByWithRelationInput = {
    id?: SortOrder
    characterId?: SortOrder
    sourceType?: SortOrder
    description?: SortOrderInput | SortOrder
    xpGained?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    character?: CharacterOrderByWithRelationInput
  }

  export type CharacterBattleHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: CharacterBattleHistoryWhereInput | CharacterBattleHistoryWhereInput[]
    OR?: CharacterBattleHistoryWhereInput[]
    NOT?: CharacterBattleHistoryWhereInput | CharacterBattleHistoryWhereInput[]
    characterId?: BigIntFilter<"CharacterBattleHistory"> | bigint | number
    sourceType?: StringFilter<"CharacterBattleHistory"> | string
    description?: StringNullableFilter<"CharacterBattleHistory"> | string | null
    xpGained?: IntFilter<"CharacterBattleHistory"> | number
    createdAt?: DateTimeFilter<"CharacterBattleHistory"> | Date | string
    updatedAt?: DateTimeFilter<"CharacterBattleHistory"> | Date | string
    character?: XOR<CharacterScalarRelationFilter, CharacterWhereInput>
  }, "id">

  export type CharacterBattleHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    characterId?: SortOrder
    sourceType?: SortOrder
    description?: SortOrderInput | SortOrder
    xpGained?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CharacterBattleHistoryCountOrderByAggregateInput
    _avg?: CharacterBattleHistoryAvgOrderByAggregateInput
    _max?: CharacterBattleHistoryMaxOrderByAggregateInput
    _min?: CharacterBattleHistoryMinOrderByAggregateInput
    _sum?: CharacterBattleHistorySumOrderByAggregateInput
  }

  export type CharacterBattleHistoryScalarWhereWithAggregatesInput = {
    AND?: CharacterBattleHistoryScalarWhereWithAggregatesInput | CharacterBattleHistoryScalarWhereWithAggregatesInput[]
    OR?: CharacterBattleHistoryScalarWhereWithAggregatesInput[]
    NOT?: CharacterBattleHistoryScalarWhereWithAggregatesInput | CharacterBattleHistoryScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"CharacterBattleHistory"> | bigint | number
    characterId?: BigIntWithAggregatesFilter<"CharacterBattleHistory"> | bigint | number
    sourceType?: StringWithAggregatesFilter<"CharacterBattleHistory"> | string
    description?: StringNullableWithAggregatesFilter<"CharacterBattleHistory"> | string | null
    xpGained?: IntWithAggregatesFilter<"CharacterBattleHistory"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CharacterBattleHistory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CharacterBattleHistory"> | Date | string
  }

  export type LevelingRuleWhereInput = {
    AND?: LevelingRuleWhereInput | LevelingRuleWhereInput[]
    OR?: LevelingRuleWhereInput[]
    NOT?: LevelingRuleWhereInput | LevelingRuleWhereInput[]
    id?: BigIntFilter<"LevelingRule"> | bigint | number
    campaignId?: BigIntFilter<"LevelingRule"> | bigint | number
    level?: BigIntFilter<"LevelingRule"> | bigint | number
    requiredXp?: BigIntFilter<"LevelingRule"> | bigint | number
    createdAt?: DateTimeFilter<"LevelingRule"> | Date | string
    updatedAt?: DateTimeFilter<"LevelingRule"> | Date | string
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
  }

  export type LevelingRuleOrderByWithRelationInput = {
    id?: SortOrder
    campaignId?: SortOrder
    level?: SortOrder
    requiredXp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    campaign?: CampaignOrderByWithRelationInput
  }

  export type LevelingRuleWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: LevelingRuleWhereInput | LevelingRuleWhereInput[]
    OR?: LevelingRuleWhereInput[]
    NOT?: LevelingRuleWhereInput | LevelingRuleWhereInput[]
    campaignId?: BigIntFilter<"LevelingRule"> | bigint | number
    level?: BigIntFilter<"LevelingRule"> | bigint | number
    requiredXp?: BigIntFilter<"LevelingRule"> | bigint | number
    createdAt?: DateTimeFilter<"LevelingRule"> | Date | string
    updatedAt?: DateTimeFilter<"LevelingRule"> | Date | string
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
  }, "id">

  export type LevelingRuleOrderByWithAggregationInput = {
    id?: SortOrder
    campaignId?: SortOrder
    level?: SortOrder
    requiredXp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LevelingRuleCountOrderByAggregateInput
    _avg?: LevelingRuleAvgOrderByAggregateInput
    _max?: LevelingRuleMaxOrderByAggregateInput
    _min?: LevelingRuleMinOrderByAggregateInput
    _sum?: LevelingRuleSumOrderByAggregateInput
  }

  export type LevelingRuleScalarWhereWithAggregatesInput = {
    AND?: LevelingRuleScalarWhereWithAggregatesInput | LevelingRuleScalarWhereWithAggregatesInput[]
    OR?: LevelingRuleScalarWhereWithAggregatesInput[]
    NOT?: LevelingRuleScalarWhereWithAggregatesInput | LevelingRuleScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"LevelingRule"> | bigint | number
    campaignId?: BigIntWithAggregatesFilter<"LevelingRule"> | bigint | number
    level?: BigIntWithAggregatesFilter<"LevelingRule"> | bigint | number
    requiredXp?: BigIntWithAggregatesFilter<"LevelingRule"> | bigint | number
    createdAt?: DateTimeWithAggregatesFilter<"LevelingRule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LevelingRule"> | Date | string
  }

  export type UserCreateInput = {
    id?: bigint | number
    name: string
    password: string
    email: string
    avatar?: string | null
    type: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutUserInput
    campaignUsers?: CampaignUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: bigint | number
    name: string
    password: string
    email: string
    avatar?: string | null
    type: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutUserInput
    campaignUsers?: CampaignUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutUserNestedInput
    campaignUsers?: CampaignUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutUserNestedInput
    campaignUsers?: CampaignUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: bigint | number
    name: string
    password: string
    email: string
    avatar?: string | null
    type: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignCreateInput = {
    id?: bigint | number
    name: string
    description: string
    active: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCampaignInput
    campaignUsers?: CampaignUserCreateNestedManyWithoutCampaignInput
    items?: ItemsCreateNestedManyWithoutCampaignInput
    spells?: SpellsCreateNestedManyWithoutCampaignInput
    levelingRules?: LevelingRuleCreateNestedManyWithoutCampaignInput
    ItemTransactionHistory?: ItemTransactionHistoryCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateInput = {
    id?: bigint | number
    name: string
    description: string
    active: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCampaignInput
    campaignUsers?: CampaignUserUncheckedCreateNestedManyWithoutCampaignInput
    items?: ItemsUncheckedCreateNestedManyWithoutCampaignInput
    spells?: SpellsUncheckedCreateNestedManyWithoutCampaignInput
    levelingRules?: LevelingRuleUncheckedCreateNestedManyWithoutCampaignInput
    ItemTransactionHistory?: ItemTransactionHistoryUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCampaignNestedInput
    campaignUsers?: CampaignUserUpdateManyWithoutCampaignNestedInput
    items?: ItemsUpdateManyWithoutCampaignNestedInput
    spells?: SpellsUpdateManyWithoutCampaignNestedInput
    levelingRules?: LevelingRuleUpdateManyWithoutCampaignNestedInput
    ItemTransactionHistory?: ItemTransactionHistoryUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCampaignNestedInput
    campaignUsers?: CampaignUserUncheckedUpdateManyWithoutCampaignNestedInput
    items?: ItemsUncheckedUpdateManyWithoutCampaignNestedInput
    spells?: SpellsUncheckedUpdateManyWithoutCampaignNestedInput
    levelingRules?: LevelingRuleUncheckedUpdateManyWithoutCampaignNestedInput
    ItemTransactionHistory?: ItemTransactionHistoryUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignCreateManyInput = {
    id?: bigint | number
    name: string
    description: string
    active: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CampaignUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignUserCreateInput = {
    id?: bigint | number
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCampaignUsersInput
    campaign: CampaignCreateNestedOneWithoutCampaignUsersInput
  }

  export type CampaignUserUncheckedCreateInput = {
    id?: bigint | number
    userId: bigint | number
    campaignId: bigint | number
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CampaignUserUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCampaignUsersNestedInput
    campaign?: CampaignUpdateOneRequiredWithoutCampaignUsersNestedInput
  }

  export type CampaignUserUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignUserCreateManyInput = {
    id?: bigint | number
    userId: bigint | number
    campaignId: bigint | number
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CampaignUserUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignUserUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterCreateInput = {
    id?: bigint | number
    name: string
    avatar?: string | null
    sheet: JsonNullValueInput | InputJsonValue
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCharactersInput
    campaign: CampaignCreateNestedOneWithoutCharactersInput
    inventory?: InventoryCreateNestedOneWithoutCharacterInput
    equippedItems?: EquippedItemCreateNestedManyWithoutCharacterInput
    equippedSpells?: EquippedSpellCreateNestedManyWithoutCharacterInput
    battleHistory?: CharacterBattleHistoryCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateInput = {
    id?: bigint | number
    userId: bigint | number
    campaignId: bigint | number
    name: string
    avatar?: string | null
    sheet: JsonNullValueInput | InputJsonValue
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    inventory?: InventoryUncheckedCreateNestedOneWithoutCharacterInput
    equippedItems?: EquippedItemUncheckedCreateNestedManyWithoutCharacterInput
    equippedSpells?: EquippedSpellUncheckedCreateNestedManyWithoutCharacterInput
    battleHistory?: CharacterBattleHistoryUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sheet?: JsonNullValueInput | InputJsonValue
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCharactersNestedInput
    campaign?: CampaignUpdateOneRequiredWithoutCharactersNestedInput
    inventory?: InventoryUpdateOneWithoutCharacterNestedInput
    equippedItems?: EquippedItemUpdateManyWithoutCharacterNestedInput
    equippedSpells?: EquippedSpellUpdateManyWithoutCharacterNestedInput
    battleHistory?: CharacterBattleHistoryUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sheet?: JsonNullValueInput | InputJsonValue
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: InventoryUncheckedUpdateOneWithoutCharacterNestedInput
    equippedItems?: EquippedItemUncheckedUpdateManyWithoutCharacterNestedInput
    equippedSpells?: EquippedSpellUncheckedUpdateManyWithoutCharacterNestedInput
    battleHistory?: CharacterBattleHistoryUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterCreateManyInput = {
    id?: bigint | number
    userId: bigint | number
    campaignId: bigint | number
    name: string
    avatar?: string | null
    sheet: JsonNullValueInput | InputJsonValue
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sheet?: JsonNullValueInput | InputJsonValue
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sheet?: JsonNullValueInput | InputJsonValue
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrencyCreateInput = {
    id?: bigint | number
    name: string
    amount: string
    createdAt?: Date | string
    updatedAt?: Date | string
    inventory: InventoryCreateNestedOneWithoutCurrencyInput
  }

  export type CurrencyUncheckedCreateInput = {
    id?: bigint | number
    inventoryId: bigint | number
    name: string
    amount: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrencyUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: InventoryUpdateOneRequiredWithoutCurrencyNestedInput
  }

  export type CurrencyUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    inventoryId?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrencyCreateManyInput = {
    id?: bigint | number
    inventoryId: bigint | number
    name: string
    amount: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrencyUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrencyUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    inventoryId?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryCreateInput = {
    id?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    character: CharacterCreateNestedOneWithoutInventoryInput
    inventoryItems?: InventoryItemCreateNestedManyWithoutInventoryInput
    transactions?: ItemTransactionHistoryCreateNestedManyWithoutInventoryInput
    Currency?: CurrencyCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUncheckedCreateInput = {
    id?: bigint | number
    characterId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    inventoryItems?: InventoryItemUncheckedCreateNestedManyWithoutInventoryInput
    transactions?: ItemTransactionHistoryUncheckedCreateNestedManyWithoutInventoryInput
    Currency?: CurrencyUncheckedCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character?: CharacterUpdateOneRequiredWithoutInventoryNestedInput
    inventoryItems?: InventoryItemUpdateManyWithoutInventoryNestedInput
    transactions?: ItemTransactionHistoryUpdateManyWithoutInventoryNestedInput
    Currency?: CurrencyUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    characterId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventoryItems?: InventoryItemUncheckedUpdateManyWithoutInventoryNestedInput
    transactions?: ItemTransactionHistoryUncheckedUpdateManyWithoutInventoryNestedInput
    Currency?: CurrencyUncheckedUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryCreateManyInput = {
    id?: bigint | number
    characterId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    characterId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemCreateInput = {
    id?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    inventory: InventoryCreateNestedOneWithoutInventoryItemsInput
    item: ItemsCreateNestedOneWithoutInventoryItemsInput
    equippedItem?: EquippedItemCreateNestedOneWithoutInventoryItemInput
  }

  export type InventoryItemUncheckedCreateInput = {
    id?: bigint | number
    inventoryId: bigint | number
    itemsId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    equippedItem?: EquippedItemUncheckedCreateNestedOneWithoutInventoryItemInput
  }

  export type InventoryItemUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: InventoryUpdateOneRequiredWithoutInventoryItemsNestedInput
    item?: ItemsUpdateOneRequiredWithoutInventoryItemsNestedInput
    equippedItem?: EquippedItemUpdateOneWithoutInventoryItemNestedInput
  }

  export type InventoryItemUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    inventoryId?: BigIntFieldUpdateOperationsInput | bigint | number
    itemsId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equippedItem?: EquippedItemUncheckedUpdateOneWithoutInventoryItemNestedInput
  }

  export type InventoryItemCreateManyInput = {
    id?: bigint | number
    inventoryId: bigint | number
    itemsId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryItemUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    inventoryId?: BigIntFieldUpdateOperationsInput | bigint | number
    itemsId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemsCreateInput = {
    id?: bigint | number
    type: string
    rarity: string
    name: string
    slot: string
    attributes: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutItemsInput
    inventoryItems?: InventoryItemCreateNestedManyWithoutItemInput
    transactionHistories?: ItemTransactionHistoryCreateNestedManyWithoutItemInput
  }

  export type ItemsUncheckedCreateInput = {
    id?: bigint | number
    campaignId: bigint | number
    type: string
    rarity: string
    name: string
    slot: string
    attributes: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    inventoryItems?: InventoryItemUncheckedCreateNestedManyWithoutItemInput
    transactionHistories?: ItemTransactionHistoryUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemsUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    rarity?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slot?: StringFieldUpdateOperationsInput | string
    attributes?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutItemsNestedInput
    inventoryItems?: InventoryItemUpdateManyWithoutItemNestedInput
    transactionHistories?: ItemTransactionHistoryUpdateManyWithoutItemNestedInput
  }

  export type ItemsUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    rarity?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slot?: StringFieldUpdateOperationsInput | string
    attributes?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventoryItems?: InventoryItemUncheckedUpdateManyWithoutItemNestedInput
    transactionHistories?: ItemTransactionHistoryUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemsCreateManyInput = {
    id?: bigint | number
    campaignId: bigint | number
    type: string
    rarity: string
    name: string
    slot: string
    attributes: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemsUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    rarity?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slot?: StringFieldUpdateOperationsInput | string
    attributes?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemsUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    rarity?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slot?: StringFieldUpdateOperationsInput | string
    attributes?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemTransactionHistoryCreateInput = {
    id?: bigint | number
    fromInventoryId?: bigint | number | null
    transactionType: string
    amount?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutItemTransactionHistoryInput
    item: ItemsCreateNestedOneWithoutTransactionHistoriesInput
    inventory: InventoryCreateNestedOneWithoutTransactionsInput
  }

  export type ItemTransactionHistoryUncheckedCreateInput = {
    id?: bigint | number
    campaignId: bigint | number
    itemId: bigint | number
    inventoryId: bigint | number
    fromInventoryId?: bigint | number | null
    transactionType: string
    amount?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemTransactionHistoryUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    fromInventoryId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    transactionType?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutItemTransactionHistoryNestedInput
    item?: ItemsUpdateOneRequiredWithoutTransactionHistoriesNestedInput
    inventory?: InventoryUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type ItemTransactionHistoryUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    itemId?: BigIntFieldUpdateOperationsInput | bigint | number
    inventoryId?: BigIntFieldUpdateOperationsInput | bigint | number
    fromInventoryId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    transactionType?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemTransactionHistoryCreateManyInput = {
    id?: bigint | number
    campaignId: bigint | number
    itemId: bigint | number
    inventoryId: bigint | number
    fromInventoryId?: bigint | number | null
    transactionType: string
    amount?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemTransactionHistoryUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    fromInventoryId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    transactionType?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemTransactionHistoryUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    itemId?: BigIntFieldUpdateOperationsInput | bigint | number
    inventoryId?: BigIntFieldUpdateOperationsInput | bigint | number
    fromInventoryId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    transactionType?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquippedItemCreateInput = {
    id?: bigint | number
    slot: string
    createdAt?: Date | string
    updatedAt?: Date | string
    character: CharacterCreateNestedOneWithoutEquippedItemsInput
    inventoryItem: InventoryItemCreateNestedOneWithoutEquippedItemInput
  }

  export type EquippedItemUncheckedCreateInput = {
    id?: bigint | number
    characterId: bigint | number
    inventoryItemId: bigint | number
    slot: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquippedItemUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    slot?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character?: CharacterUpdateOneRequiredWithoutEquippedItemsNestedInput
    inventoryItem?: InventoryItemUpdateOneRequiredWithoutEquippedItemNestedInput
  }

  export type EquippedItemUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    characterId?: BigIntFieldUpdateOperationsInput | bigint | number
    inventoryItemId?: BigIntFieldUpdateOperationsInput | bigint | number
    slot?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquippedItemCreateManyInput = {
    id?: bigint | number
    characterId: bigint | number
    inventoryItemId: bigint | number
    slot: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquippedItemUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    slot?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquippedItemUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    characterId?: BigIntFieldUpdateOperationsInput | bigint | number
    inventoryItemId?: BigIntFieldUpdateOperationsInput | bigint | number
    slot?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpellsCreateInput = {
    id?: bigint | number
    name: string
    type: string
    description?: string | null
    specifications: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutSpellsInput
    equippedSpells?: EquippedSpellCreateNestedManyWithoutSpellInput
  }

  export type SpellsUncheckedCreateInput = {
    id?: bigint | number
    campaignId: bigint | number
    name: string
    type: string
    description?: string | null
    specifications: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    equippedSpells?: EquippedSpellUncheckedCreateNestedManyWithoutSpellInput
  }

  export type SpellsUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutSpellsNestedInput
    equippedSpells?: EquippedSpellUpdateManyWithoutSpellNestedInput
  }

  export type SpellsUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equippedSpells?: EquippedSpellUncheckedUpdateManyWithoutSpellNestedInput
  }

  export type SpellsCreateManyInput = {
    id?: bigint | number
    campaignId: bigint | number
    name: string
    type: string
    description?: string | null
    specifications: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SpellsUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpellsUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquippedSpellCreateInput = {
    id?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    character: CharacterCreateNestedOneWithoutEquippedSpellsInput
    spell: SpellsCreateNestedOneWithoutEquippedSpellsInput
  }

  export type EquippedSpellUncheckedCreateInput = {
    id?: bigint | number
    characterId: bigint | number
    spellId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquippedSpellUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character?: CharacterUpdateOneRequiredWithoutEquippedSpellsNestedInput
    spell?: SpellsUpdateOneRequiredWithoutEquippedSpellsNestedInput
  }

  export type EquippedSpellUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    characterId?: BigIntFieldUpdateOperationsInput | bigint | number
    spellId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquippedSpellCreateManyInput = {
    id?: bigint | number
    characterId: bigint | number
    spellId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquippedSpellUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquippedSpellUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    characterId?: BigIntFieldUpdateOperationsInput | bigint | number
    spellId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterBattleHistoryCreateInput = {
    id?: bigint | number
    sourceType: string
    description?: string | null
    xpGained: number
    createdAt?: Date | string
    updatedAt?: Date | string
    character: CharacterCreateNestedOneWithoutBattleHistoryInput
  }

  export type CharacterBattleHistoryUncheckedCreateInput = {
    id?: bigint | number
    characterId: bigint | number
    sourceType: string
    description?: string | null
    xpGained: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterBattleHistoryUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    sourceType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    xpGained?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character?: CharacterUpdateOneRequiredWithoutBattleHistoryNestedInput
  }

  export type CharacterBattleHistoryUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    characterId?: BigIntFieldUpdateOperationsInput | bigint | number
    sourceType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    xpGained?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterBattleHistoryCreateManyInput = {
    id?: bigint | number
    characterId: bigint | number
    sourceType: string
    description?: string | null
    xpGained: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterBattleHistoryUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    sourceType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    xpGained?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterBattleHistoryUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    characterId?: BigIntFieldUpdateOperationsInput | bigint | number
    sourceType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    xpGained?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LevelingRuleCreateInput = {
    id?: bigint | number
    level: bigint | number
    requiredXp: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutLevelingRulesInput
  }

  export type LevelingRuleUncheckedCreateInput = {
    id?: bigint | number
    campaignId: bigint | number
    level: bigint | number
    requiredXp: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LevelingRuleUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    level?: BigIntFieldUpdateOperationsInput | bigint | number
    requiredXp?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutLevelingRulesNestedInput
  }

  export type LevelingRuleUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    level?: BigIntFieldUpdateOperationsInput | bigint | number
    requiredXp?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LevelingRuleCreateManyInput = {
    id?: bigint | number
    campaignId: bigint | number
    level: bigint | number
    requiredXp: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LevelingRuleUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    level?: BigIntFieldUpdateOperationsInput | bigint | number
    requiredXp?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LevelingRuleUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    level?: BigIntFieldUpdateOperationsInput | bigint | number
    requiredXp?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CharacterListRelationFilter = {
    every?: CharacterWhereInput
    some?: CharacterWhereInput
    none?: CharacterWhereInput
  }

  export type CampaignUserListRelationFilter = {
    every?: CampaignUserWhereInput
    some?: CampaignUserWhereInput
    none?: CampaignUserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CharacterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CampaignUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    avatar?: SortOrder
    type?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    avatar?: SortOrder
    type?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    avatar?: SortOrder
    type?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ItemsListRelationFilter = {
    every?: ItemsWhereInput
    some?: ItemsWhereInput
    none?: ItemsWhereInput
  }

  export type SpellsListRelationFilter = {
    every?: SpellsWhereInput
    some?: SpellsWhereInput
    none?: SpellsWhereInput
  }

  export type LevelingRuleListRelationFilter = {
    every?: LevelingRuleWhereInput
    some?: LevelingRuleWhereInput
    none?: LevelingRuleWhereInput
  }

  export type ItemTransactionHistoryListRelationFilter = {
    every?: ItemTransactionHistoryWhereInput
    some?: ItemTransactionHistoryWhereInput
    none?: ItemTransactionHistoryWhereInput
  }

  export type ItemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpellsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LevelingRuleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ItemTransactionHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CampaignCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CampaignAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CampaignMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CampaignMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CampaignSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CampaignScalarRelationFilter = {
    is?: CampaignWhereInput
    isNot?: CampaignWhereInput
  }

  export type CampaignUserUserIdCampaignIdCompoundUniqueInput = {
    userId: bigint | number
    campaignId: bigint | number
  }

  export type CampaignUserCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    campaignId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CampaignUserAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    campaignId?: SortOrder
  }

  export type CampaignUserMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    campaignId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CampaignUserMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    campaignId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CampaignUserSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    campaignId?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type InventoryNullableScalarRelationFilter = {
    is?: InventoryWhereInput | null
    isNot?: InventoryWhereInput | null
  }

  export type EquippedItemListRelationFilter = {
    every?: EquippedItemWhereInput
    some?: EquippedItemWhereInput
    none?: EquippedItemWhereInput
  }

  export type EquippedSpellListRelationFilter = {
    every?: EquippedSpellWhereInput
    some?: EquippedSpellWhereInput
    none?: EquippedSpellWhereInput
  }

  export type CharacterBattleHistoryListRelationFilter = {
    every?: CharacterBattleHistoryWhereInput
    some?: CharacterBattleHistoryWhereInput
    none?: CharacterBattleHistoryWhereInput
  }

  export type EquippedItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EquippedSpellOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CharacterBattleHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CharacterCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    campaignId?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    sheet?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    campaignId?: SortOrder
  }

  export type CharacterMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    campaignId?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    campaignId?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    campaignId?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type InventoryScalarRelationFilter = {
    is?: InventoryWhereInput
    isNot?: InventoryWhereInput
  }

  export type CurrencyCountOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CurrencyAvgOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
  }

  export type CurrencyMaxOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CurrencyMinOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CurrencySumOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
  }

  export type CharacterScalarRelationFilter = {
    is?: CharacterWhereInput
    isNot?: CharacterWhereInput
  }

  export type InventoryItemListRelationFilter = {
    every?: InventoryItemWhereInput
    some?: InventoryItemWhereInput
    none?: InventoryItemWhereInput
  }

  export type CurrencyListRelationFilter = {
    every?: CurrencyWhereInput
    some?: CurrencyWhereInput
    none?: CurrencyWhereInput
  }

  export type InventoryItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CurrencyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryCountOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryAvgOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
  }

  export type InventoryMaxOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryMinOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventorySumOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
  }

  export type ItemsScalarRelationFilter = {
    is?: ItemsWhereInput
    isNot?: ItemsWhereInput
  }

  export type EquippedItemNullableScalarRelationFilter = {
    is?: EquippedItemWhereInput | null
    isNot?: EquippedItemWhereInput | null
  }

  export type InventoryItemCountOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    itemsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryItemAvgOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    itemsId?: SortOrder
  }

  export type InventoryItemMaxOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    itemsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryItemMinOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    itemsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryItemSumOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    itemsId?: SortOrder
  }

  export type ItemsCountOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    type?: SortOrder
    rarity?: SortOrder
    name?: SortOrder
    slot?: SortOrder
    attributes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemsAvgOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
  }

  export type ItemsMaxOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    type?: SortOrder
    rarity?: SortOrder
    name?: SortOrder
    slot?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemsMinOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    type?: SortOrder
    rarity?: SortOrder
    name?: SortOrder
    slot?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemsSumOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type ItemTransactionHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    itemId?: SortOrder
    inventoryId?: SortOrder
    fromInventoryId?: SortOrder
    transactionType?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemTransactionHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    itemId?: SortOrder
    inventoryId?: SortOrder
    fromInventoryId?: SortOrder
  }

  export type ItemTransactionHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    itemId?: SortOrder
    inventoryId?: SortOrder
    fromInventoryId?: SortOrder
    transactionType?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemTransactionHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    itemId?: SortOrder
    inventoryId?: SortOrder
    fromInventoryId?: SortOrder
    transactionType?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemTransactionHistorySumOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    itemId?: SortOrder
    inventoryId?: SortOrder
    fromInventoryId?: SortOrder
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type InventoryItemScalarRelationFilter = {
    is?: InventoryItemWhereInput
    isNot?: InventoryItemWhereInput
  }

  export type EquippedItemCountOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    inventoryItemId?: SortOrder
    slot?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EquippedItemAvgOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    inventoryItemId?: SortOrder
  }

  export type EquippedItemMaxOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    inventoryItemId?: SortOrder
    slot?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EquippedItemMinOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    inventoryItemId?: SortOrder
    slot?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EquippedItemSumOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    inventoryItemId?: SortOrder
  }

  export type SpellsCountOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
    specifications?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SpellsAvgOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
  }

  export type SpellsMaxOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SpellsMinOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SpellsSumOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
  }

  export type SpellsScalarRelationFilter = {
    is?: SpellsWhereInput
    isNot?: SpellsWhereInput
  }

  export type EquippedSpellCountOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    spellId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EquippedSpellAvgOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    spellId?: SortOrder
  }

  export type EquippedSpellMaxOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    spellId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EquippedSpellMinOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    spellId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EquippedSpellSumOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    spellId?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type CharacterBattleHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    sourceType?: SortOrder
    description?: SortOrder
    xpGained?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterBattleHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    xpGained?: SortOrder
  }

  export type CharacterBattleHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    sourceType?: SortOrder
    description?: SortOrder
    xpGained?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterBattleHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    sourceType?: SortOrder
    description?: SortOrder
    xpGained?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterBattleHistorySumOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    xpGained?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type LevelingRuleCountOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    level?: SortOrder
    requiredXp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LevelingRuleAvgOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    level?: SortOrder
    requiredXp?: SortOrder
  }

  export type LevelingRuleMaxOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    level?: SortOrder
    requiredXp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LevelingRuleMinOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    level?: SortOrder
    requiredXp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LevelingRuleSumOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    level?: SortOrder
    requiredXp?: SortOrder
  }

  export type CharacterCreateNestedManyWithoutUserInput = {
    create?: XOR<CharacterCreateWithoutUserInput, CharacterUncheckedCreateWithoutUserInput> | CharacterCreateWithoutUserInput[] | CharacterUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutUserInput | CharacterCreateOrConnectWithoutUserInput[]
    createMany?: CharacterCreateManyUserInputEnvelope
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
  }

  export type CampaignUserCreateNestedManyWithoutUserInput = {
    create?: XOR<CampaignUserCreateWithoutUserInput, CampaignUserUncheckedCreateWithoutUserInput> | CampaignUserCreateWithoutUserInput[] | CampaignUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CampaignUserCreateOrConnectWithoutUserInput | CampaignUserCreateOrConnectWithoutUserInput[]
    createMany?: CampaignUserCreateManyUserInputEnvelope
    connect?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
  }

  export type CharacterUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CharacterCreateWithoutUserInput, CharacterUncheckedCreateWithoutUserInput> | CharacterCreateWithoutUserInput[] | CharacterUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutUserInput | CharacterCreateOrConnectWithoutUserInput[]
    createMany?: CharacterCreateManyUserInputEnvelope
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
  }

  export type CampaignUserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CampaignUserCreateWithoutUserInput, CampaignUserUncheckedCreateWithoutUserInput> | CampaignUserCreateWithoutUserInput[] | CampaignUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CampaignUserCreateOrConnectWithoutUserInput | CampaignUserCreateOrConnectWithoutUserInput[]
    createMany?: CampaignUserCreateManyUserInputEnvelope
    connect?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CharacterUpdateManyWithoutUserNestedInput = {
    create?: XOR<CharacterCreateWithoutUserInput, CharacterUncheckedCreateWithoutUserInput> | CharacterCreateWithoutUserInput[] | CharacterUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutUserInput | CharacterCreateOrConnectWithoutUserInput[]
    upsert?: CharacterUpsertWithWhereUniqueWithoutUserInput | CharacterUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CharacterCreateManyUserInputEnvelope
    set?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    disconnect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    delete?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    update?: CharacterUpdateWithWhereUniqueWithoutUserInput | CharacterUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CharacterUpdateManyWithWhereWithoutUserInput | CharacterUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
  }

  export type CampaignUserUpdateManyWithoutUserNestedInput = {
    create?: XOR<CampaignUserCreateWithoutUserInput, CampaignUserUncheckedCreateWithoutUserInput> | CampaignUserCreateWithoutUserInput[] | CampaignUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CampaignUserCreateOrConnectWithoutUserInput | CampaignUserCreateOrConnectWithoutUserInput[]
    upsert?: CampaignUserUpsertWithWhereUniqueWithoutUserInput | CampaignUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CampaignUserCreateManyUserInputEnvelope
    set?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
    disconnect?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
    delete?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
    connect?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
    update?: CampaignUserUpdateWithWhereUniqueWithoutUserInput | CampaignUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CampaignUserUpdateManyWithWhereWithoutUserInput | CampaignUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CampaignUserScalarWhereInput | CampaignUserScalarWhereInput[]
  }

  export type CharacterUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CharacterCreateWithoutUserInput, CharacterUncheckedCreateWithoutUserInput> | CharacterCreateWithoutUserInput[] | CharacterUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutUserInput | CharacterCreateOrConnectWithoutUserInput[]
    upsert?: CharacterUpsertWithWhereUniqueWithoutUserInput | CharacterUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CharacterCreateManyUserInputEnvelope
    set?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    disconnect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    delete?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    update?: CharacterUpdateWithWhereUniqueWithoutUserInput | CharacterUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CharacterUpdateManyWithWhereWithoutUserInput | CharacterUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
  }

  export type CampaignUserUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CampaignUserCreateWithoutUserInput, CampaignUserUncheckedCreateWithoutUserInput> | CampaignUserCreateWithoutUserInput[] | CampaignUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CampaignUserCreateOrConnectWithoutUserInput | CampaignUserCreateOrConnectWithoutUserInput[]
    upsert?: CampaignUserUpsertWithWhereUniqueWithoutUserInput | CampaignUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CampaignUserCreateManyUserInputEnvelope
    set?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
    disconnect?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
    delete?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
    connect?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
    update?: CampaignUserUpdateWithWhereUniqueWithoutUserInput | CampaignUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CampaignUserUpdateManyWithWhereWithoutUserInput | CampaignUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CampaignUserScalarWhereInput | CampaignUserScalarWhereInput[]
  }

  export type CharacterCreateNestedManyWithoutCampaignInput = {
    create?: XOR<CharacterCreateWithoutCampaignInput, CharacterUncheckedCreateWithoutCampaignInput> | CharacterCreateWithoutCampaignInput[] | CharacterUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutCampaignInput | CharacterCreateOrConnectWithoutCampaignInput[]
    createMany?: CharacterCreateManyCampaignInputEnvelope
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
  }

  export type CampaignUserCreateNestedManyWithoutCampaignInput = {
    create?: XOR<CampaignUserCreateWithoutCampaignInput, CampaignUserUncheckedCreateWithoutCampaignInput> | CampaignUserCreateWithoutCampaignInput[] | CampaignUserUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: CampaignUserCreateOrConnectWithoutCampaignInput | CampaignUserCreateOrConnectWithoutCampaignInput[]
    createMany?: CampaignUserCreateManyCampaignInputEnvelope
    connect?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
  }

  export type ItemsCreateNestedManyWithoutCampaignInput = {
    create?: XOR<ItemsCreateWithoutCampaignInput, ItemsUncheckedCreateWithoutCampaignInput> | ItemsCreateWithoutCampaignInput[] | ItemsUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: ItemsCreateOrConnectWithoutCampaignInput | ItemsCreateOrConnectWithoutCampaignInput[]
    createMany?: ItemsCreateManyCampaignInputEnvelope
    connect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
  }

  export type SpellsCreateNestedManyWithoutCampaignInput = {
    create?: XOR<SpellsCreateWithoutCampaignInput, SpellsUncheckedCreateWithoutCampaignInput> | SpellsCreateWithoutCampaignInput[] | SpellsUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: SpellsCreateOrConnectWithoutCampaignInput | SpellsCreateOrConnectWithoutCampaignInput[]
    createMany?: SpellsCreateManyCampaignInputEnvelope
    connect?: SpellsWhereUniqueInput | SpellsWhereUniqueInput[]
  }

  export type LevelingRuleCreateNestedManyWithoutCampaignInput = {
    create?: XOR<LevelingRuleCreateWithoutCampaignInput, LevelingRuleUncheckedCreateWithoutCampaignInput> | LevelingRuleCreateWithoutCampaignInput[] | LevelingRuleUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: LevelingRuleCreateOrConnectWithoutCampaignInput | LevelingRuleCreateOrConnectWithoutCampaignInput[]
    createMany?: LevelingRuleCreateManyCampaignInputEnvelope
    connect?: LevelingRuleWhereUniqueInput | LevelingRuleWhereUniqueInput[]
  }

  export type ItemTransactionHistoryCreateNestedManyWithoutCampaignInput = {
    create?: XOR<ItemTransactionHistoryCreateWithoutCampaignInput, ItemTransactionHistoryUncheckedCreateWithoutCampaignInput> | ItemTransactionHistoryCreateWithoutCampaignInput[] | ItemTransactionHistoryUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: ItemTransactionHistoryCreateOrConnectWithoutCampaignInput | ItemTransactionHistoryCreateOrConnectWithoutCampaignInput[]
    createMany?: ItemTransactionHistoryCreateManyCampaignInputEnvelope
    connect?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
  }

  export type CharacterUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<CharacterCreateWithoutCampaignInput, CharacterUncheckedCreateWithoutCampaignInput> | CharacterCreateWithoutCampaignInput[] | CharacterUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutCampaignInput | CharacterCreateOrConnectWithoutCampaignInput[]
    createMany?: CharacterCreateManyCampaignInputEnvelope
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
  }

  export type CampaignUserUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<CampaignUserCreateWithoutCampaignInput, CampaignUserUncheckedCreateWithoutCampaignInput> | CampaignUserCreateWithoutCampaignInput[] | CampaignUserUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: CampaignUserCreateOrConnectWithoutCampaignInput | CampaignUserCreateOrConnectWithoutCampaignInput[]
    createMany?: CampaignUserCreateManyCampaignInputEnvelope
    connect?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
  }

  export type ItemsUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<ItemsCreateWithoutCampaignInput, ItemsUncheckedCreateWithoutCampaignInput> | ItemsCreateWithoutCampaignInput[] | ItemsUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: ItemsCreateOrConnectWithoutCampaignInput | ItemsCreateOrConnectWithoutCampaignInput[]
    createMany?: ItemsCreateManyCampaignInputEnvelope
    connect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
  }

  export type SpellsUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<SpellsCreateWithoutCampaignInput, SpellsUncheckedCreateWithoutCampaignInput> | SpellsCreateWithoutCampaignInput[] | SpellsUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: SpellsCreateOrConnectWithoutCampaignInput | SpellsCreateOrConnectWithoutCampaignInput[]
    createMany?: SpellsCreateManyCampaignInputEnvelope
    connect?: SpellsWhereUniqueInput | SpellsWhereUniqueInput[]
  }

  export type LevelingRuleUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<LevelingRuleCreateWithoutCampaignInput, LevelingRuleUncheckedCreateWithoutCampaignInput> | LevelingRuleCreateWithoutCampaignInput[] | LevelingRuleUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: LevelingRuleCreateOrConnectWithoutCampaignInput | LevelingRuleCreateOrConnectWithoutCampaignInput[]
    createMany?: LevelingRuleCreateManyCampaignInputEnvelope
    connect?: LevelingRuleWhereUniqueInput | LevelingRuleWhereUniqueInput[]
  }

  export type ItemTransactionHistoryUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<ItemTransactionHistoryCreateWithoutCampaignInput, ItemTransactionHistoryUncheckedCreateWithoutCampaignInput> | ItemTransactionHistoryCreateWithoutCampaignInput[] | ItemTransactionHistoryUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: ItemTransactionHistoryCreateOrConnectWithoutCampaignInput | ItemTransactionHistoryCreateOrConnectWithoutCampaignInput[]
    createMany?: ItemTransactionHistoryCreateManyCampaignInputEnvelope
    connect?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
  }

  export type CharacterUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<CharacterCreateWithoutCampaignInput, CharacterUncheckedCreateWithoutCampaignInput> | CharacterCreateWithoutCampaignInput[] | CharacterUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutCampaignInput | CharacterCreateOrConnectWithoutCampaignInput[]
    upsert?: CharacterUpsertWithWhereUniqueWithoutCampaignInput | CharacterUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: CharacterCreateManyCampaignInputEnvelope
    set?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    disconnect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    delete?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    update?: CharacterUpdateWithWhereUniqueWithoutCampaignInput | CharacterUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: CharacterUpdateManyWithWhereWithoutCampaignInput | CharacterUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
  }

  export type CampaignUserUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<CampaignUserCreateWithoutCampaignInput, CampaignUserUncheckedCreateWithoutCampaignInput> | CampaignUserCreateWithoutCampaignInput[] | CampaignUserUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: CampaignUserCreateOrConnectWithoutCampaignInput | CampaignUserCreateOrConnectWithoutCampaignInput[]
    upsert?: CampaignUserUpsertWithWhereUniqueWithoutCampaignInput | CampaignUserUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: CampaignUserCreateManyCampaignInputEnvelope
    set?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
    disconnect?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
    delete?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
    connect?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
    update?: CampaignUserUpdateWithWhereUniqueWithoutCampaignInput | CampaignUserUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: CampaignUserUpdateManyWithWhereWithoutCampaignInput | CampaignUserUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: CampaignUserScalarWhereInput | CampaignUserScalarWhereInput[]
  }

  export type ItemsUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<ItemsCreateWithoutCampaignInput, ItemsUncheckedCreateWithoutCampaignInput> | ItemsCreateWithoutCampaignInput[] | ItemsUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: ItemsCreateOrConnectWithoutCampaignInput | ItemsCreateOrConnectWithoutCampaignInput[]
    upsert?: ItemsUpsertWithWhereUniqueWithoutCampaignInput | ItemsUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: ItemsCreateManyCampaignInputEnvelope
    set?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    disconnect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    delete?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    connect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    update?: ItemsUpdateWithWhereUniqueWithoutCampaignInput | ItemsUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: ItemsUpdateManyWithWhereWithoutCampaignInput | ItemsUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: ItemsScalarWhereInput | ItemsScalarWhereInput[]
  }

  export type SpellsUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<SpellsCreateWithoutCampaignInput, SpellsUncheckedCreateWithoutCampaignInput> | SpellsCreateWithoutCampaignInput[] | SpellsUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: SpellsCreateOrConnectWithoutCampaignInput | SpellsCreateOrConnectWithoutCampaignInput[]
    upsert?: SpellsUpsertWithWhereUniqueWithoutCampaignInput | SpellsUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: SpellsCreateManyCampaignInputEnvelope
    set?: SpellsWhereUniqueInput | SpellsWhereUniqueInput[]
    disconnect?: SpellsWhereUniqueInput | SpellsWhereUniqueInput[]
    delete?: SpellsWhereUniqueInput | SpellsWhereUniqueInput[]
    connect?: SpellsWhereUniqueInput | SpellsWhereUniqueInput[]
    update?: SpellsUpdateWithWhereUniqueWithoutCampaignInput | SpellsUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: SpellsUpdateManyWithWhereWithoutCampaignInput | SpellsUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: SpellsScalarWhereInput | SpellsScalarWhereInput[]
  }

  export type LevelingRuleUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<LevelingRuleCreateWithoutCampaignInput, LevelingRuleUncheckedCreateWithoutCampaignInput> | LevelingRuleCreateWithoutCampaignInput[] | LevelingRuleUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: LevelingRuleCreateOrConnectWithoutCampaignInput | LevelingRuleCreateOrConnectWithoutCampaignInput[]
    upsert?: LevelingRuleUpsertWithWhereUniqueWithoutCampaignInput | LevelingRuleUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: LevelingRuleCreateManyCampaignInputEnvelope
    set?: LevelingRuleWhereUniqueInput | LevelingRuleWhereUniqueInput[]
    disconnect?: LevelingRuleWhereUniqueInput | LevelingRuleWhereUniqueInput[]
    delete?: LevelingRuleWhereUniqueInput | LevelingRuleWhereUniqueInput[]
    connect?: LevelingRuleWhereUniqueInput | LevelingRuleWhereUniqueInput[]
    update?: LevelingRuleUpdateWithWhereUniqueWithoutCampaignInput | LevelingRuleUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: LevelingRuleUpdateManyWithWhereWithoutCampaignInput | LevelingRuleUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: LevelingRuleScalarWhereInput | LevelingRuleScalarWhereInput[]
  }

  export type ItemTransactionHistoryUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<ItemTransactionHistoryCreateWithoutCampaignInput, ItemTransactionHistoryUncheckedCreateWithoutCampaignInput> | ItemTransactionHistoryCreateWithoutCampaignInput[] | ItemTransactionHistoryUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: ItemTransactionHistoryCreateOrConnectWithoutCampaignInput | ItemTransactionHistoryCreateOrConnectWithoutCampaignInput[]
    upsert?: ItemTransactionHistoryUpsertWithWhereUniqueWithoutCampaignInput | ItemTransactionHistoryUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: ItemTransactionHistoryCreateManyCampaignInputEnvelope
    set?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    disconnect?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    delete?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    connect?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    update?: ItemTransactionHistoryUpdateWithWhereUniqueWithoutCampaignInput | ItemTransactionHistoryUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: ItemTransactionHistoryUpdateManyWithWhereWithoutCampaignInput | ItemTransactionHistoryUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: ItemTransactionHistoryScalarWhereInput | ItemTransactionHistoryScalarWhereInput[]
  }

  export type CharacterUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<CharacterCreateWithoutCampaignInput, CharacterUncheckedCreateWithoutCampaignInput> | CharacterCreateWithoutCampaignInput[] | CharacterUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutCampaignInput | CharacterCreateOrConnectWithoutCampaignInput[]
    upsert?: CharacterUpsertWithWhereUniqueWithoutCampaignInput | CharacterUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: CharacterCreateManyCampaignInputEnvelope
    set?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    disconnect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    delete?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    update?: CharacterUpdateWithWhereUniqueWithoutCampaignInput | CharacterUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: CharacterUpdateManyWithWhereWithoutCampaignInput | CharacterUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
  }

  export type CampaignUserUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<CampaignUserCreateWithoutCampaignInput, CampaignUserUncheckedCreateWithoutCampaignInput> | CampaignUserCreateWithoutCampaignInput[] | CampaignUserUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: CampaignUserCreateOrConnectWithoutCampaignInput | CampaignUserCreateOrConnectWithoutCampaignInput[]
    upsert?: CampaignUserUpsertWithWhereUniqueWithoutCampaignInput | CampaignUserUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: CampaignUserCreateManyCampaignInputEnvelope
    set?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
    disconnect?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
    delete?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
    connect?: CampaignUserWhereUniqueInput | CampaignUserWhereUniqueInput[]
    update?: CampaignUserUpdateWithWhereUniqueWithoutCampaignInput | CampaignUserUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: CampaignUserUpdateManyWithWhereWithoutCampaignInput | CampaignUserUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: CampaignUserScalarWhereInput | CampaignUserScalarWhereInput[]
  }

  export type ItemsUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<ItemsCreateWithoutCampaignInput, ItemsUncheckedCreateWithoutCampaignInput> | ItemsCreateWithoutCampaignInput[] | ItemsUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: ItemsCreateOrConnectWithoutCampaignInput | ItemsCreateOrConnectWithoutCampaignInput[]
    upsert?: ItemsUpsertWithWhereUniqueWithoutCampaignInput | ItemsUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: ItemsCreateManyCampaignInputEnvelope
    set?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    disconnect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    delete?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    connect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    update?: ItemsUpdateWithWhereUniqueWithoutCampaignInput | ItemsUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: ItemsUpdateManyWithWhereWithoutCampaignInput | ItemsUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: ItemsScalarWhereInput | ItemsScalarWhereInput[]
  }

  export type SpellsUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<SpellsCreateWithoutCampaignInput, SpellsUncheckedCreateWithoutCampaignInput> | SpellsCreateWithoutCampaignInput[] | SpellsUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: SpellsCreateOrConnectWithoutCampaignInput | SpellsCreateOrConnectWithoutCampaignInput[]
    upsert?: SpellsUpsertWithWhereUniqueWithoutCampaignInput | SpellsUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: SpellsCreateManyCampaignInputEnvelope
    set?: SpellsWhereUniqueInput | SpellsWhereUniqueInput[]
    disconnect?: SpellsWhereUniqueInput | SpellsWhereUniqueInput[]
    delete?: SpellsWhereUniqueInput | SpellsWhereUniqueInput[]
    connect?: SpellsWhereUniqueInput | SpellsWhereUniqueInput[]
    update?: SpellsUpdateWithWhereUniqueWithoutCampaignInput | SpellsUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: SpellsUpdateManyWithWhereWithoutCampaignInput | SpellsUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: SpellsScalarWhereInput | SpellsScalarWhereInput[]
  }

  export type LevelingRuleUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<LevelingRuleCreateWithoutCampaignInput, LevelingRuleUncheckedCreateWithoutCampaignInput> | LevelingRuleCreateWithoutCampaignInput[] | LevelingRuleUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: LevelingRuleCreateOrConnectWithoutCampaignInput | LevelingRuleCreateOrConnectWithoutCampaignInput[]
    upsert?: LevelingRuleUpsertWithWhereUniqueWithoutCampaignInput | LevelingRuleUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: LevelingRuleCreateManyCampaignInputEnvelope
    set?: LevelingRuleWhereUniqueInput | LevelingRuleWhereUniqueInput[]
    disconnect?: LevelingRuleWhereUniqueInput | LevelingRuleWhereUniqueInput[]
    delete?: LevelingRuleWhereUniqueInput | LevelingRuleWhereUniqueInput[]
    connect?: LevelingRuleWhereUniqueInput | LevelingRuleWhereUniqueInput[]
    update?: LevelingRuleUpdateWithWhereUniqueWithoutCampaignInput | LevelingRuleUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: LevelingRuleUpdateManyWithWhereWithoutCampaignInput | LevelingRuleUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: LevelingRuleScalarWhereInput | LevelingRuleScalarWhereInput[]
  }

  export type ItemTransactionHistoryUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<ItemTransactionHistoryCreateWithoutCampaignInput, ItemTransactionHistoryUncheckedCreateWithoutCampaignInput> | ItemTransactionHistoryCreateWithoutCampaignInput[] | ItemTransactionHistoryUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: ItemTransactionHistoryCreateOrConnectWithoutCampaignInput | ItemTransactionHistoryCreateOrConnectWithoutCampaignInput[]
    upsert?: ItemTransactionHistoryUpsertWithWhereUniqueWithoutCampaignInput | ItemTransactionHistoryUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: ItemTransactionHistoryCreateManyCampaignInputEnvelope
    set?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    disconnect?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    delete?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    connect?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    update?: ItemTransactionHistoryUpdateWithWhereUniqueWithoutCampaignInput | ItemTransactionHistoryUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: ItemTransactionHistoryUpdateManyWithWhereWithoutCampaignInput | ItemTransactionHistoryUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: ItemTransactionHistoryScalarWhereInput | ItemTransactionHistoryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCampaignUsersInput = {
    create?: XOR<UserCreateWithoutCampaignUsersInput, UserUncheckedCreateWithoutCampaignUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCampaignUsersInput
    connect?: UserWhereUniqueInput
  }

  export type CampaignCreateNestedOneWithoutCampaignUsersInput = {
    create?: XOR<CampaignCreateWithoutCampaignUsersInput, CampaignUncheckedCreateWithoutCampaignUsersInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutCampaignUsersInput
    connect?: CampaignWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCampaignUsersNestedInput = {
    create?: XOR<UserCreateWithoutCampaignUsersInput, UserUncheckedCreateWithoutCampaignUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCampaignUsersInput
    upsert?: UserUpsertWithoutCampaignUsersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCampaignUsersInput, UserUpdateWithoutCampaignUsersInput>, UserUncheckedUpdateWithoutCampaignUsersInput>
  }

  export type CampaignUpdateOneRequiredWithoutCampaignUsersNestedInput = {
    create?: XOR<CampaignCreateWithoutCampaignUsersInput, CampaignUncheckedCreateWithoutCampaignUsersInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutCampaignUsersInput
    upsert?: CampaignUpsertWithoutCampaignUsersInput
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutCampaignUsersInput, CampaignUpdateWithoutCampaignUsersInput>, CampaignUncheckedUpdateWithoutCampaignUsersInput>
  }

  export type UserCreateNestedOneWithoutCharactersInput = {
    create?: XOR<UserCreateWithoutCharactersInput, UserUncheckedCreateWithoutCharactersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCharactersInput
    connect?: UserWhereUniqueInput
  }

  export type CampaignCreateNestedOneWithoutCharactersInput = {
    create?: XOR<CampaignCreateWithoutCharactersInput, CampaignUncheckedCreateWithoutCharactersInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutCharactersInput
    connect?: CampaignWhereUniqueInput
  }

  export type InventoryCreateNestedOneWithoutCharacterInput = {
    create?: XOR<InventoryCreateWithoutCharacterInput, InventoryUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutCharacterInput
    connect?: InventoryWhereUniqueInput
  }

  export type EquippedItemCreateNestedManyWithoutCharacterInput = {
    create?: XOR<EquippedItemCreateWithoutCharacterInput, EquippedItemUncheckedCreateWithoutCharacterInput> | EquippedItemCreateWithoutCharacterInput[] | EquippedItemUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: EquippedItemCreateOrConnectWithoutCharacterInput | EquippedItemCreateOrConnectWithoutCharacterInput[]
    createMany?: EquippedItemCreateManyCharacterInputEnvelope
    connect?: EquippedItemWhereUniqueInput | EquippedItemWhereUniqueInput[]
  }

  export type EquippedSpellCreateNestedManyWithoutCharacterInput = {
    create?: XOR<EquippedSpellCreateWithoutCharacterInput, EquippedSpellUncheckedCreateWithoutCharacterInput> | EquippedSpellCreateWithoutCharacterInput[] | EquippedSpellUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: EquippedSpellCreateOrConnectWithoutCharacterInput | EquippedSpellCreateOrConnectWithoutCharacterInput[]
    createMany?: EquippedSpellCreateManyCharacterInputEnvelope
    connect?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
  }

  export type CharacterBattleHistoryCreateNestedManyWithoutCharacterInput = {
    create?: XOR<CharacterBattleHistoryCreateWithoutCharacterInput, CharacterBattleHistoryUncheckedCreateWithoutCharacterInput> | CharacterBattleHistoryCreateWithoutCharacterInput[] | CharacterBattleHistoryUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: CharacterBattleHistoryCreateOrConnectWithoutCharacterInput | CharacterBattleHistoryCreateOrConnectWithoutCharacterInput[]
    createMany?: CharacterBattleHistoryCreateManyCharacterInputEnvelope
    connect?: CharacterBattleHistoryWhereUniqueInput | CharacterBattleHistoryWhereUniqueInput[]
  }

  export type InventoryUncheckedCreateNestedOneWithoutCharacterInput = {
    create?: XOR<InventoryCreateWithoutCharacterInput, InventoryUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutCharacterInput
    connect?: InventoryWhereUniqueInput
  }

  export type EquippedItemUncheckedCreateNestedManyWithoutCharacterInput = {
    create?: XOR<EquippedItemCreateWithoutCharacterInput, EquippedItemUncheckedCreateWithoutCharacterInput> | EquippedItemCreateWithoutCharacterInput[] | EquippedItemUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: EquippedItemCreateOrConnectWithoutCharacterInput | EquippedItemCreateOrConnectWithoutCharacterInput[]
    createMany?: EquippedItemCreateManyCharacterInputEnvelope
    connect?: EquippedItemWhereUniqueInput | EquippedItemWhereUniqueInput[]
  }

  export type EquippedSpellUncheckedCreateNestedManyWithoutCharacterInput = {
    create?: XOR<EquippedSpellCreateWithoutCharacterInput, EquippedSpellUncheckedCreateWithoutCharacterInput> | EquippedSpellCreateWithoutCharacterInput[] | EquippedSpellUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: EquippedSpellCreateOrConnectWithoutCharacterInput | EquippedSpellCreateOrConnectWithoutCharacterInput[]
    createMany?: EquippedSpellCreateManyCharacterInputEnvelope
    connect?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
  }

  export type CharacterBattleHistoryUncheckedCreateNestedManyWithoutCharacterInput = {
    create?: XOR<CharacterBattleHistoryCreateWithoutCharacterInput, CharacterBattleHistoryUncheckedCreateWithoutCharacterInput> | CharacterBattleHistoryCreateWithoutCharacterInput[] | CharacterBattleHistoryUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: CharacterBattleHistoryCreateOrConnectWithoutCharacterInput | CharacterBattleHistoryCreateOrConnectWithoutCharacterInput[]
    createMany?: CharacterBattleHistoryCreateManyCharacterInputEnvelope
    connect?: CharacterBattleHistoryWhereUniqueInput | CharacterBattleHistoryWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCharactersNestedInput = {
    create?: XOR<UserCreateWithoutCharactersInput, UserUncheckedCreateWithoutCharactersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCharactersInput
    upsert?: UserUpsertWithoutCharactersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCharactersInput, UserUpdateWithoutCharactersInput>, UserUncheckedUpdateWithoutCharactersInput>
  }

  export type CampaignUpdateOneRequiredWithoutCharactersNestedInput = {
    create?: XOR<CampaignCreateWithoutCharactersInput, CampaignUncheckedCreateWithoutCharactersInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutCharactersInput
    upsert?: CampaignUpsertWithoutCharactersInput
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutCharactersInput, CampaignUpdateWithoutCharactersInput>, CampaignUncheckedUpdateWithoutCharactersInput>
  }

  export type InventoryUpdateOneWithoutCharacterNestedInput = {
    create?: XOR<InventoryCreateWithoutCharacterInput, InventoryUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutCharacterInput
    upsert?: InventoryUpsertWithoutCharacterInput
    disconnect?: InventoryWhereInput | boolean
    delete?: InventoryWhereInput | boolean
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutCharacterInput, InventoryUpdateWithoutCharacterInput>, InventoryUncheckedUpdateWithoutCharacterInput>
  }

  export type EquippedItemUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<EquippedItemCreateWithoutCharacterInput, EquippedItemUncheckedCreateWithoutCharacterInput> | EquippedItemCreateWithoutCharacterInput[] | EquippedItemUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: EquippedItemCreateOrConnectWithoutCharacterInput | EquippedItemCreateOrConnectWithoutCharacterInput[]
    upsert?: EquippedItemUpsertWithWhereUniqueWithoutCharacterInput | EquippedItemUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: EquippedItemCreateManyCharacterInputEnvelope
    set?: EquippedItemWhereUniqueInput | EquippedItemWhereUniqueInput[]
    disconnect?: EquippedItemWhereUniqueInput | EquippedItemWhereUniqueInput[]
    delete?: EquippedItemWhereUniqueInput | EquippedItemWhereUniqueInput[]
    connect?: EquippedItemWhereUniqueInput | EquippedItemWhereUniqueInput[]
    update?: EquippedItemUpdateWithWhereUniqueWithoutCharacterInput | EquippedItemUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: EquippedItemUpdateManyWithWhereWithoutCharacterInput | EquippedItemUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: EquippedItemScalarWhereInput | EquippedItemScalarWhereInput[]
  }

  export type EquippedSpellUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<EquippedSpellCreateWithoutCharacterInput, EquippedSpellUncheckedCreateWithoutCharacterInput> | EquippedSpellCreateWithoutCharacterInput[] | EquippedSpellUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: EquippedSpellCreateOrConnectWithoutCharacterInput | EquippedSpellCreateOrConnectWithoutCharacterInput[]
    upsert?: EquippedSpellUpsertWithWhereUniqueWithoutCharacterInput | EquippedSpellUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: EquippedSpellCreateManyCharacterInputEnvelope
    set?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
    disconnect?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
    delete?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
    connect?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
    update?: EquippedSpellUpdateWithWhereUniqueWithoutCharacterInput | EquippedSpellUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: EquippedSpellUpdateManyWithWhereWithoutCharacterInput | EquippedSpellUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: EquippedSpellScalarWhereInput | EquippedSpellScalarWhereInput[]
  }

  export type CharacterBattleHistoryUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<CharacterBattleHistoryCreateWithoutCharacterInput, CharacterBattleHistoryUncheckedCreateWithoutCharacterInput> | CharacterBattleHistoryCreateWithoutCharacterInput[] | CharacterBattleHistoryUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: CharacterBattleHistoryCreateOrConnectWithoutCharacterInput | CharacterBattleHistoryCreateOrConnectWithoutCharacterInput[]
    upsert?: CharacterBattleHistoryUpsertWithWhereUniqueWithoutCharacterInput | CharacterBattleHistoryUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: CharacterBattleHistoryCreateManyCharacterInputEnvelope
    set?: CharacterBattleHistoryWhereUniqueInput | CharacterBattleHistoryWhereUniqueInput[]
    disconnect?: CharacterBattleHistoryWhereUniqueInput | CharacterBattleHistoryWhereUniqueInput[]
    delete?: CharacterBattleHistoryWhereUniqueInput | CharacterBattleHistoryWhereUniqueInput[]
    connect?: CharacterBattleHistoryWhereUniqueInput | CharacterBattleHistoryWhereUniqueInput[]
    update?: CharacterBattleHistoryUpdateWithWhereUniqueWithoutCharacterInput | CharacterBattleHistoryUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: CharacterBattleHistoryUpdateManyWithWhereWithoutCharacterInput | CharacterBattleHistoryUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: CharacterBattleHistoryScalarWhereInput | CharacterBattleHistoryScalarWhereInput[]
  }

  export type InventoryUncheckedUpdateOneWithoutCharacterNestedInput = {
    create?: XOR<InventoryCreateWithoutCharacterInput, InventoryUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutCharacterInput
    upsert?: InventoryUpsertWithoutCharacterInput
    disconnect?: InventoryWhereInput | boolean
    delete?: InventoryWhereInput | boolean
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutCharacterInput, InventoryUpdateWithoutCharacterInput>, InventoryUncheckedUpdateWithoutCharacterInput>
  }

  export type EquippedItemUncheckedUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<EquippedItemCreateWithoutCharacterInput, EquippedItemUncheckedCreateWithoutCharacterInput> | EquippedItemCreateWithoutCharacterInput[] | EquippedItemUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: EquippedItemCreateOrConnectWithoutCharacterInput | EquippedItemCreateOrConnectWithoutCharacterInput[]
    upsert?: EquippedItemUpsertWithWhereUniqueWithoutCharacterInput | EquippedItemUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: EquippedItemCreateManyCharacterInputEnvelope
    set?: EquippedItemWhereUniqueInput | EquippedItemWhereUniqueInput[]
    disconnect?: EquippedItemWhereUniqueInput | EquippedItemWhereUniqueInput[]
    delete?: EquippedItemWhereUniqueInput | EquippedItemWhereUniqueInput[]
    connect?: EquippedItemWhereUniqueInput | EquippedItemWhereUniqueInput[]
    update?: EquippedItemUpdateWithWhereUniqueWithoutCharacterInput | EquippedItemUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: EquippedItemUpdateManyWithWhereWithoutCharacterInput | EquippedItemUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: EquippedItemScalarWhereInput | EquippedItemScalarWhereInput[]
  }

  export type EquippedSpellUncheckedUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<EquippedSpellCreateWithoutCharacterInput, EquippedSpellUncheckedCreateWithoutCharacterInput> | EquippedSpellCreateWithoutCharacterInput[] | EquippedSpellUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: EquippedSpellCreateOrConnectWithoutCharacterInput | EquippedSpellCreateOrConnectWithoutCharacterInput[]
    upsert?: EquippedSpellUpsertWithWhereUniqueWithoutCharacterInput | EquippedSpellUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: EquippedSpellCreateManyCharacterInputEnvelope
    set?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
    disconnect?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
    delete?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
    connect?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
    update?: EquippedSpellUpdateWithWhereUniqueWithoutCharacterInput | EquippedSpellUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: EquippedSpellUpdateManyWithWhereWithoutCharacterInput | EquippedSpellUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: EquippedSpellScalarWhereInput | EquippedSpellScalarWhereInput[]
  }

  export type CharacterBattleHistoryUncheckedUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<CharacterBattleHistoryCreateWithoutCharacterInput, CharacterBattleHistoryUncheckedCreateWithoutCharacterInput> | CharacterBattleHistoryCreateWithoutCharacterInput[] | CharacterBattleHistoryUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: CharacterBattleHistoryCreateOrConnectWithoutCharacterInput | CharacterBattleHistoryCreateOrConnectWithoutCharacterInput[]
    upsert?: CharacterBattleHistoryUpsertWithWhereUniqueWithoutCharacterInput | CharacterBattleHistoryUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: CharacterBattleHistoryCreateManyCharacterInputEnvelope
    set?: CharacterBattleHistoryWhereUniqueInput | CharacterBattleHistoryWhereUniqueInput[]
    disconnect?: CharacterBattleHistoryWhereUniqueInput | CharacterBattleHistoryWhereUniqueInput[]
    delete?: CharacterBattleHistoryWhereUniqueInput | CharacterBattleHistoryWhereUniqueInput[]
    connect?: CharacterBattleHistoryWhereUniqueInput | CharacterBattleHistoryWhereUniqueInput[]
    update?: CharacterBattleHistoryUpdateWithWhereUniqueWithoutCharacterInput | CharacterBattleHistoryUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: CharacterBattleHistoryUpdateManyWithWhereWithoutCharacterInput | CharacterBattleHistoryUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: CharacterBattleHistoryScalarWhereInput | CharacterBattleHistoryScalarWhereInput[]
  }

  export type InventoryCreateNestedOneWithoutCurrencyInput = {
    create?: XOR<InventoryCreateWithoutCurrencyInput, InventoryUncheckedCreateWithoutCurrencyInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutCurrencyInput
    connect?: InventoryWhereUniqueInput
  }

  export type InventoryUpdateOneRequiredWithoutCurrencyNestedInput = {
    create?: XOR<InventoryCreateWithoutCurrencyInput, InventoryUncheckedCreateWithoutCurrencyInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutCurrencyInput
    upsert?: InventoryUpsertWithoutCurrencyInput
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutCurrencyInput, InventoryUpdateWithoutCurrencyInput>, InventoryUncheckedUpdateWithoutCurrencyInput>
  }

  export type CharacterCreateNestedOneWithoutInventoryInput = {
    create?: XOR<CharacterCreateWithoutInventoryInput, CharacterUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutInventoryInput
    connect?: CharacterWhereUniqueInput
  }

  export type InventoryItemCreateNestedManyWithoutInventoryInput = {
    create?: XOR<InventoryItemCreateWithoutInventoryInput, InventoryItemUncheckedCreateWithoutInventoryInput> | InventoryItemCreateWithoutInventoryInput[] | InventoryItemUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutInventoryInput | InventoryItemCreateOrConnectWithoutInventoryInput[]
    createMany?: InventoryItemCreateManyInventoryInputEnvelope
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
  }

  export type ItemTransactionHistoryCreateNestedManyWithoutInventoryInput = {
    create?: XOR<ItemTransactionHistoryCreateWithoutInventoryInput, ItemTransactionHistoryUncheckedCreateWithoutInventoryInput> | ItemTransactionHistoryCreateWithoutInventoryInput[] | ItemTransactionHistoryUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: ItemTransactionHistoryCreateOrConnectWithoutInventoryInput | ItemTransactionHistoryCreateOrConnectWithoutInventoryInput[]
    createMany?: ItemTransactionHistoryCreateManyInventoryInputEnvelope
    connect?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
  }

  export type CurrencyCreateNestedManyWithoutInventoryInput = {
    create?: XOR<CurrencyCreateWithoutInventoryInput, CurrencyUncheckedCreateWithoutInventoryInput> | CurrencyCreateWithoutInventoryInput[] | CurrencyUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: CurrencyCreateOrConnectWithoutInventoryInput | CurrencyCreateOrConnectWithoutInventoryInput[]
    createMany?: CurrencyCreateManyInventoryInputEnvelope
    connect?: CurrencyWhereUniqueInput | CurrencyWhereUniqueInput[]
  }

  export type InventoryItemUncheckedCreateNestedManyWithoutInventoryInput = {
    create?: XOR<InventoryItemCreateWithoutInventoryInput, InventoryItemUncheckedCreateWithoutInventoryInput> | InventoryItemCreateWithoutInventoryInput[] | InventoryItemUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutInventoryInput | InventoryItemCreateOrConnectWithoutInventoryInput[]
    createMany?: InventoryItemCreateManyInventoryInputEnvelope
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
  }

  export type ItemTransactionHistoryUncheckedCreateNestedManyWithoutInventoryInput = {
    create?: XOR<ItemTransactionHistoryCreateWithoutInventoryInput, ItemTransactionHistoryUncheckedCreateWithoutInventoryInput> | ItemTransactionHistoryCreateWithoutInventoryInput[] | ItemTransactionHistoryUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: ItemTransactionHistoryCreateOrConnectWithoutInventoryInput | ItemTransactionHistoryCreateOrConnectWithoutInventoryInput[]
    createMany?: ItemTransactionHistoryCreateManyInventoryInputEnvelope
    connect?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
  }

  export type CurrencyUncheckedCreateNestedManyWithoutInventoryInput = {
    create?: XOR<CurrencyCreateWithoutInventoryInput, CurrencyUncheckedCreateWithoutInventoryInput> | CurrencyCreateWithoutInventoryInput[] | CurrencyUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: CurrencyCreateOrConnectWithoutInventoryInput | CurrencyCreateOrConnectWithoutInventoryInput[]
    createMany?: CurrencyCreateManyInventoryInputEnvelope
    connect?: CurrencyWhereUniqueInput | CurrencyWhereUniqueInput[]
  }

  export type CharacterUpdateOneRequiredWithoutInventoryNestedInput = {
    create?: XOR<CharacterCreateWithoutInventoryInput, CharacterUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutInventoryInput
    upsert?: CharacterUpsertWithoutInventoryInput
    connect?: CharacterWhereUniqueInput
    update?: XOR<XOR<CharacterUpdateToOneWithWhereWithoutInventoryInput, CharacterUpdateWithoutInventoryInput>, CharacterUncheckedUpdateWithoutInventoryInput>
  }

  export type InventoryItemUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<InventoryItemCreateWithoutInventoryInput, InventoryItemUncheckedCreateWithoutInventoryInput> | InventoryItemCreateWithoutInventoryInput[] | InventoryItemUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutInventoryInput | InventoryItemCreateOrConnectWithoutInventoryInput[]
    upsert?: InventoryItemUpsertWithWhereUniqueWithoutInventoryInput | InventoryItemUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: InventoryItemCreateManyInventoryInputEnvelope
    set?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    disconnect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    delete?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    update?: InventoryItemUpdateWithWhereUniqueWithoutInventoryInput | InventoryItemUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: InventoryItemUpdateManyWithWhereWithoutInventoryInput | InventoryItemUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: InventoryItemScalarWhereInput | InventoryItemScalarWhereInput[]
  }

  export type ItemTransactionHistoryUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<ItemTransactionHistoryCreateWithoutInventoryInput, ItemTransactionHistoryUncheckedCreateWithoutInventoryInput> | ItemTransactionHistoryCreateWithoutInventoryInput[] | ItemTransactionHistoryUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: ItemTransactionHistoryCreateOrConnectWithoutInventoryInput | ItemTransactionHistoryCreateOrConnectWithoutInventoryInput[]
    upsert?: ItemTransactionHistoryUpsertWithWhereUniqueWithoutInventoryInput | ItemTransactionHistoryUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: ItemTransactionHistoryCreateManyInventoryInputEnvelope
    set?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    disconnect?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    delete?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    connect?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    update?: ItemTransactionHistoryUpdateWithWhereUniqueWithoutInventoryInput | ItemTransactionHistoryUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: ItemTransactionHistoryUpdateManyWithWhereWithoutInventoryInput | ItemTransactionHistoryUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: ItemTransactionHistoryScalarWhereInput | ItemTransactionHistoryScalarWhereInput[]
  }

  export type CurrencyUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<CurrencyCreateWithoutInventoryInput, CurrencyUncheckedCreateWithoutInventoryInput> | CurrencyCreateWithoutInventoryInput[] | CurrencyUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: CurrencyCreateOrConnectWithoutInventoryInput | CurrencyCreateOrConnectWithoutInventoryInput[]
    upsert?: CurrencyUpsertWithWhereUniqueWithoutInventoryInput | CurrencyUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: CurrencyCreateManyInventoryInputEnvelope
    set?: CurrencyWhereUniqueInput | CurrencyWhereUniqueInput[]
    disconnect?: CurrencyWhereUniqueInput | CurrencyWhereUniqueInput[]
    delete?: CurrencyWhereUniqueInput | CurrencyWhereUniqueInput[]
    connect?: CurrencyWhereUniqueInput | CurrencyWhereUniqueInput[]
    update?: CurrencyUpdateWithWhereUniqueWithoutInventoryInput | CurrencyUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: CurrencyUpdateManyWithWhereWithoutInventoryInput | CurrencyUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: CurrencyScalarWhereInput | CurrencyScalarWhereInput[]
  }

  export type InventoryItemUncheckedUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<InventoryItemCreateWithoutInventoryInput, InventoryItemUncheckedCreateWithoutInventoryInput> | InventoryItemCreateWithoutInventoryInput[] | InventoryItemUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutInventoryInput | InventoryItemCreateOrConnectWithoutInventoryInput[]
    upsert?: InventoryItemUpsertWithWhereUniqueWithoutInventoryInput | InventoryItemUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: InventoryItemCreateManyInventoryInputEnvelope
    set?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    disconnect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    delete?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    update?: InventoryItemUpdateWithWhereUniqueWithoutInventoryInput | InventoryItemUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: InventoryItemUpdateManyWithWhereWithoutInventoryInput | InventoryItemUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: InventoryItemScalarWhereInput | InventoryItemScalarWhereInput[]
  }

  export type ItemTransactionHistoryUncheckedUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<ItemTransactionHistoryCreateWithoutInventoryInput, ItemTransactionHistoryUncheckedCreateWithoutInventoryInput> | ItemTransactionHistoryCreateWithoutInventoryInput[] | ItemTransactionHistoryUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: ItemTransactionHistoryCreateOrConnectWithoutInventoryInput | ItemTransactionHistoryCreateOrConnectWithoutInventoryInput[]
    upsert?: ItemTransactionHistoryUpsertWithWhereUniqueWithoutInventoryInput | ItemTransactionHistoryUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: ItemTransactionHistoryCreateManyInventoryInputEnvelope
    set?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    disconnect?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    delete?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    connect?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    update?: ItemTransactionHistoryUpdateWithWhereUniqueWithoutInventoryInput | ItemTransactionHistoryUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: ItemTransactionHistoryUpdateManyWithWhereWithoutInventoryInput | ItemTransactionHistoryUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: ItemTransactionHistoryScalarWhereInput | ItemTransactionHistoryScalarWhereInput[]
  }

  export type CurrencyUncheckedUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<CurrencyCreateWithoutInventoryInput, CurrencyUncheckedCreateWithoutInventoryInput> | CurrencyCreateWithoutInventoryInput[] | CurrencyUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: CurrencyCreateOrConnectWithoutInventoryInput | CurrencyCreateOrConnectWithoutInventoryInput[]
    upsert?: CurrencyUpsertWithWhereUniqueWithoutInventoryInput | CurrencyUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: CurrencyCreateManyInventoryInputEnvelope
    set?: CurrencyWhereUniqueInput | CurrencyWhereUniqueInput[]
    disconnect?: CurrencyWhereUniqueInput | CurrencyWhereUniqueInput[]
    delete?: CurrencyWhereUniqueInput | CurrencyWhereUniqueInput[]
    connect?: CurrencyWhereUniqueInput | CurrencyWhereUniqueInput[]
    update?: CurrencyUpdateWithWhereUniqueWithoutInventoryInput | CurrencyUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: CurrencyUpdateManyWithWhereWithoutInventoryInput | CurrencyUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: CurrencyScalarWhereInput | CurrencyScalarWhereInput[]
  }

  export type InventoryCreateNestedOneWithoutInventoryItemsInput = {
    create?: XOR<InventoryCreateWithoutInventoryItemsInput, InventoryUncheckedCreateWithoutInventoryItemsInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutInventoryItemsInput
    connect?: InventoryWhereUniqueInput
  }

  export type ItemsCreateNestedOneWithoutInventoryItemsInput = {
    create?: XOR<ItemsCreateWithoutInventoryItemsInput, ItemsUncheckedCreateWithoutInventoryItemsInput>
    connectOrCreate?: ItemsCreateOrConnectWithoutInventoryItemsInput
    connect?: ItemsWhereUniqueInput
  }

  export type EquippedItemCreateNestedOneWithoutInventoryItemInput = {
    create?: XOR<EquippedItemCreateWithoutInventoryItemInput, EquippedItemUncheckedCreateWithoutInventoryItemInput>
    connectOrCreate?: EquippedItemCreateOrConnectWithoutInventoryItemInput
    connect?: EquippedItemWhereUniqueInput
  }

  export type EquippedItemUncheckedCreateNestedOneWithoutInventoryItemInput = {
    create?: XOR<EquippedItemCreateWithoutInventoryItemInput, EquippedItemUncheckedCreateWithoutInventoryItemInput>
    connectOrCreate?: EquippedItemCreateOrConnectWithoutInventoryItemInput
    connect?: EquippedItemWhereUniqueInput
  }

  export type InventoryUpdateOneRequiredWithoutInventoryItemsNestedInput = {
    create?: XOR<InventoryCreateWithoutInventoryItemsInput, InventoryUncheckedCreateWithoutInventoryItemsInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutInventoryItemsInput
    upsert?: InventoryUpsertWithoutInventoryItemsInput
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutInventoryItemsInput, InventoryUpdateWithoutInventoryItemsInput>, InventoryUncheckedUpdateWithoutInventoryItemsInput>
  }

  export type ItemsUpdateOneRequiredWithoutInventoryItemsNestedInput = {
    create?: XOR<ItemsCreateWithoutInventoryItemsInput, ItemsUncheckedCreateWithoutInventoryItemsInput>
    connectOrCreate?: ItemsCreateOrConnectWithoutInventoryItemsInput
    upsert?: ItemsUpsertWithoutInventoryItemsInput
    connect?: ItemsWhereUniqueInput
    update?: XOR<XOR<ItemsUpdateToOneWithWhereWithoutInventoryItemsInput, ItemsUpdateWithoutInventoryItemsInput>, ItemsUncheckedUpdateWithoutInventoryItemsInput>
  }

  export type EquippedItemUpdateOneWithoutInventoryItemNestedInput = {
    create?: XOR<EquippedItemCreateWithoutInventoryItemInput, EquippedItemUncheckedCreateWithoutInventoryItemInput>
    connectOrCreate?: EquippedItemCreateOrConnectWithoutInventoryItemInput
    upsert?: EquippedItemUpsertWithoutInventoryItemInput
    disconnect?: EquippedItemWhereInput | boolean
    delete?: EquippedItemWhereInput | boolean
    connect?: EquippedItemWhereUniqueInput
    update?: XOR<XOR<EquippedItemUpdateToOneWithWhereWithoutInventoryItemInput, EquippedItemUpdateWithoutInventoryItemInput>, EquippedItemUncheckedUpdateWithoutInventoryItemInput>
  }

  export type EquippedItemUncheckedUpdateOneWithoutInventoryItemNestedInput = {
    create?: XOR<EquippedItemCreateWithoutInventoryItemInput, EquippedItemUncheckedCreateWithoutInventoryItemInput>
    connectOrCreate?: EquippedItemCreateOrConnectWithoutInventoryItemInput
    upsert?: EquippedItemUpsertWithoutInventoryItemInput
    disconnect?: EquippedItemWhereInput | boolean
    delete?: EquippedItemWhereInput | boolean
    connect?: EquippedItemWhereUniqueInput
    update?: XOR<XOR<EquippedItemUpdateToOneWithWhereWithoutInventoryItemInput, EquippedItemUpdateWithoutInventoryItemInput>, EquippedItemUncheckedUpdateWithoutInventoryItemInput>
  }

  export type CampaignCreateNestedOneWithoutItemsInput = {
    create?: XOR<CampaignCreateWithoutItemsInput, CampaignUncheckedCreateWithoutItemsInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutItemsInput
    connect?: CampaignWhereUniqueInput
  }

  export type InventoryItemCreateNestedManyWithoutItemInput = {
    create?: XOR<InventoryItemCreateWithoutItemInput, InventoryItemUncheckedCreateWithoutItemInput> | InventoryItemCreateWithoutItemInput[] | InventoryItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutItemInput | InventoryItemCreateOrConnectWithoutItemInput[]
    createMany?: InventoryItemCreateManyItemInputEnvelope
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
  }

  export type ItemTransactionHistoryCreateNestedManyWithoutItemInput = {
    create?: XOR<ItemTransactionHistoryCreateWithoutItemInput, ItemTransactionHistoryUncheckedCreateWithoutItemInput> | ItemTransactionHistoryCreateWithoutItemInput[] | ItemTransactionHistoryUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ItemTransactionHistoryCreateOrConnectWithoutItemInput | ItemTransactionHistoryCreateOrConnectWithoutItemInput[]
    createMany?: ItemTransactionHistoryCreateManyItemInputEnvelope
    connect?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
  }

  export type InventoryItemUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<InventoryItemCreateWithoutItemInput, InventoryItemUncheckedCreateWithoutItemInput> | InventoryItemCreateWithoutItemInput[] | InventoryItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutItemInput | InventoryItemCreateOrConnectWithoutItemInput[]
    createMany?: InventoryItemCreateManyItemInputEnvelope
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
  }

  export type ItemTransactionHistoryUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<ItemTransactionHistoryCreateWithoutItemInput, ItemTransactionHistoryUncheckedCreateWithoutItemInput> | ItemTransactionHistoryCreateWithoutItemInput[] | ItemTransactionHistoryUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ItemTransactionHistoryCreateOrConnectWithoutItemInput | ItemTransactionHistoryCreateOrConnectWithoutItemInput[]
    createMany?: ItemTransactionHistoryCreateManyItemInputEnvelope
    connect?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
  }

  export type CampaignUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<CampaignCreateWithoutItemsInput, CampaignUncheckedCreateWithoutItemsInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutItemsInput
    upsert?: CampaignUpsertWithoutItemsInput
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutItemsInput, CampaignUpdateWithoutItemsInput>, CampaignUncheckedUpdateWithoutItemsInput>
  }

  export type InventoryItemUpdateManyWithoutItemNestedInput = {
    create?: XOR<InventoryItemCreateWithoutItemInput, InventoryItemUncheckedCreateWithoutItemInput> | InventoryItemCreateWithoutItemInput[] | InventoryItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutItemInput | InventoryItemCreateOrConnectWithoutItemInput[]
    upsert?: InventoryItemUpsertWithWhereUniqueWithoutItemInput | InventoryItemUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: InventoryItemCreateManyItemInputEnvelope
    set?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    disconnect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    delete?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    update?: InventoryItemUpdateWithWhereUniqueWithoutItemInput | InventoryItemUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: InventoryItemUpdateManyWithWhereWithoutItemInput | InventoryItemUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: InventoryItemScalarWhereInput | InventoryItemScalarWhereInput[]
  }

  export type ItemTransactionHistoryUpdateManyWithoutItemNestedInput = {
    create?: XOR<ItemTransactionHistoryCreateWithoutItemInput, ItemTransactionHistoryUncheckedCreateWithoutItemInput> | ItemTransactionHistoryCreateWithoutItemInput[] | ItemTransactionHistoryUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ItemTransactionHistoryCreateOrConnectWithoutItemInput | ItemTransactionHistoryCreateOrConnectWithoutItemInput[]
    upsert?: ItemTransactionHistoryUpsertWithWhereUniqueWithoutItemInput | ItemTransactionHistoryUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: ItemTransactionHistoryCreateManyItemInputEnvelope
    set?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    disconnect?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    delete?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    connect?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    update?: ItemTransactionHistoryUpdateWithWhereUniqueWithoutItemInput | ItemTransactionHistoryUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: ItemTransactionHistoryUpdateManyWithWhereWithoutItemInput | ItemTransactionHistoryUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: ItemTransactionHistoryScalarWhereInput | ItemTransactionHistoryScalarWhereInput[]
  }

  export type InventoryItemUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<InventoryItemCreateWithoutItemInput, InventoryItemUncheckedCreateWithoutItemInput> | InventoryItemCreateWithoutItemInput[] | InventoryItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutItemInput | InventoryItemCreateOrConnectWithoutItemInput[]
    upsert?: InventoryItemUpsertWithWhereUniqueWithoutItemInput | InventoryItemUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: InventoryItemCreateManyItemInputEnvelope
    set?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    disconnect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    delete?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    update?: InventoryItemUpdateWithWhereUniqueWithoutItemInput | InventoryItemUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: InventoryItemUpdateManyWithWhereWithoutItemInput | InventoryItemUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: InventoryItemScalarWhereInput | InventoryItemScalarWhereInput[]
  }

  export type ItemTransactionHistoryUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<ItemTransactionHistoryCreateWithoutItemInput, ItemTransactionHistoryUncheckedCreateWithoutItemInput> | ItemTransactionHistoryCreateWithoutItemInput[] | ItemTransactionHistoryUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ItemTransactionHistoryCreateOrConnectWithoutItemInput | ItemTransactionHistoryCreateOrConnectWithoutItemInput[]
    upsert?: ItemTransactionHistoryUpsertWithWhereUniqueWithoutItemInput | ItemTransactionHistoryUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: ItemTransactionHistoryCreateManyItemInputEnvelope
    set?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    disconnect?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    delete?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    connect?: ItemTransactionHistoryWhereUniqueInput | ItemTransactionHistoryWhereUniqueInput[]
    update?: ItemTransactionHistoryUpdateWithWhereUniqueWithoutItemInput | ItemTransactionHistoryUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: ItemTransactionHistoryUpdateManyWithWhereWithoutItemInput | ItemTransactionHistoryUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: ItemTransactionHistoryScalarWhereInput | ItemTransactionHistoryScalarWhereInput[]
  }

  export type CampaignCreateNestedOneWithoutItemTransactionHistoryInput = {
    create?: XOR<CampaignCreateWithoutItemTransactionHistoryInput, CampaignUncheckedCreateWithoutItemTransactionHistoryInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutItemTransactionHistoryInput
    connect?: CampaignWhereUniqueInput
  }

  export type ItemsCreateNestedOneWithoutTransactionHistoriesInput = {
    create?: XOR<ItemsCreateWithoutTransactionHistoriesInput, ItemsUncheckedCreateWithoutTransactionHistoriesInput>
    connectOrCreate?: ItemsCreateOrConnectWithoutTransactionHistoriesInput
    connect?: ItemsWhereUniqueInput
  }

  export type InventoryCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<InventoryCreateWithoutTransactionsInput, InventoryUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutTransactionsInput
    connect?: InventoryWhereUniqueInput
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type CampaignUpdateOneRequiredWithoutItemTransactionHistoryNestedInput = {
    create?: XOR<CampaignCreateWithoutItemTransactionHistoryInput, CampaignUncheckedCreateWithoutItemTransactionHistoryInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutItemTransactionHistoryInput
    upsert?: CampaignUpsertWithoutItemTransactionHistoryInput
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutItemTransactionHistoryInput, CampaignUpdateWithoutItemTransactionHistoryInput>, CampaignUncheckedUpdateWithoutItemTransactionHistoryInput>
  }

  export type ItemsUpdateOneRequiredWithoutTransactionHistoriesNestedInput = {
    create?: XOR<ItemsCreateWithoutTransactionHistoriesInput, ItemsUncheckedCreateWithoutTransactionHistoriesInput>
    connectOrCreate?: ItemsCreateOrConnectWithoutTransactionHistoriesInput
    upsert?: ItemsUpsertWithoutTransactionHistoriesInput
    connect?: ItemsWhereUniqueInput
    update?: XOR<XOR<ItemsUpdateToOneWithWhereWithoutTransactionHistoriesInput, ItemsUpdateWithoutTransactionHistoriesInput>, ItemsUncheckedUpdateWithoutTransactionHistoriesInput>
  }

  export type InventoryUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<InventoryCreateWithoutTransactionsInput, InventoryUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutTransactionsInput
    upsert?: InventoryUpsertWithoutTransactionsInput
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutTransactionsInput, InventoryUpdateWithoutTransactionsInput>, InventoryUncheckedUpdateWithoutTransactionsInput>
  }

  export type CharacterCreateNestedOneWithoutEquippedItemsInput = {
    create?: XOR<CharacterCreateWithoutEquippedItemsInput, CharacterUncheckedCreateWithoutEquippedItemsInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutEquippedItemsInput
    connect?: CharacterWhereUniqueInput
  }

  export type InventoryItemCreateNestedOneWithoutEquippedItemInput = {
    create?: XOR<InventoryItemCreateWithoutEquippedItemInput, InventoryItemUncheckedCreateWithoutEquippedItemInput>
    connectOrCreate?: InventoryItemCreateOrConnectWithoutEquippedItemInput
    connect?: InventoryItemWhereUniqueInput
  }

  export type CharacterUpdateOneRequiredWithoutEquippedItemsNestedInput = {
    create?: XOR<CharacterCreateWithoutEquippedItemsInput, CharacterUncheckedCreateWithoutEquippedItemsInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutEquippedItemsInput
    upsert?: CharacterUpsertWithoutEquippedItemsInput
    connect?: CharacterWhereUniqueInput
    update?: XOR<XOR<CharacterUpdateToOneWithWhereWithoutEquippedItemsInput, CharacterUpdateWithoutEquippedItemsInput>, CharacterUncheckedUpdateWithoutEquippedItemsInput>
  }

  export type InventoryItemUpdateOneRequiredWithoutEquippedItemNestedInput = {
    create?: XOR<InventoryItemCreateWithoutEquippedItemInput, InventoryItemUncheckedCreateWithoutEquippedItemInput>
    connectOrCreate?: InventoryItemCreateOrConnectWithoutEquippedItemInput
    upsert?: InventoryItemUpsertWithoutEquippedItemInput
    connect?: InventoryItemWhereUniqueInput
    update?: XOR<XOR<InventoryItemUpdateToOneWithWhereWithoutEquippedItemInput, InventoryItemUpdateWithoutEquippedItemInput>, InventoryItemUncheckedUpdateWithoutEquippedItemInput>
  }

  export type CampaignCreateNestedOneWithoutSpellsInput = {
    create?: XOR<CampaignCreateWithoutSpellsInput, CampaignUncheckedCreateWithoutSpellsInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutSpellsInput
    connect?: CampaignWhereUniqueInput
  }

  export type EquippedSpellCreateNestedManyWithoutSpellInput = {
    create?: XOR<EquippedSpellCreateWithoutSpellInput, EquippedSpellUncheckedCreateWithoutSpellInput> | EquippedSpellCreateWithoutSpellInput[] | EquippedSpellUncheckedCreateWithoutSpellInput[]
    connectOrCreate?: EquippedSpellCreateOrConnectWithoutSpellInput | EquippedSpellCreateOrConnectWithoutSpellInput[]
    createMany?: EquippedSpellCreateManySpellInputEnvelope
    connect?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
  }

  export type EquippedSpellUncheckedCreateNestedManyWithoutSpellInput = {
    create?: XOR<EquippedSpellCreateWithoutSpellInput, EquippedSpellUncheckedCreateWithoutSpellInput> | EquippedSpellCreateWithoutSpellInput[] | EquippedSpellUncheckedCreateWithoutSpellInput[]
    connectOrCreate?: EquippedSpellCreateOrConnectWithoutSpellInput | EquippedSpellCreateOrConnectWithoutSpellInput[]
    createMany?: EquippedSpellCreateManySpellInputEnvelope
    connect?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
  }

  export type CampaignUpdateOneRequiredWithoutSpellsNestedInput = {
    create?: XOR<CampaignCreateWithoutSpellsInput, CampaignUncheckedCreateWithoutSpellsInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutSpellsInput
    upsert?: CampaignUpsertWithoutSpellsInput
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutSpellsInput, CampaignUpdateWithoutSpellsInput>, CampaignUncheckedUpdateWithoutSpellsInput>
  }

  export type EquippedSpellUpdateManyWithoutSpellNestedInput = {
    create?: XOR<EquippedSpellCreateWithoutSpellInput, EquippedSpellUncheckedCreateWithoutSpellInput> | EquippedSpellCreateWithoutSpellInput[] | EquippedSpellUncheckedCreateWithoutSpellInput[]
    connectOrCreate?: EquippedSpellCreateOrConnectWithoutSpellInput | EquippedSpellCreateOrConnectWithoutSpellInput[]
    upsert?: EquippedSpellUpsertWithWhereUniqueWithoutSpellInput | EquippedSpellUpsertWithWhereUniqueWithoutSpellInput[]
    createMany?: EquippedSpellCreateManySpellInputEnvelope
    set?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
    disconnect?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
    delete?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
    connect?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
    update?: EquippedSpellUpdateWithWhereUniqueWithoutSpellInput | EquippedSpellUpdateWithWhereUniqueWithoutSpellInput[]
    updateMany?: EquippedSpellUpdateManyWithWhereWithoutSpellInput | EquippedSpellUpdateManyWithWhereWithoutSpellInput[]
    deleteMany?: EquippedSpellScalarWhereInput | EquippedSpellScalarWhereInput[]
  }

  export type EquippedSpellUncheckedUpdateManyWithoutSpellNestedInput = {
    create?: XOR<EquippedSpellCreateWithoutSpellInput, EquippedSpellUncheckedCreateWithoutSpellInput> | EquippedSpellCreateWithoutSpellInput[] | EquippedSpellUncheckedCreateWithoutSpellInput[]
    connectOrCreate?: EquippedSpellCreateOrConnectWithoutSpellInput | EquippedSpellCreateOrConnectWithoutSpellInput[]
    upsert?: EquippedSpellUpsertWithWhereUniqueWithoutSpellInput | EquippedSpellUpsertWithWhereUniqueWithoutSpellInput[]
    createMany?: EquippedSpellCreateManySpellInputEnvelope
    set?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
    disconnect?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
    delete?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
    connect?: EquippedSpellWhereUniqueInput | EquippedSpellWhereUniqueInput[]
    update?: EquippedSpellUpdateWithWhereUniqueWithoutSpellInput | EquippedSpellUpdateWithWhereUniqueWithoutSpellInput[]
    updateMany?: EquippedSpellUpdateManyWithWhereWithoutSpellInput | EquippedSpellUpdateManyWithWhereWithoutSpellInput[]
    deleteMany?: EquippedSpellScalarWhereInput | EquippedSpellScalarWhereInput[]
  }

  export type CharacterCreateNestedOneWithoutEquippedSpellsInput = {
    create?: XOR<CharacterCreateWithoutEquippedSpellsInput, CharacterUncheckedCreateWithoutEquippedSpellsInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutEquippedSpellsInput
    connect?: CharacterWhereUniqueInput
  }

  export type SpellsCreateNestedOneWithoutEquippedSpellsInput = {
    create?: XOR<SpellsCreateWithoutEquippedSpellsInput, SpellsUncheckedCreateWithoutEquippedSpellsInput>
    connectOrCreate?: SpellsCreateOrConnectWithoutEquippedSpellsInput
    connect?: SpellsWhereUniqueInput
  }

  export type CharacterUpdateOneRequiredWithoutEquippedSpellsNestedInput = {
    create?: XOR<CharacterCreateWithoutEquippedSpellsInput, CharacterUncheckedCreateWithoutEquippedSpellsInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutEquippedSpellsInput
    upsert?: CharacterUpsertWithoutEquippedSpellsInput
    connect?: CharacterWhereUniqueInput
    update?: XOR<XOR<CharacterUpdateToOneWithWhereWithoutEquippedSpellsInput, CharacterUpdateWithoutEquippedSpellsInput>, CharacterUncheckedUpdateWithoutEquippedSpellsInput>
  }

  export type SpellsUpdateOneRequiredWithoutEquippedSpellsNestedInput = {
    create?: XOR<SpellsCreateWithoutEquippedSpellsInput, SpellsUncheckedCreateWithoutEquippedSpellsInput>
    connectOrCreate?: SpellsCreateOrConnectWithoutEquippedSpellsInput
    upsert?: SpellsUpsertWithoutEquippedSpellsInput
    connect?: SpellsWhereUniqueInput
    update?: XOR<XOR<SpellsUpdateToOneWithWhereWithoutEquippedSpellsInput, SpellsUpdateWithoutEquippedSpellsInput>, SpellsUncheckedUpdateWithoutEquippedSpellsInput>
  }

  export type CharacterCreateNestedOneWithoutBattleHistoryInput = {
    create?: XOR<CharacterCreateWithoutBattleHistoryInput, CharacterUncheckedCreateWithoutBattleHistoryInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutBattleHistoryInput
    connect?: CharacterWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CharacterUpdateOneRequiredWithoutBattleHistoryNestedInput = {
    create?: XOR<CharacterCreateWithoutBattleHistoryInput, CharacterUncheckedCreateWithoutBattleHistoryInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutBattleHistoryInput
    upsert?: CharacterUpsertWithoutBattleHistoryInput
    connect?: CharacterWhereUniqueInput
    update?: XOR<XOR<CharacterUpdateToOneWithWhereWithoutBattleHistoryInput, CharacterUpdateWithoutBattleHistoryInput>, CharacterUncheckedUpdateWithoutBattleHistoryInput>
  }

  export type CampaignCreateNestedOneWithoutLevelingRulesInput = {
    create?: XOR<CampaignCreateWithoutLevelingRulesInput, CampaignUncheckedCreateWithoutLevelingRulesInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutLevelingRulesInput
    connect?: CampaignWhereUniqueInput
  }

  export type CampaignUpdateOneRequiredWithoutLevelingRulesNestedInput = {
    create?: XOR<CampaignCreateWithoutLevelingRulesInput, CampaignUncheckedCreateWithoutLevelingRulesInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutLevelingRulesInput
    upsert?: CampaignUpsertWithoutLevelingRulesInput
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutLevelingRulesInput, CampaignUpdateWithoutLevelingRulesInput>, CampaignUncheckedUpdateWithoutLevelingRulesInput>
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type CharacterCreateWithoutUserInput = {
    id?: bigint | number
    name: string
    avatar?: string | null
    sheet: JsonNullValueInput | InputJsonValue
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutCharactersInput
    inventory?: InventoryCreateNestedOneWithoutCharacterInput
    equippedItems?: EquippedItemCreateNestedManyWithoutCharacterInput
    equippedSpells?: EquippedSpellCreateNestedManyWithoutCharacterInput
    battleHistory?: CharacterBattleHistoryCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutUserInput = {
    id?: bigint | number
    campaignId: bigint | number
    name: string
    avatar?: string | null
    sheet: JsonNullValueInput | InputJsonValue
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    inventory?: InventoryUncheckedCreateNestedOneWithoutCharacterInput
    equippedItems?: EquippedItemUncheckedCreateNestedManyWithoutCharacterInput
    equippedSpells?: EquippedSpellUncheckedCreateNestedManyWithoutCharacterInput
    battleHistory?: CharacterBattleHistoryUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutUserInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutUserInput, CharacterUncheckedCreateWithoutUserInput>
  }

  export type CharacterCreateManyUserInputEnvelope = {
    data: CharacterCreateManyUserInput | CharacterCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CampaignUserCreateWithoutUserInput = {
    id?: bigint | number
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutCampaignUsersInput
  }

  export type CampaignUserUncheckedCreateWithoutUserInput = {
    id?: bigint | number
    campaignId: bigint | number
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CampaignUserCreateOrConnectWithoutUserInput = {
    where: CampaignUserWhereUniqueInput
    create: XOR<CampaignUserCreateWithoutUserInput, CampaignUserUncheckedCreateWithoutUserInput>
  }

  export type CampaignUserCreateManyUserInputEnvelope = {
    data: CampaignUserCreateManyUserInput | CampaignUserCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CharacterUpsertWithWhereUniqueWithoutUserInput = {
    where: CharacterWhereUniqueInput
    update: XOR<CharacterUpdateWithoutUserInput, CharacterUncheckedUpdateWithoutUserInput>
    create: XOR<CharacterCreateWithoutUserInput, CharacterUncheckedCreateWithoutUserInput>
  }

  export type CharacterUpdateWithWhereUniqueWithoutUserInput = {
    where: CharacterWhereUniqueInput
    data: XOR<CharacterUpdateWithoutUserInput, CharacterUncheckedUpdateWithoutUserInput>
  }

  export type CharacterUpdateManyWithWhereWithoutUserInput = {
    where: CharacterScalarWhereInput
    data: XOR<CharacterUpdateManyMutationInput, CharacterUncheckedUpdateManyWithoutUserInput>
  }

  export type CharacterScalarWhereInput = {
    AND?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
    OR?: CharacterScalarWhereInput[]
    NOT?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
    id?: BigIntFilter<"Character"> | bigint | number
    userId?: BigIntFilter<"Character"> | bigint | number
    campaignId?: BigIntFilter<"Character"> | bigint | number
    name?: StringFilter<"Character"> | string
    avatar?: StringNullableFilter<"Character"> | string | null
    sheet?: JsonFilter<"Character">
    active?: BoolFilter<"Character"> | boolean
    createdAt?: DateTimeFilter<"Character"> | Date | string
    updatedAt?: DateTimeFilter<"Character"> | Date | string
  }

  export type CampaignUserUpsertWithWhereUniqueWithoutUserInput = {
    where: CampaignUserWhereUniqueInput
    update: XOR<CampaignUserUpdateWithoutUserInput, CampaignUserUncheckedUpdateWithoutUserInput>
    create: XOR<CampaignUserCreateWithoutUserInput, CampaignUserUncheckedCreateWithoutUserInput>
  }

  export type CampaignUserUpdateWithWhereUniqueWithoutUserInput = {
    where: CampaignUserWhereUniqueInput
    data: XOR<CampaignUserUpdateWithoutUserInput, CampaignUserUncheckedUpdateWithoutUserInput>
  }

  export type CampaignUserUpdateManyWithWhereWithoutUserInput = {
    where: CampaignUserScalarWhereInput
    data: XOR<CampaignUserUpdateManyMutationInput, CampaignUserUncheckedUpdateManyWithoutUserInput>
  }

  export type CampaignUserScalarWhereInput = {
    AND?: CampaignUserScalarWhereInput | CampaignUserScalarWhereInput[]
    OR?: CampaignUserScalarWhereInput[]
    NOT?: CampaignUserScalarWhereInput | CampaignUserScalarWhereInput[]
    id?: BigIntFilter<"CampaignUser"> | bigint | number
    userId?: BigIntFilter<"CampaignUser"> | bigint | number
    campaignId?: BigIntFilter<"CampaignUser"> | bigint | number
    role?: StringFilter<"CampaignUser"> | string
    createdAt?: DateTimeFilter<"CampaignUser"> | Date | string
    updatedAt?: DateTimeFilter<"CampaignUser"> | Date | string
  }

  export type CharacterCreateWithoutCampaignInput = {
    id?: bigint | number
    name: string
    avatar?: string | null
    sheet: JsonNullValueInput | InputJsonValue
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCharactersInput
    inventory?: InventoryCreateNestedOneWithoutCharacterInput
    equippedItems?: EquippedItemCreateNestedManyWithoutCharacterInput
    equippedSpells?: EquippedSpellCreateNestedManyWithoutCharacterInput
    battleHistory?: CharacterBattleHistoryCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutCampaignInput = {
    id?: bigint | number
    userId: bigint | number
    name: string
    avatar?: string | null
    sheet: JsonNullValueInput | InputJsonValue
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    inventory?: InventoryUncheckedCreateNestedOneWithoutCharacterInput
    equippedItems?: EquippedItemUncheckedCreateNestedManyWithoutCharacterInput
    equippedSpells?: EquippedSpellUncheckedCreateNestedManyWithoutCharacterInput
    battleHistory?: CharacterBattleHistoryUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutCampaignInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutCampaignInput, CharacterUncheckedCreateWithoutCampaignInput>
  }

  export type CharacterCreateManyCampaignInputEnvelope = {
    data: CharacterCreateManyCampaignInput | CharacterCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type CampaignUserCreateWithoutCampaignInput = {
    id?: bigint | number
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCampaignUsersInput
  }

  export type CampaignUserUncheckedCreateWithoutCampaignInput = {
    id?: bigint | number
    userId: bigint | number
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CampaignUserCreateOrConnectWithoutCampaignInput = {
    where: CampaignUserWhereUniqueInput
    create: XOR<CampaignUserCreateWithoutCampaignInput, CampaignUserUncheckedCreateWithoutCampaignInput>
  }

  export type CampaignUserCreateManyCampaignInputEnvelope = {
    data: CampaignUserCreateManyCampaignInput | CampaignUserCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type ItemsCreateWithoutCampaignInput = {
    id?: bigint | number
    type: string
    rarity: string
    name: string
    slot: string
    attributes: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    inventoryItems?: InventoryItemCreateNestedManyWithoutItemInput
    transactionHistories?: ItemTransactionHistoryCreateNestedManyWithoutItemInput
  }

  export type ItemsUncheckedCreateWithoutCampaignInput = {
    id?: bigint | number
    type: string
    rarity: string
    name: string
    slot: string
    attributes: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    inventoryItems?: InventoryItemUncheckedCreateNestedManyWithoutItemInput
    transactionHistories?: ItemTransactionHistoryUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemsCreateOrConnectWithoutCampaignInput = {
    where: ItemsWhereUniqueInput
    create: XOR<ItemsCreateWithoutCampaignInput, ItemsUncheckedCreateWithoutCampaignInput>
  }

  export type ItemsCreateManyCampaignInputEnvelope = {
    data: ItemsCreateManyCampaignInput | ItemsCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type SpellsCreateWithoutCampaignInput = {
    id?: bigint | number
    name: string
    type: string
    description?: string | null
    specifications: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    equippedSpells?: EquippedSpellCreateNestedManyWithoutSpellInput
  }

  export type SpellsUncheckedCreateWithoutCampaignInput = {
    id?: bigint | number
    name: string
    type: string
    description?: string | null
    specifications: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    equippedSpells?: EquippedSpellUncheckedCreateNestedManyWithoutSpellInput
  }

  export type SpellsCreateOrConnectWithoutCampaignInput = {
    where: SpellsWhereUniqueInput
    create: XOR<SpellsCreateWithoutCampaignInput, SpellsUncheckedCreateWithoutCampaignInput>
  }

  export type SpellsCreateManyCampaignInputEnvelope = {
    data: SpellsCreateManyCampaignInput | SpellsCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type LevelingRuleCreateWithoutCampaignInput = {
    id?: bigint | number
    level: bigint | number
    requiredXp: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LevelingRuleUncheckedCreateWithoutCampaignInput = {
    id?: bigint | number
    level: bigint | number
    requiredXp: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LevelingRuleCreateOrConnectWithoutCampaignInput = {
    where: LevelingRuleWhereUniqueInput
    create: XOR<LevelingRuleCreateWithoutCampaignInput, LevelingRuleUncheckedCreateWithoutCampaignInput>
  }

  export type LevelingRuleCreateManyCampaignInputEnvelope = {
    data: LevelingRuleCreateManyCampaignInput | LevelingRuleCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type ItemTransactionHistoryCreateWithoutCampaignInput = {
    id?: bigint | number
    fromInventoryId?: bigint | number | null
    transactionType: string
    amount?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    item: ItemsCreateNestedOneWithoutTransactionHistoriesInput
    inventory: InventoryCreateNestedOneWithoutTransactionsInput
  }

  export type ItemTransactionHistoryUncheckedCreateWithoutCampaignInput = {
    id?: bigint | number
    itemId: bigint | number
    inventoryId: bigint | number
    fromInventoryId?: bigint | number | null
    transactionType: string
    amount?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemTransactionHistoryCreateOrConnectWithoutCampaignInput = {
    where: ItemTransactionHistoryWhereUniqueInput
    create: XOR<ItemTransactionHistoryCreateWithoutCampaignInput, ItemTransactionHistoryUncheckedCreateWithoutCampaignInput>
  }

  export type ItemTransactionHistoryCreateManyCampaignInputEnvelope = {
    data: ItemTransactionHistoryCreateManyCampaignInput | ItemTransactionHistoryCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type CharacterUpsertWithWhereUniqueWithoutCampaignInput = {
    where: CharacterWhereUniqueInput
    update: XOR<CharacterUpdateWithoutCampaignInput, CharacterUncheckedUpdateWithoutCampaignInput>
    create: XOR<CharacterCreateWithoutCampaignInput, CharacterUncheckedCreateWithoutCampaignInput>
  }

  export type CharacterUpdateWithWhereUniqueWithoutCampaignInput = {
    where: CharacterWhereUniqueInput
    data: XOR<CharacterUpdateWithoutCampaignInput, CharacterUncheckedUpdateWithoutCampaignInput>
  }

  export type CharacterUpdateManyWithWhereWithoutCampaignInput = {
    where: CharacterScalarWhereInput
    data: XOR<CharacterUpdateManyMutationInput, CharacterUncheckedUpdateManyWithoutCampaignInput>
  }

  export type CampaignUserUpsertWithWhereUniqueWithoutCampaignInput = {
    where: CampaignUserWhereUniqueInput
    update: XOR<CampaignUserUpdateWithoutCampaignInput, CampaignUserUncheckedUpdateWithoutCampaignInput>
    create: XOR<CampaignUserCreateWithoutCampaignInput, CampaignUserUncheckedCreateWithoutCampaignInput>
  }

  export type CampaignUserUpdateWithWhereUniqueWithoutCampaignInput = {
    where: CampaignUserWhereUniqueInput
    data: XOR<CampaignUserUpdateWithoutCampaignInput, CampaignUserUncheckedUpdateWithoutCampaignInput>
  }

  export type CampaignUserUpdateManyWithWhereWithoutCampaignInput = {
    where: CampaignUserScalarWhereInput
    data: XOR<CampaignUserUpdateManyMutationInput, CampaignUserUncheckedUpdateManyWithoutCampaignInput>
  }

  export type ItemsUpsertWithWhereUniqueWithoutCampaignInput = {
    where: ItemsWhereUniqueInput
    update: XOR<ItemsUpdateWithoutCampaignInput, ItemsUncheckedUpdateWithoutCampaignInput>
    create: XOR<ItemsCreateWithoutCampaignInput, ItemsUncheckedCreateWithoutCampaignInput>
  }

  export type ItemsUpdateWithWhereUniqueWithoutCampaignInput = {
    where: ItemsWhereUniqueInput
    data: XOR<ItemsUpdateWithoutCampaignInput, ItemsUncheckedUpdateWithoutCampaignInput>
  }

  export type ItemsUpdateManyWithWhereWithoutCampaignInput = {
    where: ItemsScalarWhereInput
    data: XOR<ItemsUpdateManyMutationInput, ItemsUncheckedUpdateManyWithoutCampaignInput>
  }

  export type ItemsScalarWhereInput = {
    AND?: ItemsScalarWhereInput | ItemsScalarWhereInput[]
    OR?: ItemsScalarWhereInput[]
    NOT?: ItemsScalarWhereInput | ItemsScalarWhereInput[]
    id?: BigIntFilter<"Items"> | bigint | number
    campaignId?: BigIntFilter<"Items"> | bigint | number
    type?: StringFilter<"Items"> | string
    rarity?: StringFilter<"Items"> | string
    name?: StringFilter<"Items"> | string
    slot?: StringFilter<"Items"> | string
    attributes?: JsonFilter<"Items">
    createdAt?: DateTimeFilter<"Items"> | Date | string
    updatedAt?: DateTimeFilter<"Items"> | Date | string
  }

  export type SpellsUpsertWithWhereUniqueWithoutCampaignInput = {
    where: SpellsWhereUniqueInput
    update: XOR<SpellsUpdateWithoutCampaignInput, SpellsUncheckedUpdateWithoutCampaignInput>
    create: XOR<SpellsCreateWithoutCampaignInput, SpellsUncheckedCreateWithoutCampaignInput>
  }

  export type SpellsUpdateWithWhereUniqueWithoutCampaignInput = {
    where: SpellsWhereUniqueInput
    data: XOR<SpellsUpdateWithoutCampaignInput, SpellsUncheckedUpdateWithoutCampaignInput>
  }

  export type SpellsUpdateManyWithWhereWithoutCampaignInput = {
    where: SpellsScalarWhereInput
    data: XOR<SpellsUpdateManyMutationInput, SpellsUncheckedUpdateManyWithoutCampaignInput>
  }

  export type SpellsScalarWhereInput = {
    AND?: SpellsScalarWhereInput | SpellsScalarWhereInput[]
    OR?: SpellsScalarWhereInput[]
    NOT?: SpellsScalarWhereInput | SpellsScalarWhereInput[]
    id?: BigIntFilter<"Spells"> | bigint | number
    campaignId?: BigIntFilter<"Spells"> | bigint | number
    name?: StringFilter<"Spells"> | string
    type?: StringFilter<"Spells"> | string
    description?: StringNullableFilter<"Spells"> | string | null
    specifications?: JsonFilter<"Spells">
    createdAt?: DateTimeFilter<"Spells"> | Date | string
    updatedAt?: DateTimeFilter<"Spells"> | Date | string
  }

  export type LevelingRuleUpsertWithWhereUniqueWithoutCampaignInput = {
    where: LevelingRuleWhereUniqueInput
    update: XOR<LevelingRuleUpdateWithoutCampaignInput, LevelingRuleUncheckedUpdateWithoutCampaignInput>
    create: XOR<LevelingRuleCreateWithoutCampaignInput, LevelingRuleUncheckedCreateWithoutCampaignInput>
  }

  export type LevelingRuleUpdateWithWhereUniqueWithoutCampaignInput = {
    where: LevelingRuleWhereUniqueInput
    data: XOR<LevelingRuleUpdateWithoutCampaignInput, LevelingRuleUncheckedUpdateWithoutCampaignInput>
  }

  export type LevelingRuleUpdateManyWithWhereWithoutCampaignInput = {
    where: LevelingRuleScalarWhereInput
    data: XOR<LevelingRuleUpdateManyMutationInput, LevelingRuleUncheckedUpdateManyWithoutCampaignInput>
  }

  export type LevelingRuleScalarWhereInput = {
    AND?: LevelingRuleScalarWhereInput | LevelingRuleScalarWhereInput[]
    OR?: LevelingRuleScalarWhereInput[]
    NOT?: LevelingRuleScalarWhereInput | LevelingRuleScalarWhereInput[]
    id?: BigIntFilter<"LevelingRule"> | bigint | number
    campaignId?: BigIntFilter<"LevelingRule"> | bigint | number
    level?: BigIntFilter<"LevelingRule"> | bigint | number
    requiredXp?: BigIntFilter<"LevelingRule"> | bigint | number
    createdAt?: DateTimeFilter<"LevelingRule"> | Date | string
    updatedAt?: DateTimeFilter<"LevelingRule"> | Date | string
  }

  export type ItemTransactionHistoryUpsertWithWhereUniqueWithoutCampaignInput = {
    where: ItemTransactionHistoryWhereUniqueInput
    update: XOR<ItemTransactionHistoryUpdateWithoutCampaignInput, ItemTransactionHistoryUncheckedUpdateWithoutCampaignInput>
    create: XOR<ItemTransactionHistoryCreateWithoutCampaignInput, ItemTransactionHistoryUncheckedCreateWithoutCampaignInput>
  }

  export type ItemTransactionHistoryUpdateWithWhereUniqueWithoutCampaignInput = {
    where: ItemTransactionHistoryWhereUniqueInput
    data: XOR<ItemTransactionHistoryUpdateWithoutCampaignInput, ItemTransactionHistoryUncheckedUpdateWithoutCampaignInput>
  }

  export type ItemTransactionHistoryUpdateManyWithWhereWithoutCampaignInput = {
    where: ItemTransactionHistoryScalarWhereInput
    data: XOR<ItemTransactionHistoryUpdateManyMutationInput, ItemTransactionHistoryUncheckedUpdateManyWithoutCampaignInput>
  }

  export type ItemTransactionHistoryScalarWhereInput = {
    AND?: ItemTransactionHistoryScalarWhereInput | ItemTransactionHistoryScalarWhereInput[]
    OR?: ItemTransactionHistoryScalarWhereInput[]
    NOT?: ItemTransactionHistoryScalarWhereInput | ItemTransactionHistoryScalarWhereInput[]
    id?: BigIntFilter<"ItemTransactionHistory"> | bigint | number
    campaignId?: BigIntFilter<"ItemTransactionHistory"> | bigint | number
    itemId?: BigIntFilter<"ItemTransactionHistory"> | bigint | number
    inventoryId?: BigIntFilter<"ItemTransactionHistory"> | bigint | number
    fromInventoryId?: BigIntNullableFilter<"ItemTransactionHistory"> | bigint | number | null
    transactionType?: StringFilter<"ItemTransactionHistory"> | string
    amount?: StringNullableFilter<"ItemTransactionHistory"> | string | null
    createdAt?: DateTimeFilter<"ItemTransactionHistory"> | Date | string
    updatedAt?: DateTimeFilter<"ItemTransactionHistory"> | Date | string
  }

  export type UserCreateWithoutCampaignUsersInput = {
    id?: bigint | number
    name: string
    password: string
    email: string
    avatar?: string | null
    type: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCampaignUsersInput = {
    id?: bigint | number
    name: string
    password: string
    email: string
    avatar?: string | null
    type: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCampaignUsersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCampaignUsersInput, UserUncheckedCreateWithoutCampaignUsersInput>
  }

  export type CampaignCreateWithoutCampaignUsersInput = {
    id?: bigint | number
    name: string
    description: string
    active: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCampaignInput
    items?: ItemsCreateNestedManyWithoutCampaignInput
    spells?: SpellsCreateNestedManyWithoutCampaignInput
    levelingRules?: LevelingRuleCreateNestedManyWithoutCampaignInput
    ItemTransactionHistory?: ItemTransactionHistoryCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutCampaignUsersInput = {
    id?: bigint | number
    name: string
    description: string
    active: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCampaignInput
    items?: ItemsUncheckedCreateNestedManyWithoutCampaignInput
    spells?: SpellsUncheckedCreateNestedManyWithoutCampaignInput
    levelingRules?: LevelingRuleUncheckedCreateNestedManyWithoutCampaignInput
    ItemTransactionHistory?: ItemTransactionHistoryUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutCampaignUsersInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutCampaignUsersInput, CampaignUncheckedCreateWithoutCampaignUsersInput>
  }

  export type UserUpsertWithoutCampaignUsersInput = {
    update: XOR<UserUpdateWithoutCampaignUsersInput, UserUncheckedUpdateWithoutCampaignUsersInput>
    create: XOR<UserCreateWithoutCampaignUsersInput, UserUncheckedCreateWithoutCampaignUsersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCampaignUsersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCampaignUsersInput, UserUncheckedUpdateWithoutCampaignUsersInput>
  }

  export type UserUpdateWithoutCampaignUsersInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCampaignUsersInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CampaignUpsertWithoutCampaignUsersInput = {
    update: XOR<CampaignUpdateWithoutCampaignUsersInput, CampaignUncheckedUpdateWithoutCampaignUsersInput>
    create: XOR<CampaignCreateWithoutCampaignUsersInput, CampaignUncheckedCreateWithoutCampaignUsersInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutCampaignUsersInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutCampaignUsersInput, CampaignUncheckedUpdateWithoutCampaignUsersInput>
  }

  export type CampaignUpdateWithoutCampaignUsersInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCampaignNestedInput
    items?: ItemsUpdateManyWithoutCampaignNestedInput
    spells?: SpellsUpdateManyWithoutCampaignNestedInput
    levelingRules?: LevelingRuleUpdateManyWithoutCampaignNestedInput
    ItemTransactionHistory?: ItemTransactionHistoryUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutCampaignUsersInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCampaignNestedInput
    items?: ItemsUncheckedUpdateManyWithoutCampaignNestedInput
    spells?: SpellsUncheckedUpdateManyWithoutCampaignNestedInput
    levelingRules?: LevelingRuleUncheckedUpdateManyWithoutCampaignNestedInput
    ItemTransactionHistory?: ItemTransactionHistoryUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type UserCreateWithoutCharactersInput = {
    id?: bigint | number
    name: string
    password: string
    email: string
    avatar?: string | null
    type: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    campaignUsers?: CampaignUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCharactersInput = {
    id?: bigint | number
    name: string
    password: string
    email: string
    avatar?: string | null
    type: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    campaignUsers?: CampaignUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCharactersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCharactersInput, UserUncheckedCreateWithoutCharactersInput>
  }

  export type CampaignCreateWithoutCharactersInput = {
    id?: bigint | number
    name: string
    description: string
    active: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    campaignUsers?: CampaignUserCreateNestedManyWithoutCampaignInput
    items?: ItemsCreateNestedManyWithoutCampaignInput
    spells?: SpellsCreateNestedManyWithoutCampaignInput
    levelingRules?: LevelingRuleCreateNestedManyWithoutCampaignInput
    ItemTransactionHistory?: ItemTransactionHistoryCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutCharactersInput = {
    id?: bigint | number
    name: string
    description: string
    active: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    campaignUsers?: CampaignUserUncheckedCreateNestedManyWithoutCampaignInput
    items?: ItemsUncheckedCreateNestedManyWithoutCampaignInput
    spells?: SpellsUncheckedCreateNestedManyWithoutCampaignInput
    levelingRules?: LevelingRuleUncheckedCreateNestedManyWithoutCampaignInput
    ItemTransactionHistory?: ItemTransactionHistoryUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutCharactersInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutCharactersInput, CampaignUncheckedCreateWithoutCharactersInput>
  }

  export type InventoryCreateWithoutCharacterInput = {
    id?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    inventoryItems?: InventoryItemCreateNestedManyWithoutInventoryInput
    transactions?: ItemTransactionHistoryCreateNestedManyWithoutInventoryInput
    Currency?: CurrencyCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUncheckedCreateWithoutCharacterInput = {
    id?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    inventoryItems?: InventoryItemUncheckedCreateNestedManyWithoutInventoryInput
    transactions?: ItemTransactionHistoryUncheckedCreateNestedManyWithoutInventoryInput
    Currency?: CurrencyUncheckedCreateNestedManyWithoutInventoryInput
  }

  export type InventoryCreateOrConnectWithoutCharacterInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutCharacterInput, InventoryUncheckedCreateWithoutCharacterInput>
  }

  export type EquippedItemCreateWithoutCharacterInput = {
    id?: bigint | number
    slot: string
    createdAt?: Date | string
    updatedAt?: Date | string
    inventoryItem: InventoryItemCreateNestedOneWithoutEquippedItemInput
  }

  export type EquippedItemUncheckedCreateWithoutCharacterInput = {
    id?: bigint | number
    inventoryItemId: bigint | number
    slot: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquippedItemCreateOrConnectWithoutCharacterInput = {
    where: EquippedItemWhereUniqueInput
    create: XOR<EquippedItemCreateWithoutCharacterInput, EquippedItemUncheckedCreateWithoutCharacterInput>
  }

  export type EquippedItemCreateManyCharacterInputEnvelope = {
    data: EquippedItemCreateManyCharacterInput | EquippedItemCreateManyCharacterInput[]
    skipDuplicates?: boolean
  }

  export type EquippedSpellCreateWithoutCharacterInput = {
    id?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    spell: SpellsCreateNestedOneWithoutEquippedSpellsInput
  }

  export type EquippedSpellUncheckedCreateWithoutCharacterInput = {
    id?: bigint | number
    spellId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquippedSpellCreateOrConnectWithoutCharacterInput = {
    where: EquippedSpellWhereUniqueInput
    create: XOR<EquippedSpellCreateWithoutCharacterInput, EquippedSpellUncheckedCreateWithoutCharacterInput>
  }

  export type EquippedSpellCreateManyCharacterInputEnvelope = {
    data: EquippedSpellCreateManyCharacterInput | EquippedSpellCreateManyCharacterInput[]
    skipDuplicates?: boolean
  }

  export type CharacterBattleHistoryCreateWithoutCharacterInput = {
    id?: bigint | number
    sourceType: string
    description?: string | null
    xpGained: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterBattleHistoryUncheckedCreateWithoutCharacterInput = {
    id?: bigint | number
    sourceType: string
    description?: string | null
    xpGained: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterBattleHistoryCreateOrConnectWithoutCharacterInput = {
    where: CharacterBattleHistoryWhereUniqueInput
    create: XOR<CharacterBattleHistoryCreateWithoutCharacterInput, CharacterBattleHistoryUncheckedCreateWithoutCharacterInput>
  }

  export type CharacterBattleHistoryCreateManyCharacterInputEnvelope = {
    data: CharacterBattleHistoryCreateManyCharacterInput | CharacterBattleHistoryCreateManyCharacterInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCharactersInput = {
    update: XOR<UserUpdateWithoutCharactersInput, UserUncheckedUpdateWithoutCharactersInput>
    create: XOR<UserCreateWithoutCharactersInput, UserUncheckedCreateWithoutCharactersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCharactersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCharactersInput, UserUncheckedUpdateWithoutCharactersInput>
  }

  export type UserUpdateWithoutCharactersInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaignUsers?: CampaignUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCharactersInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaignUsers?: CampaignUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CampaignUpsertWithoutCharactersInput = {
    update: XOR<CampaignUpdateWithoutCharactersInput, CampaignUncheckedUpdateWithoutCharactersInput>
    create: XOR<CampaignCreateWithoutCharactersInput, CampaignUncheckedCreateWithoutCharactersInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutCharactersInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutCharactersInput, CampaignUncheckedUpdateWithoutCharactersInput>
  }

  export type CampaignUpdateWithoutCharactersInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaignUsers?: CampaignUserUpdateManyWithoutCampaignNestedInput
    items?: ItemsUpdateManyWithoutCampaignNestedInput
    spells?: SpellsUpdateManyWithoutCampaignNestedInput
    levelingRules?: LevelingRuleUpdateManyWithoutCampaignNestedInput
    ItemTransactionHistory?: ItemTransactionHistoryUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutCharactersInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaignUsers?: CampaignUserUncheckedUpdateManyWithoutCampaignNestedInput
    items?: ItemsUncheckedUpdateManyWithoutCampaignNestedInput
    spells?: SpellsUncheckedUpdateManyWithoutCampaignNestedInput
    levelingRules?: LevelingRuleUncheckedUpdateManyWithoutCampaignNestedInput
    ItemTransactionHistory?: ItemTransactionHistoryUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type InventoryUpsertWithoutCharacterInput = {
    update: XOR<InventoryUpdateWithoutCharacterInput, InventoryUncheckedUpdateWithoutCharacterInput>
    create: XOR<InventoryCreateWithoutCharacterInput, InventoryUncheckedCreateWithoutCharacterInput>
    where?: InventoryWhereInput
  }

  export type InventoryUpdateToOneWithWhereWithoutCharacterInput = {
    where?: InventoryWhereInput
    data: XOR<InventoryUpdateWithoutCharacterInput, InventoryUncheckedUpdateWithoutCharacterInput>
  }

  export type InventoryUpdateWithoutCharacterInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventoryItems?: InventoryItemUpdateManyWithoutInventoryNestedInput
    transactions?: ItemTransactionHistoryUpdateManyWithoutInventoryNestedInput
    Currency?: CurrencyUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateWithoutCharacterInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventoryItems?: InventoryItemUncheckedUpdateManyWithoutInventoryNestedInput
    transactions?: ItemTransactionHistoryUncheckedUpdateManyWithoutInventoryNestedInput
    Currency?: CurrencyUncheckedUpdateManyWithoutInventoryNestedInput
  }

  export type EquippedItemUpsertWithWhereUniqueWithoutCharacterInput = {
    where: EquippedItemWhereUniqueInput
    update: XOR<EquippedItemUpdateWithoutCharacterInput, EquippedItemUncheckedUpdateWithoutCharacterInput>
    create: XOR<EquippedItemCreateWithoutCharacterInput, EquippedItemUncheckedCreateWithoutCharacterInput>
  }

  export type EquippedItemUpdateWithWhereUniqueWithoutCharacterInput = {
    where: EquippedItemWhereUniqueInput
    data: XOR<EquippedItemUpdateWithoutCharacterInput, EquippedItemUncheckedUpdateWithoutCharacterInput>
  }

  export type EquippedItemUpdateManyWithWhereWithoutCharacterInput = {
    where: EquippedItemScalarWhereInput
    data: XOR<EquippedItemUpdateManyMutationInput, EquippedItemUncheckedUpdateManyWithoutCharacterInput>
  }

  export type EquippedItemScalarWhereInput = {
    AND?: EquippedItemScalarWhereInput | EquippedItemScalarWhereInput[]
    OR?: EquippedItemScalarWhereInput[]
    NOT?: EquippedItemScalarWhereInput | EquippedItemScalarWhereInput[]
    id?: BigIntFilter<"EquippedItem"> | bigint | number
    characterId?: BigIntFilter<"EquippedItem"> | bigint | number
    inventoryItemId?: BigIntFilter<"EquippedItem"> | bigint | number
    slot?: StringFilter<"EquippedItem"> | string
    createdAt?: DateTimeFilter<"EquippedItem"> | Date | string
    updatedAt?: DateTimeFilter<"EquippedItem"> | Date | string
  }

  export type EquippedSpellUpsertWithWhereUniqueWithoutCharacterInput = {
    where: EquippedSpellWhereUniqueInput
    update: XOR<EquippedSpellUpdateWithoutCharacterInput, EquippedSpellUncheckedUpdateWithoutCharacterInput>
    create: XOR<EquippedSpellCreateWithoutCharacterInput, EquippedSpellUncheckedCreateWithoutCharacterInput>
  }

  export type EquippedSpellUpdateWithWhereUniqueWithoutCharacterInput = {
    where: EquippedSpellWhereUniqueInput
    data: XOR<EquippedSpellUpdateWithoutCharacterInput, EquippedSpellUncheckedUpdateWithoutCharacterInput>
  }

  export type EquippedSpellUpdateManyWithWhereWithoutCharacterInput = {
    where: EquippedSpellScalarWhereInput
    data: XOR<EquippedSpellUpdateManyMutationInput, EquippedSpellUncheckedUpdateManyWithoutCharacterInput>
  }

  export type EquippedSpellScalarWhereInput = {
    AND?: EquippedSpellScalarWhereInput | EquippedSpellScalarWhereInput[]
    OR?: EquippedSpellScalarWhereInput[]
    NOT?: EquippedSpellScalarWhereInput | EquippedSpellScalarWhereInput[]
    id?: BigIntFilter<"EquippedSpell"> | bigint | number
    characterId?: BigIntFilter<"EquippedSpell"> | bigint | number
    spellId?: BigIntFilter<"EquippedSpell"> | bigint | number
    createdAt?: DateTimeFilter<"EquippedSpell"> | Date | string
    updatedAt?: DateTimeFilter<"EquippedSpell"> | Date | string
  }

  export type CharacterBattleHistoryUpsertWithWhereUniqueWithoutCharacterInput = {
    where: CharacterBattleHistoryWhereUniqueInput
    update: XOR<CharacterBattleHistoryUpdateWithoutCharacterInput, CharacterBattleHistoryUncheckedUpdateWithoutCharacterInput>
    create: XOR<CharacterBattleHistoryCreateWithoutCharacterInput, CharacterBattleHistoryUncheckedCreateWithoutCharacterInput>
  }

  export type CharacterBattleHistoryUpdateWithWhereUniqueWithoutCharacterInput = {
    where: CharacterBattleHistoryWhereUniqueInput
    data: XOR<CharacterBattleHistoryUpdateWithoutCharacterInput, CharacterBattleHistoryUncheckedUpdateWithoutCharacterInput>
  }

  export type CharacterBattleHistoryUpdateManyWithWhereWithoutCharacterInput = {
    where: CharacterBattleHistoryScalarWhereInput
    data: XOR<CharacterBattleHistoryUpdateManyMutationInput, CharacterBattleHistoryUncheckedUpdateManyWithoutCharacterInput>
  }

  export type CharacterBattleHistoryScalarWhereInput = {
    AND?: CharacterBattleHistoryScalarWhereInput | CharacterBattleHistoryScalarWhereInput[]
    OR?: CharacterBattleHistoryScalarWhereInput[]
    NOT?: CharacterBattleHistoryScalarWhereInput | CharacterBattleHistoryScalarWhereInput[]
    id?: BigIntFilter<"CharacterBattleHistory"> | bigint | number
    characterId?: BigIntFilter<"CharacterBattleHistory"> | bigint | number
    sourceType?: StringFilter<"CharacterBattleHistory"> | string
    description?: StringNullableFilter<"CharacterBattleHistory"> | string | null
    xpGained?: IntFilter<"CharacterBattleHistory"> | number
    createdAt?: DateTimeFilter<"CharacterBattleHistory"> | Date | string
    updatedAt?: DateTimeFilter<"CharacterBattleHistory"> | Date | string
  }

  export type InventoryCreateWithoutCurrencyInput = {
    id?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    character: CharacterCreateNestedOneWithoutInventoryInput
    inventoryItems?: InventoryItemCreateNestedManyWithoutInventoryInput
    transactions?: ItemTransactionHistoryCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUncheckedCreateWithoutCurrencyInput = {
    id?: bigint | number
    characterId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    inventoryItems?: InventoryItemUncheckedCreateNestedManyWithoutInventoryInput
    transactions?: ItemTransactionHistoryUncheckedCreateNestedManyWithoutInventoryInput
  }

  export type InventoryCreateOrConnectWithoutCurrencyInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutCurrencyInput, InventoryUncheckedCreateWithoutCurrencyInput>
  }

  export type InventoryUpsertWithoutCurrencyInput = {
    update: XOR<InventoryUpdateWithoutCurrencyInput, InventoryUncheckedUpdateWithoutCurrencyInput>
    create: XOR<InventoryCreateWithoutCurrencyInput, InventoryUncheckedCreateWithoutCurrencyInput>
    where?: InventoryWhereInput
  }

  export type InventoryUpdateToOneWithWhereWithoutCurrencyInput = {
    where?: InventoryWhereInput
    data: XOR<InventoryUpdateWithoutCurrencyInput, InventoryUncheckedUpdateWithoutCurrencyInput>
  }

  export type InventoryUpdateWithoutCurrencyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character?: CharacterUpdateOneRequiredWithoutInventoryNestedInput
    inventoryItems?: InventoryItemUpdateManyWithoutInventoryNestedInput
    transactions?: ItemTransactionHistoryUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateWithoutCurrencyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    characterId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventoryItems?: InventoryItemUncheckedUpdateManyWithoutInventoryNestedInput
    transactions?: ItemTransactionHistoryUncheckedUpdateManyWithoutInventoryNestedInput
  }

  export type CharacterCreateWithoutInventoryInput = {
    id?: bigint | number
    name: string
    avatar?: string | null
    sheet: JsonNullValueInput | InputJsonValue
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCharactersInput
    campaign: CampaignCreateNestedOneWithoutCharactersInput
    equippedItems?: EquippedItemCreateNestedManyWithoutCharacterInput
    equippedSpells?: EquippedSpellCreateNestedManyWithoutCharacterInput
    battleHistory?: CharacterBattleHistoryCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutInventoryInput = {
    id?: bigint | number
    userId: bigint | number
    campaignId: bigint | number
    name: string
    avatar?: string | null
    sheet: JsonNullValueInput | InputJsonValue
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    equippedItems?: EquippedItemUncheckedCreateNestedManyWithoutCharacterInput
    equippedSpells?: EquippedSpellUncheckedCreateNestedManyWithoutCharacterInput
    battleHistory?: CharacterBattleHistoryUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutInventoryInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutInventoryInput, CharacterUncheckedCreateWithoutInventoryInput>
  }

  export type InventoryItemCreateWithoutInventoryInput = {
    id?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    item: ItemsCreateNestedOneWithoutInventoryItemsInput
    equippedItem?: EquippedItemCreateNestedOneWithoutInventoryItemInput
  }

  export type InventoryItemUncheckedCreateWithoutInventoryInput = {
    id?: bigint | number
    itemsId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    equippedItem?: EquippedItemUncheckedCreateNestedOneWithoutInventoryItemInput
  }

  export type InventoryItemCreateOrConnectWithoutInventoryInput = {
    where: InventoryItemWhereUniqueInput
    create: XOR<InventoryItemCreateWithoutInventoryInput, InventoryItemUncheckedCreateWithoutInventoryInput>
  }

  export type InventoryItemCreateManyInventoryInputEnvelope = {
    data: InventoryItemCreateManyInventoryInput | InventoryItemCreateManyInventoryInput[]
    skipDuplicates?: boolean
  }

  export type ItemTransactionHistoryCreateWithoutInventoryInput = {
    id?: bigint | number
    fromInventoryId?: bigint | number | null
    transactionType: string
    amount?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutItemTransactionHistoryInput
    item: ItemsCreateNestedOneWithoutTransactionHistoriesInput
  }

  export type ItemTransactionHistoryUncheckedCreateWithoutInventoryInput = {
    id?: bigint | number
    campaignId: bigint | number
    itemId: bigint | number
    fromInventoryId?: bigint | number | null
    transactionType: string
    amount?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemTransactionHistoryCreateOrConnectWithoutInventoryInput = {
    where: ItemTransactionHistoryWhereUniqueInput
    create: XOR<ItemTransactionHistoryCreateWithoutInventoryInput, ItemTransactionHistoryUncheckedCreateWithoutInventoryInput>
  }

  export type ItemTransactionHistoryCreateManyInventoryInputEnvelope = {
    data: ItemTransactionHistoryCreateManyInventoryInput | ItemTransactionHistoryCreateManyInventoryInput[]
    skipDuplicates?: boolean
  }

  export type CurrencyCreateWithoutInventoryInput = {
    id?: bigint | number
    name: string
    amount: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrencyUncheckedCreateWithoutInventoryInput = {
    id?: bigint | number
    name: string
    amount: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrencyCreateOrConnectWithoutInventoryInput = {
    where: CurrencyWhereUniqueInput
    create: XOR<CurrencyCreateWithoutInventoryInput, CurrencyUncheckedCreateWithoutInventoryInput>
  }

  export type CurrencyCreateManyInventoryInputEnvelope = {
    data: CurrencyCreateManyInventoryInput | CurrencyCreateManyInventoryInput[]
    skipDuplicates?: boolean
  }

  export type CharacterUpsertWithoutInventoryInput = {
    update: XOR<CharacterUpdateWithoutInventoryInput, CharacterUncheckedUpdateWithoutInventoryInput>
    create: XOR<CharacterCreateWithoutInventoryInput, CharacterUncheckedCreateWithoutInventoryInput>
    where?: CharacterWhereInput
  }

  export type CharacterUpdateToOneWithWhereWithoutInventoryInput = {
    where?: CharacterWhereInput
    data: XOR<CharacterUpdateWithoutInventoryInput, CharacterUncheckedUpdateWithoutInventoryInput>
  }

  export type CharacterUpdateWithoutInventoryInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sheet?: JsonNullValueInput | InputJsonValue
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCharactersNestedInput
    campaign?: CampaignUpdateOneRequiredWithoutCharactersNestedInput
    equippedItems?: EquippedItemUpdateManyWithoutCharacterNestedInput
    equippedSpells?: EquippedSpellUpdateManyWithoutCharacterNestedInput
    battleHistory?: CharacterBattleHistoryUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutInventoryInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sheet?: JsonNullValueInput | InputJsonValue
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equippedItems?: EquippedItemUncheckedUpdateManyWithoutCharacterNestedInput
    equippedSpells?: EquippedSpellUncheckedUpdateManyWithoutCharacterNestedInput
    battleHistory?: CharacterBattleHistoryUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type InventoryItemUpsertWithWhereUniqueWithoutInventoryInput = {
    where: InventoryItemWhereUniqueInput
    update: XOR<InventoryItemUpdateWithoutInventoryInput, InventoryItemUncheckedUpdateWithoutInventoryInput>
    create: XOR<InventoryItemCreateWithoutInventoryInput, InventoryItemUncheckedCreateWithoutInventoryInput>
  }

  export type InventoryItemUpdateWithWhereUniqueWithoutInventoryInput = {
    where: InventoryItemWhereUniqueInput
    data: XOR<InventoryItemUpdateWithoutInventoryInput, InventoryItemUncheckedUpdateWithoutInventoryInput>
  }

  export type InventoryItemUpdateManyWithWhereWithoutInventoryInput = {
    where: InventoryItemScalarWhereInput
    data: XOR<InventoryItemUpdateManyMutationInput, InventoryItemUncheckedUpdateManyWithoutInventoryInput>
  }

  export type InventoryItemScalarWhereInput = {
    AND?: InventoryItemScalarWhereInput | InventoryItemScalarWhereInput[]
    OR?: InventoryItemScalarWhereInput[]
    NOT?: InventoryItemScalarWhereInput | InventoryItemScalarWhereInput[]
    id?: BigIntFilter<"InventoryItem"> | bigint | number
    inventoryId?: BigIntFilter<"InventoryItem"> | bigint | number
    itemsId?: BigIntFilter<"InventoryItem"> | bigint | number
    createdAt?: DateTimeFilter<"InventoryItem"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryItem"> | Date | string
  }

  export type ItemTransactionHistoryUpsertWithWhereUniqueWithoutInventoryInput = {
    where: ItemTransactionHistoryWhereUniqueInput
    update: XOR<ItemTransactionHistoryUpdateWithoutInventoryInput, ItemTransactionHistoryUncheckedUpdateWithoutInventoryInput>
    create: XOR<ItemTransactionHistoryCreateWithoutInventoryInput, ItemTransactionHistoryUncheckedCreateWithoutInventoryInput>
  }

  export type ItemTransactionHistoryUpdateWithWhereUniqueWithoutInventoryInput = {
    where: ItemTransactionHistoryWhereUniqueInput
    data: XOR<ItemTransactionHistoryUpdateWithoutInventoryInput, ItemTransactionHistoryUncheckedUpdateWithoutInventoryInput>
  }

  export type ItemTransactionHistoryUpdateManyWithWhereWithoutInventoryInput = {
    where: ItemTransactionHistoryScalarWhereInput
    data: XOR<ItemTransactionHistoryUpdateManyMutationInput, ItemTransactionHistoryUncheckedUpdateManyWithoutInventoryInput>
  }

  export type CurrencyUpsertWithWhereUniqueWithoutInventoryInput = {
    where: CurrencyWhereUniqueInput
    update: XOR<CurrencyUpdateWithoutInventoryInput, CurrencyUncheckedUpdateWithoutInventoryInput>
    create: XOR<CurrencyCreateWithoutInventoryInput, CurrencyUncheckedCreateWithoutInventoryInput>
  }

  export type CurrencyUpdateWithWhereUniqueWithoutInventoryInput = {
    where: CurrencyWhereUniqueInput
    data: XOR<CurrencyUpdateWithoutInventoryInput, CurrencyUncheckedUpdateWithoutInventoryInput>
  }

  export type CurrencyUpdateManyWithWhereWithoutInventoryInput = {
    where: CurrencyScalarWhereInput
    data: XOR<CurrencyUpdateManyMutationInput, CurrencyUncheckedUpdateManyWithoutInventoryInput>
  }

  export type CurrencyScalarWhereInput = {
    AND?: CurrencyScalarWhereInput | CurrencyScalarWhereInput[]
    OR?: CurrencyScalarWhereInput[]
    NOT?: CurrencyScalarWhereInput | CurrencyScalarWhereInput[]
    id?: BigIntFilter<"Currency"> | bigint | number
    inventoryId?: BigIntFilter<"Currency"> | bigint | number
    name?: StringFilter<"Currency"> | string
    amount?: StringFilter<"Currency"> | string
    createdAt?: DateTimeFilter<"Currency"> | Date | string
    updatedAt?: DateTimeFilter<"Currency"> | Date | string
  }

  export type InventoryCreateWithoutInventoryItemsInput = {
    id?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    character: CharacterCreateNestedOneWithoutInventoryInput
    transactions?: ItemTransactionHistoryCreateNestedManyWithoutInventoryInput
    Currency?: CurrencyCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUncheckedCreateWithoutInventoryItemsInput = {
    id?: bigint | number
    characterId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: ItemTransactionHistoryUncheckedCreateNestedManyWithoutInventoryInput
    Currency?: CurrencyUncheckedCreateNestedManyWithoutInventoryInput
  }

  export type InventoryCreateOrConnectWithoutInventoryItemsInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutInventoryItemsInput, InventoryUncheckedCreateWithoutInventoryItemsInput>
  }

  export type ItemsCreateWithoutInventoryItemsInput = {
    id?: bigint | number
    type: string
    rarity: string
    name: string
    slot: string
    attributes: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutItemsInput
    transactionHistories?: ItemTransactionHistoryCreateNestedManyWithoutItemInput
  }

  export type ItemsUncheckedCreateWithoutInventoryItemsInput = {
    id?: bigint | number
    campaignId: bigint | number
    type: string
    rarity: string
    name: string
    slot: string
    attributes: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    transactionHistories?: ItemTransactionHistoryUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemsCreateOrConnectWithoutInventoryItemsInput = {
    where: ItemsWhereUniqueInput
    create: XOR<ItemsCreateWithoutInventoryItemsInput, ItemsUncheckedCreateWithoutInventoryItemsInput>
  }

  export type EquippedItemCreateWithoutInventoryItemInput = {
    id?: bigint | number
    slot: string
    createdAt?: Date | string
    updatedAt?: Date | string
    character: CharacterCreateNestedOneWithoutEquippedItemsInput
  }

  export type EquippedItemUncheckedCreateWithoutInventoryItemInput = {
    id?: bigint | number
    characterId: bigint | number
    slot: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquippedItemCreateOrConnectWithoutInventoryItemInput = {
    where: EquippedItemWhereUniqueInput
    create: XOR<EquippedItemCreateWithoutInventoryItemInput, EquippedItemUncheckedCreateWithoutInventoryItemInput>
  }

  export type InventoryUpsertWithoutInventoryItemsInput = {
    update: XOR<InventoryUpdateWithoutInventoryItemsInput, InventoryUncheckedUpdateWithoutInventoryItemsInput>
    create: XOR<InventoryCreateWithoutInventoryItemsInput, InventoryUncheckedCreateWithoutInventoryItemsInput>
    where?: InventoryWhereInput
  }

  export type InventoryUpdateToOneWithWhereWithoutInventoryItemsInput = {
    where?: InventoryWhereInput
    data: XOR<InventoryUpdateWithoutInventoryItemsInput, InventoryUncheckedUpdateWithoutInventoryItemsInput>
  }

  export type InventoryUpdateWithoutInventoryItemsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character?: CharacterUpdateOneRequiredWithoutInventoryNestedInput
    transactions?: ItemTransactionHistoryUpdateManyWithoutInventoryNestedInput
    Currency?: CurrencyUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateWithoutInventoryItemsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    characterId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: ItemTransactionHistoryUncheckedUpdateManyWithoutInventoryNestedInput
    Currency?: CurrencyUncheckedUpdateManyWithoutInventoryNestedInput
  }

  export type ItemsUpsertWithoutInventoryItemsInput = {
    update: XOR<ItemsUpdateWithoutInventoryItemsInput, ItemsUncheckedUpdateWithoutInventoryItemsInput>
    create: XOR<ItemsCreateWithoutInventoryItemsInput, ItemsUncheckedCreateWithoutInventoryItemsInput>
    where?: ItemsWhereInput
  }

  export type ItemsUpdateToOneWithWhereWithoutInventoryItemsInput = {
    where?: ItemsWhereInput
    data: XOR<ItemsUpdateWithoutInventoryItemsInput, ItemsUncheckedUpdateWithoutInventoryItemsInput>
  }

  export type ItemsUpdateWithoutInventoryItemsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    rarity?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slot?: StringFieldUpdateOperationsInput | string
    attributes?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutItemsNestedInput
    transactionHistories?: ItemTransactionHistoryUpdateManyWithoutItemNestedInput
  }

  export type ItemsUncheckedUpdateWithoutInventoryItemsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    rarity?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slot?: StringFieldUpdateOperationsInput | string
    attributes?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionHistories?: ItemTransactionHistoryUncheckedUpdateManyWithoutItemNestedInput
  }

  export type EquippedItemUpsertWithoutInventoryItemInput = {
    update: XOR<EquippedItemUpdateWithoutInventoryItemInput, EquippedItemUncheckedUpdateWithoutInventoryItemInput>
    create: XOR<EquippedItemCreateWithoutInventoryItemInput, EquippedItemUncheckedCreateWithoutInventoryItemInput>
    where?: EquippedItemWhereInput
  }

  export type EquippedItemUpdateToOneWithWhereWithoutInventoryItemInput = {
    where?: EquippedItemWhereInput
    data: XOR<EquippedItemUpdateWithoutInventoryItemInput, EquippedItemUncheckedUpdateWithoutInventoryItemInput>
  }

  export type EquippedItemUpdateWithoutInventoryItemInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    slot?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character?: CharacterUpdateOneRequiredWithoutEquippedItemsNestedInput
  }

  export type EquippedItemUncheckedUpdateWithoutInventoryItemInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    characterId?: BigIntFieldUpdateOperationsInput | bigint | number
    slot?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignCreateWithoutItemsInput = {
    id?: bigint | number
    name: string
    description: string
    active: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCampaignInput
    campaignUsers?: CampaignUserCreateNestedManyWithoutCampaignInput
    spells?: SpellsCreateNestedManyWithoutCampaignInput
    levelingRules?: LevelingRuleCreateNestedManyWithoutCampaignInput
    ItemTransactionHistory?: ItemTransactionHistoryCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutItemsInput = {
    id?: bigint | number
    name: string
    description: string
    active: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCampaignInput
    campaignUsers?: CampaignUserUncheckedCreateNestedManyWithoutCampaignInput
    spells?: SpellsUncheckedCreateNestedManyWithoutCampaignInput
    levelingRules?: LevelingRuleUncheckedCreateNestedManyWithoutCampaignInput
    ItemTransactionHistory?: ItemTransactionHistoryUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutItemsInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutItemsInput, CampaignUncheckedCreateWithoutItemsInput>
  }

  export type InventoryItemCreateWithoutItemInput = {
    id?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    inventory: InventoryCreateNestedOneWithoutInventoryItemsInput
    equippedItem?: EquippedItemCreateNestedOneWithoutInventoryItemInput
  }

  export type InventoryItemUncheckedCreateWithoutItemInput = {
    id?: bigint | number
    inventoryId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    equippedItem?: EquippedItemUncheckedCreateNestedOneWithoutInventoryItemInput
  }

  export type InventoryItemCreateOrConnectWithoutItemInput = {
    where: InventoryItemWhereUniqueInput
    create: XOR<InventoryItemCreateWithoutItemInput, InventoryItemUncheckedCreateWithoutItemInput>
  }

  export type InventoryItemCreateManyItemInputEnvelope = {
    data: InventoryItemCreateManyItemInput | InventoryItemCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type ItemTransactionHistoryCreateWithoutItemInput = {
    id?: bigint | number
    fromInventoryId?: bigint | number | null
    transactionType: string
    amount?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutItemTransactionHistoryInput
    inventory: InventoryCreateNestedOneWithoutTransactionsInput
  }

  export type ItemTransactionHistoryUncheckedCreateWithoutItemInput = {
    id?: bigint | number
    campaignId: bigint | number
    inventoryId: bigint | number
    fromInventoryId?: bigint | number | null
    transactionType: string
    amount?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemTransactionHistoryCreateOrConnectWithoutItemInput = {
    where: ItemTransactionHistoryWhereUniqueInput
    create: XOR<ItemTransactionHistoryCreateWithoutItemInput, ItemTransactionHistoryUncheckedCreateWithoutItemInput>
  }

  export type ItemTransactionHistoryCreateManyItemInputEnvelope = {
    data: ItemTransactionHistoryCreateManyItemInput | ItemTransactionHistoryCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type CampaignUpsertWithoutItemsInput = {
    update: XOR<CampaignUpdateWithoutItemsInput, CampaignUncheckedUpdateWithoutItemsInput>
    create: XOR<CampaignCreateWithoutItemsInput, CampaignUncheckedCreateWithoutItemsInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutItemsInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutItemsInput, CampaignUncheckedUpdateWithoutItemsInput>
  }

  export type CampaignUpdateWithoutItemsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCampaignNestedInput
    campaignUsers?: CampaignUserUpdateManyWithoutCampaignNestedInput
    spells?: SpellsUpdateManyWithoutCampaignNestedInput
    levelingRules?: LevelingRuleUpdateManyWithoutCampaignNestedInput
    ItemTransactionHistory?: ItemTransactionHistoryUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutItemsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCampaignNestedInput
    campaignUsers?: CampaignUserUncheckedUpdateManyWithoutCampaignNestedInput
    spells?: SpellsUncheckedUpdateManyWithoutCampaignNestedInput
    levelingRules?: LevelingRuleUncheckedUpdateManyWithoutCampaignNestedInput
    ItemTransactionHistory?: ItemTransactionHistoryUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type InventoryItemUpsertWithWhereUniqueWithoutItemInput = {
    where: InventoryItemWhereUniqueInput
    update: XOR<InventoryItemUpdateWithoutItemInput, InventoryItemUncheckedUpdateWithoutItemInput>
    create: XOR<InventoryItemCreateWithoutItemInput, InventoryItemUncheckedCreateWithoutItemInput>
  }

  export type InventoryItemUpdateWithWhereUniqueWithoutItemInput = {
    where: InventoryItemWhereUniqueInput
    data: XOR<InventoryItemUpdateWithoutItemInput, InventoryItemUncheckedUpdateWithoutItemInput>
  }

  export type InventoryItemUpdateManyWithWhereWithoutItemInput = {
    where: InventoryItemScalarWhereInput
    data: XOR<InventoryItemUpdateManyMutationInput, InventoryItemUncheckedUpdateManyWithoutItemInput>
  }

  export type ItemTransactionHistoryUpsertWithWhereUniqueWithoutItemInput = {
    where: ItemTransactionHistoryWhereUniqueInput
    update: XOR<ItemTransactionHistoryUpdateWithoutItemInput, ItemTransactionHistoryUncheckedUpdateWithoutItemInput>
    create: XOR<ItemTransactionHistoryCreateWithoutItemInput, ItemTransactionHistoryUncheckedCreateWithoutItemInput>
  }

  export type ItemTransactionHistoryUpdateWithWhereUniqueWithoutItemInput = {
    where: ItemTransactionHistoryWhereUniqueInput
    data: XOR<ItemTransactionHistoryUpdateWithoutItemInput, ItemTransactionHistoryUncheckedUpdateWithoutItemInput>
  }

  export type ItemTransactionHistoryUpdateManyWithWhereWithoutItemInput = {
    where: ItemTransactionHistoryScalarWhereInput
    data: XOR<ItemTransactionHistoryUpdateManyMutationInput, ItemTransactionHistoryUncheckedUpdateManyWithoutItemInput>
  }

  export type CampaignCreateWithoutItemTransactionHistoryInput = {
    id?: bigint | number
    name: string
    description: string
    active: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCampaignInput
    campaignUsers?: CampaignUserCreateNestedManyWithoutCampaignInput
    items?: ItemsCreateNestedManyWithoutCampaignInput
    spells?: SpellsCreateNestedManyWithoutCampaignInput
    levelingRules?: LevelingRuleCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutItemTransactionHistoryInput = {
    id?: bigint | number
    name: string
    description: string
    active: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCampaignInput
    campaignUsers?: CampaignUserUncheckedCreateNestedManyWithoutCampaignInput
    items?: ItemsUncheckedCreateNestedManyWithoutCampaignInput
    spells?: SpellsUncheckedCreateNestedManyWithoutCampaignInput
    levelingRules?: LevelingRuleUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutItemTransactionHistoryInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutItemTransactionHistoryInput, CampaignUncheckedCreateWithoutItemTransactionHistoryInput>
  }

  export type ItemsCreateWithoutTransactionHistoriesInput = {
    id?: bigint | number
    type: string
    rarity: string
    name: string
    slot: string
    attributes: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutItemsInput
    inventoryItems?: InventoryItemCreateNestedManyWithoutItemInput
  }

  export type ItemsUncheckedCreateWithoutTransactionHistoriesInput = {
    id?: bigint | number
    campaignId: bigint | number
    type: string
    rarity: string
    name: string
    slot: string
    attributes: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    inventoryItems?: InventoryItemUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemsCreateOrConnectWithoutTransactionHistoriesInput = {
    where: ItemsWhereUniqueInput
    create: XOR<ItemsCreateWithoutTransactionHistoriesInput, ItemsUncheckedCreateWithoutTransactionHistoriesInput>
  }

  export type InventoryCreateWithoutTransactionsInput = {
    id?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    character: CharacterCreateNestedOneWithoutInventoryInput
    inventoryItems?: InventoryItemCreateNestedManyWithoutInventoryInput
    Currency?: CurrencyCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUncheckedCreateWithoutTransactionsInput = {
    id?: bigint | number
    characterId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    inventoryItems?: InventoryItemUncheckedCreateNestedManyWithoutInventoryInput
    Currency?: CurrencyUncheckedCreateNestedManyWithoutInventoryInput
  }

  export type InventoryCreateOrConnectWithoutTransactionsInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutTransactionsInput, InventoryUncheckedCreateWithoutTransactionsInput>
  }

  export type CampaignUpsertWithoutItemTransactionHistoryInput = {
    update: XOR<CampaignUpdateWithoutItemTransactionHistoryInput, CampaignUncheckedUpdateWithoutItemTransactionHistoryInput>
    create: XOR<CampaignCreateWithoutItemTransactionHistoryInput, CampaignUncheckedCreateWithoutItemTransactionHistoryInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutItemTransactionHistoryInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutItemTransactionHistoryInput, CampaignUncheckedUpdateWithoutItemTransactionHistoryInput>
  }

  export type CampaignUpdateWithoutItemTransactionHistoryInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCampaignNestedInput
    campaignUsers?: CampaignUserUpdateManyWithoutCampaignNestedInput
    items?: ItemsUpdateManyWithoutCampaignNestedInput
    spells?: SpellsUpdateManyWithoutCampaignNestedInput
    levelingRules?: LevelingRuleUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutItemTransactionHistoryInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCampaignNestedInput
    campaignUsers?: CampaignUserUncheckedUpdateManyWithoutCampaignNestedInput
    items?: ItemsUncheckedUpdateManyWithoutCampaignNestedInput
    spells?: SpellsUncheckedUpdateManyWithoutCampaignNestedInput
    levelingRules?: LevelingRuleUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type ItemsUpsertWithoutTransactionHistoriesInput = {
    update: XOR<ItemsUpdateWithoutTransactionHistoriesInput, ItemsUncheckedUpdateWithoutTransactionHistoriesInput>
    create: XOR<ItemsCreateWithoutTransactionHistoriesInput, ItemsUncheckedCreateWithoutTransactionHistoriesInput>
    where?: ItemsWhereInput
  }

  export type ItemsUpdateToOneWithWhereWithoutTransactionHistoriesInput = {
    where?: ItemsWhereInput
    data: XOR<ItemsUpdateWithoutTransactionHistoriesInput, ItemsUncheckedUpdateWithoutTransactionHistoriesInput>
  }

  export type ItemsUpdateWithoutTransactionHistoriesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    rarity?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slot?: StringFieldUpdateOperationsInput | string
    attributes?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutItemsNestedInput
    inventoryItems?: InventoryItemUpdateManyWithoutItemNestedInput
  }

  export type ItemsUncheckedUpdateWithoutTransactionHistoriesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    rarity?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slot?: StringFieldUpdateOperationsInput | string
    attributes?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventoryItems?: InventoryItemUncheckedUpdateManyWithoutItemNestedInput
  }

  export type InventoryUpsertWithoutTransactionsInput = {
    update: XOR<InventoryUpdateWithoutTransactionsInput, InventoryUncheckedUpdateWithoutTransactionsInput>
    create: XOR<InventoryCreateWithoutTransactionsInput, InventoryUncheckedCreateWithoutTransactionsInput>
    where?: InventoryWhereInput
  }

  export type InventoryUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: InventoryWhereInput
    data: XOR<InventoryUpdateWithoutTransactionsInput, InventoryUncheckedUpdateWithoutTransactionsInput>
  }

  export type InventoryUpdateWithoutTransactionsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character?: CharacterUpdateOneRequiredWithoutInventoryNestedInput
    inventoryItems?: InventoryItemUpdateManyWithoutInventoryNestedInput
    Currency?: CurrencyUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateWithoutTransactionsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    characterId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventoryItems?: InventoryItemUncheckedUpdateManyWithoutInventoryNestedInput
    Currency?: CurrencyUncheckedUpdateManyWithoutInventoryNestedInput
  }

  export type CharacterCreateWithoutEquippedItemsInput = {
    id?: bigint | number
    name: string
    avatar?: string | null
    sheet: JsonNullValueInput | InputJsonValue
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCharactersInput
    campaign: CampaignCreateNestedOneWithoutCharactersInput
    inventory?: InventoryCreateNestedOneWithoutCharacterInput
    equippedSpells?: EquippedSpellCreateNestedManyWithoutCharacterInput
    battleHistory?: CharacterBattleHistoryCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutEquippedItemsInput = {
    id?: bigint | number
    userId: bigint | number
    campaignId: bigint | number
    name: string
    avatar?: string | null
    sheet: JsonNullValueInput | InputJsonValue
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    inventory?: InventoryUncheckedCreateNestedOneWithoutCharacterInput
    equippedSpells?: EquippedSpellUncheckedCreateNestedManyWithoutCharacterInput
    battleHistory?: CharacterBattleHistoryUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutEquippedItemsInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutEquippedItemsInput, CharacterUncheckedCreateWithoutEquippedItemsInput>
  }

  export type InventoryItemCreateWithoutEquippedItemInput = {
    id?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    inventory: InventoryCreateNestedOneWithoutInventoryItemsInput
    item: ItemsCreateNestedOneWithoutInventoryItemsInput
  }

  export type InventoryItemUncheckedCreateWithoutEquippedItemInput = {
    id?: bigint | number
    inventoryId: bigint | number
    itemsId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryItemCreateOrConnectWithoutEquippedItemInput = {
    where: InventoryItemWhereUniqueInput
    create: XOR<InventoryItemCreateWithoutEquippedItemInput, InventoryItemUncheckedCreateWithoutEquippedItemInput>
  }

  export type CharacterUpsertWithoutEquippedItemsInput = {
    update: XOR<CharacterUpdateWithoutEquippedItemsInput, CharacterUncheckedUpdateWithoutEquippedItemsInput>
    create: XOR<CharacterCreateWithoutEquippedItemsInput, CharacterUncheckedCreateWithoutEquippedItemsInput>
    where?: CharacterWhereInput
  }

  export type CharacterUpdateToOneWithWhereWithoutEquippedItemsInput = {
    where?: CharacterWhereInput
    data: XOR<CharacterUpdateWithoutEquippedItemsInput, CharacterUncheckedUpdateWithoutEquippedItemsInput>
  }

  export type CharacterUpdateWithoutEquippedItemsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sheet?: JsonNullValueInput | InputJsonValue
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCharactersNestedInput
    campaign?: CampaignUpdateOneRequiredWithoutCharactersNestedInput
    inventory?: InventoryUpdateOneWithoutCharacterNestedInput
    equippedSpells?: EquippedSpellUpdateManyWithoutCharacterNestedInput
    battleHistory?: CharacterBattleHistoryUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutEquippedItemsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sheet?: JsonNullValueInput | InputJsonValue
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: InventoryUncheckedUpdateOneWithoutCharacterNestedInput
    equippedSpells?: EquippedSpellUncheckedUpdateManyWithoutCharacterNestedInput
    battleHistory?: CharacterBattleHistoryUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type InventoryItemUpsertWithoutEquippedItemInput = {
    update: XOR<InventoryItemUpdateWithoutEquippedItemInput, InventoryItemUncheckedUpdateWithoutEquippedItemInput>
    create: XOR<InventoryItemCreateWithoutEquippedItemInput, InventoryItemUncheckedCreateWithoutEquippedItemInput>
    where?: InventoryItemWhereInput
  }

  export type InventoryItemUpdateToOneWithWhereWithoutEquippedItemInput = {
    where?: InventoryItemWhereInput
    data: XOR<InventoryItemUpdateWithoutEquippedItemInput, InventoryItemUncheckedUpdateWithoutEquippedItemInput>
  }

  export type InventoryItemUpdateWithoutEquippedItemInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: InventoryUpdateOneRequiredWithoutInventoryItemsNestedInput
    item?: ItemsUpdateOneRequiredWithoutInventoryItemsNestedInput
  }

  export type InventoryItemUncheckedUpdateWithoutEquippedItemInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    inventoryId?: BigIntFieldUpdateOperationsInput | bigint | number
    itemsId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignCreateWithoutSpellsInput = {
    id?: bigint | number
    name: string
    description: string
    active: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCampaignInput
    campaignUsers?: CampaignUserCreateNestedManyWithoutCampaignInput
    items?: ItemsCreateNestedManyWithoutCampaignInput
    levelingRules?: LevelingRuleCreateNestedManyWithoutCampaignInput
    ItemTransactionHistory?: ItemTransactionHistoryCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutSpellsInput = {
    id?: bigint | number
    name: string
    description: string
    active: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCampaignInput
    campaignUsers?: CampaignUserUncheckedCreateNestedManyWithoutCampaignInput
    items?: ItemsUncheckedCreateNestedManyWithoutCampaignInput
    levelingRules?: LevelingRuleUncheckedCreateNestedManyWithoutCampaignInput
    ItemTransactionHistory?: ItemTransactionHistoryUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutSpellsInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutSpellsInput, CampaignUncheckedCreateWithoutSpellsInput>
  }

  export type EquippedSpellCreateWithoutSpellInput = {
    id?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    character: CharacterCreateNestedOneWithoutEquippedSpellsInput
  }

  export type EquippedSpellUncheckedCreateWithoutSpellInput = {
    id?: bigint | number
    characterId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquippedSpellCreateOrConnectWithoutSpellInput = {
    where: EquippedSpellWhereUniqueInput
    create: XOR<EquippedSpellCreateWithoutSpellInput, EquippedSpellUncheckedCreateWithoutSpellInput>
  }

  export type EquippedSpellCreateManySpellInputEnvelope = {
    data: EquippedSpellCreateManySpellInput | EquippedSpellCreateManySpellInput[]
    skipDuplicates?: boolean
  }

  export type CampaignUpsertWithoutSpellsInput = {
    update: XOR<CampaignUpdateWithoutSpellsInput, CampaignUncheckedUpdateWithoutSpellsInput>
    create: XOR<CampaignCreateWithoutSpellsInput, CampaignUncheckedCreateWithoutSpellsInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutSpellsInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutSpellsInput, CampaignUncheckedUpdateWithoutSpellsInput>
  }

  export type CampaignUpdateWithoutSpellsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCampaignNestedInput
    campaignUsers?: CampaignUserUpdateManyWithoutCampaignNestedInput
    items?: ItemsUpdateManyWithoutCampaignNestedInput
    levelingRules?: LevelingRuleUpdateManyWithoutCampaignNestedInput
    ItemTransactionHistory?: ItemTransactionHistoryUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutSpellsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCampaignNestedInput
    campaignUsers?: CampaignUserUncheckedUpdateManyWithoutCampaignNestedInput
    items?: ItemsUncheckedUpdateManyWithoutCampaignNestedInput
    levelingRules?: LevelingRuleUncheckedUpdateManyWithoutCampaignNestedInput
    ItemTransactionHistory?: ItemTransactionHistoryUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type EquippedSpellUpsertWithWhereUniqueWithoutSpellInput = {
    where: EquippedSpellWhereUniqueInput
    update: XOR<EquippedSpellUpdateWithoutSpellInput, EquippedSpellUncheckedUpdateWithoutSpellInput>
    create: XOR<EquippedSpellCreateWithoutSpellInput, EquippedSpellUncheckedCreateWithoutSpellInput>
  }

  export type EquippedSpellUpdateWithWhereUniqueWithoutSpellInput = {
    where: EquippedSpellWhereUniqueInput
    data: XOR<EquippedSpellUpdateWithoutSpellInput, EquippedSpellUncheckedUpdateWithoutSpellInput>
  }

  export type EquippedSpellUpdateManyWithWhereWithoutSpellInput = {
    where: EquippedSpellScalarWhereInput
    data: XOR<EquippedSpellUpdateManyMutationInput, EquippedSpellUncheckedUpdateManyWithoutSpellInput>
  }

  export type CharacterCreateWithoutEquippedSpellsInput = {
    id?: bigint | number
    name: string
    avatar?: string | null
    sheet: JsonNullValueInput | InputJsonValue
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCharactersInput
    campaign: CampaignCreateNestedOneWithoutCharactersInput
    inventory?: InventoryCreateNestedOneWithoutCharacterInput
    equippedItems?: EquippedItemCreateNestedManyWithoutCharacterInput
    battleHistory?: CharacterBattleHistoryCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutEquippedSpellsInput = {
    id?: bigint | number
    userId: bigint | number
    campaignId: bigint | number
    name: string
    avatar?: string | null
    sheet: JsonNullValueInput | InputJsonValue
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    inventory?: InventoryUncheckedCreateNestedOneWithoutCharacterInput
    equippedItems?: EquippedItemUncheckedCreateNestedManyWithoutCharacterInput
    battleHistory?: CharacterBattleHistoryUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutEquippedSpellsInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutEquippedSpellsInput, CharacterUncheckedCreateWithoutEquippedSpellsInput>
  }

  export type SpellsCreateWithoutEquippedSpellsInput = {
    id?: bigint | number
    name: string
    type: string
    description?: string | null
    specifications: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutSpellsInput
  }

  export type SpellsUncheckedCreateWithoutEquippedSpellsInput = {
    id?: bigint | number
    campaignId: bigint | number
    name: string
    type: string
    description?: string | null
    specifications: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SpellsCreateOrConnectWithoutEquippedSpellsInput = {
    where: SpellsWhereUniqueInput
    create: XOR<SpellsCreateWithoutEquippedSpellsInput, SpellsUncheckedCreateWithoutEquippedSpellsInput>
  }

  export type CharacterUpsertWithoutEquippedSpellsInput = {
    update: XOR<CharacterUpdateWithoutEquippedSpellsInput, CharacterUncheckedUpdateWithoutEquippedSpellsInput>
    create: XOR<CharacterCreateWithoutEquippedSpellsInput, CharacterUncheckedCreateWithoutEquippedSpellsInput>
    where?: CharacterWhereInput
  }

  export type CharacterUpdateToOneWithWhereWithoutEquippedSpellsInput = {
    where?: CharacterWhereInput
    data: XOR<CharacterUpdateWithoutEquippedSpellsInput, CharacterUncheckedUpdateWithoutEquippedSpellsInput>
  }

  export type CharacterUpdateWithoutEquippedSpellsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sheet?: JsonNullValueInput | InputJsonValue
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCharactersNestedInput
    campaign?: CampaignUpdateOneRequiredWithoutCharactersNestedInput
    inventory?: InventoryUpdateOneWithoutCharacterNestedInput
    equippedItems?: EquippedItemUpdateManyWithoutCharacterNestedInput
    battleHistory?: CharacterBattleHistoryUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutEquippedSpellsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sheet?: JsonNullValueInput | InputJsonValue
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: InventoryUncheckedUpdateOneWithoutCharacterNestedInput
    equippedItems?: EquippedItemUncheckedUpdateManyWithoutCharacterNestedInput
    battleHistory?: CharacterBattleHistoryUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type SpellsUpsertWithoutEquippedSpellsInput = {
    update: XOR<SpellsUpdateWithoutEquippedSpellsInput, SpellsUncheckedUpdateWithoutEquippedSpellsInput>
    create: XOR<SpellsCreateWithoutEquippedSpellsInput, SpellsUncheckedCreateWithoutEquippedSpellsInput>
    where?: SpellsWhereInput
  }

  export type SpellsUpdateToOneWithWhereWithoutEquippedSpellsInput = {
    where?: SpellsWhereInput
    data: XOR<SpellsUpdateWithoutEquippedSpellsInput, SpellsUncheckedUpdateWithoutEquippedSpellsInput>
  }

  export type SpellsUpdateWithoutEquippedSpellsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutSpellsNestedInput
  }

  export type SpellsUncheckedUpdateWithoutEquippedSpellsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterCreateWithoutBattleHistoryInput = {
    id?: bigint | number
    name: string
    avatar?: string | null
    sheet: JsonNullValueInput | InputJsonValue
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCharactersInput
    campaign: CampaignCreateNestedOneWithoutCharactersInput
    inventory?: InventoryCreateNestedOneWithoutCharacterInput
    equippedItems?: EquippedItemCreateNestedManyWithoutCharacterInput
    equippedSpells?: EquippedSpellCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutBattleHistoryInput = {
    id?: bigint | number
    userId: bigint | number
    campaignId: bigint | number
    name: string
    avatar?: string | null
    sheet: JsonNullValueInput | InputJsonValue
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    inventory?: InventoryUncheckedCreateNestedOneWithoutCharacterInput
    equippedItems?: EquippedItemUncheckedCreateNestedManyWithoutCharacterInput
    equippedSpells?: EquippedSpellUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutBattleHistoryInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutBattleHistoryInput, CharacterUncheckedCreateWithoutBattleHistoryInput>
  }

  export type CharacterUpsertWithoutBattleHistoryInput = {
    update: XOR<CharacterUpdateWithoutBattleHistoryInput, CharacterUncheckedUpdateWithoutBattleHistoryInput>
    create: XOR<CharacterCreateWithoutBattleHistoryInput, CharacterUncheckedCreateWithoutBattleHistoryInput>
    where?: CharacterWhereInput
  }

  export type CharacterUpdateToOneWithWhereWithoutBattleHistoryInput = {
    where?: CharacterWhereInput
    data: XOR<CharacterUpdateWithoutBattleHistoryInput, CharacterUncheckedUpdateWithoutBattleHistoryInput>
  }

  export type CharacterUpdateWithoutBattleHistoryInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sheet?: JsonNullValueInput | InputJsonValue
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCharactersNestedInput
    campaign?: CampaignUpdateOneRequiredWithoutCharactersNestedInput
    inventory?: InventoryUpdateOneWithoutCharacterNestedInput
    equippedItems?: EquippedItemUpdateManyWithoutCharacterNestedInput
    equippedSpells?: EquippedSpellUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutBattleHistoryInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sheet?: JsonNullValueInput | InputJsonValue
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: InventoryUncheckedUpdateOneWithoutCharacterNestedInput
    equippedItems?: EquippedItemUncheckedUpdateManyWithoutCharacterNestedInput
    equippedSpells?: EquippedSpellUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type CampaignCreateWithoutLevelingRulesInput = {
    id?: bigint | number
    name: string
    description: string
    active: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutCampaignInput
    campaignUsers?: CampaignUserCreateNestedManyWithoutCampaignInput
    items?: ItemsCreateNestedManyWithoutCampaignInput
    spells?: SpellsCreateNestedManyWithoutCampaignInput
    ItemTransactionHistory?: ItemTransactionHistoryCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutLevelingRulesInput = {
    id?: bigint | number
    name: string
    description: string
    active: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCampaignInput
    campaignUsers?: CampaignUserUncheckedCreateNestedManyWithoutCampaignInput
    items?: ItemsUncheckedCreateNestedManyWithoutCampaignInput
    spells?: SpellsUncheckedCreateNestedManyWithoutCampaignInput
    ItemTransactionHistory?: ItemTransactionHistoryUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutLevelingRulesInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutLevelingRulesInput, CampaignUncheckedCreateWithoutLevelingRulesInput>
  }

  export type CampaignUpsertWithoutLevelingRulesInput = {
    update: XOR<CampaignUpdateWithoutLevelingRulesInput, CampaignUncheckedUpdateWithoutLevelingRulesInput>
    create: XOR<CampaignCreateWithoutLevelingRulesInput, CampaignUncheckedCreateWithoutLevelingRulesInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutLevelingRulesInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutLevelingRulesInput, CampaignUncheckedUpdateWithoutLevelingRulesInput>
  }

  export type CampaignUpdateWithoutLevelingRulesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutCampaignNestedInput
    campaignUsers?: CampaignUserUpdateManyWithoutCampaignNestedInput
    items?: ItemsUpdateManyWithoutCampaignNestedInput
    spells?: SpellsUpdateManyWithoutCampaignNestedInput
    ItemTransactionHistory?: ItemTransactionHistoryUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutLevelingRulesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCampaignNestedInput
    campaignUsers?: CampaignUserUncheckedUpdateManyWithoutCampaignNestedInput
    items?: ItemsUncheckedUpdateManyWithoutCampaignNestedInput
    spells?: SpellsUncheckedUpdateManyWithoutCampaignNestedInput
    ItemTransactionHistory?: ItemTransactionHistoryUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type CharacterCreateManyUserInput = {
    id?: bigint | number
    campaignId: bigint | number
    name: string
    avatar?: string | null
    sheet: JsonNullValueInput | InputJsonValue
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CampaignUserCreateManyUserInput = {
    id?: bigint | number
    campaignId: bigint | number
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sheet?: JsonNullValueInput | InputJsonValue
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutCharactersNestedInput
    inventory?: InventoryUpdateOneWithoutCharacterNestedInput
    equippedItems?: EquippedItemUpdateManyWithoutCharacterNestedInput
    equippedSpells?: EquippedSpellUpdateManyWithoutCharacterNestedInput
    battleHistory?: CharacterBattleHistoryUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sheet?: JsonNullValueInput | InputJsonValue
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: InventoryUncheckedUpdateOneWithoutCharacterNestedInput
    equippedItems?: EquippedItemUncheckedUpdateManyWithoutCharacterNestedInput
    equippedSpells?: EquippedSpellUncheckedUpdateManyWithoutCharacterNestedInput
    battleHistory?: CharacterBattleHistoryUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateManyWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sheet?: JsonNullValueInput | InputJsonValue
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignUserUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutCampaignUsersNestedInput
  }

  export type CampaignUserUncheckedUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignUserUncheckedUpdateManyWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterCreateManyCampaignInput = {
    id?: bigint | number
    userId: bigint | number
    name: string
    avatar?: string | null
    sheet: JsonNullValueInput | InputJsonValue
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CampaignUserCreateManyCampaignInput = {
    id?: bigint | number
    userId: bigint | number
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemsCreateManyCampaignInput = {
    id?: bigint | number
    type: string
    rarity: string
    name: string
    slot: string
    attributes: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SpellsCreateManyCampaignInput = {
    id?: bigint | number
    name: string
    type: string
    description?: string | null
    specifications: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LevelingRuleCreateManyCampaignInput = {
    id?: bigint | number
    level: bigint | number
    requiredXp: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemTransactionHistoryCreateManyCampaignInput = {
    id?: bigint | number
    itemId: bigint | number
    inventoryId: bigint | number
    fromInventoryId?: bigint | number | null
    transactionType: string
    amount?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterUpdateWithoutCampaignInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sheet?: JsonNullValueInput | InputJsonValue
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCharactersNestedInput
    inventory?: InventoryUpdateOneWithoutCharacterNestedInput
    equippedItems?: EquippedItemUpdateManyWithoutCharacterNestedInput
    equippedSpells?: EquippedSpellUpdateManyWithoutCharacterNestedInput
    battleHistory?: CharacterBattleHistoryUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutCampaignInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sheet?: JsonNullValueInput | InputJsonValue
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: InventoryUncheckedUpdateOneWithoutCharacterNestedInput
    equippedItems?: EquippedItemUncheckedUpdateManyWithoutCharacterNestedInput
    equippedSpells?: EquippedSpellUncheckedUpdateManyWithoutCharacterNestedInput
    battleHistory?: CharacterBattleHistoryUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateManyWithoutCampaignInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sheet?: JsonNullValueInput | InputJsonValue
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignUserUpdateWithoutCampaignInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCampaignUsersNestedInput
  }

  export type CampaignUserUncheckedUpdateWithoutCampaignInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignUserUncheckedUpdateManyWithoutCampaignInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemsUpdateWithoutCampaignInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    rarity?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slot?: StringFieldUpdateOperationsInput | string
    attributes?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventoryItems?: InventoryItemUpdateManyWithoutItemNestedInput
    transactionHistories?: ItemTransactionHistoryUpdateManyWithoutItemNestedInput
  }

  export type ItemsUncheckedUpdateWithoutCampaignInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    rarity?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slot?: StringFieldUpdateOperationsInput | string
    attributes?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventoryItems?: InventoryItemUncheckedUpdateManyWithoutItemNestedInput
    transactionHistories?: ItemTransactionHistoryUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemsUncheckedUpdateManyWithoutCampaignInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    rarity?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slot?: StringFieldUpdateOperationsInput | string
    attributes?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpellsUpdateWithoutCampaignInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equippedSpells?: EquippedSpellUpdateManyWithoutSpellNestedInput
  }

  export type SpellsUncheckedUpdateWithoutCampaignInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equippedSpells?: EquippedSpellUncheckedUpdateManyWithoutSpellNestedInput
  }

  export type SpellsUncheckedUpdateManyWithoutCampaignInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LevelingRuleUpdateWithoutCampaignInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    level?: BigIntFieldUpdateOperationsInput | bigint | number
    requiredXp?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LevelingRuleUncheckedUpdateWithoutCampaignInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    level?: BigIntFieldUpdateOperationsInput | bigint | number
    requiredXp?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LevelingRuleUncheckedUpdateManyWithoutCampaignInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    level?: BigIntFieldUpdateOperationsInput | bigint | number
    requiredXp?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemTransactionHistoryUpdateWithoutCampaignInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    fromInventoryId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    transactionType?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemsUpdateOneRequiredWithoutTransactionHistoriesNestedInput
    inventory?: InventoryUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type ItemTransactionHistoryUncheckedUpdateWithoutCampaignInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    itemId?: BigIntFieldUpdateOperationsInput | bigint | number
    inventoryId?: BigIntFieldUpdateOperationsInput | bigint | number
    fromInventoryId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    transactionType?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemTransactionHistoryUncheckedUpdateManyWithoutCampaignInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    itemId?: BigIntFieldUpdateOperationsInput | bigint | number
    inventoryId?: BigIntFieldUpdateOperationsInput | bigint | number
    fromInventoryId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    transactionType?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquippedItemCreateManyCharacterInput = {
    id?: bigint | number
    inventoryItemId: bigint | number
    slot: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquippedSpellCreateManyCharacterInput = {
    id?: bigint | number
    spellId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterBattleHistoryCreateManyCharacterInput = {
    id?: bigint | number
    sourceType: string
    description?: string | null
    xpGained: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquippedItemUpdateWithoutCharacterInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    slot?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventoryItem?: InventoryItemUpdateOneRequiredWithoutEquippedItemNestedInput
  }

  export type EquippedItemUncheckedUpdateWithoutCharacterInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    inventoryItemId?: BigIntFieldUpdateOperationsInput | bigint | number
    slot?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquippedItemUncheckedUpdateManyWithoutCharacterInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    inventoryItemId?: BigIntFieldUpdateOperationsInput | bigint | number
    slot?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquippedSpellUpdateWithoutCharacterInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spell?: SpellsUpdateOneRequiredWithoutEquippedSpellsNestedInput
  }

  export type EquippedSpellUncheckedUpdateWithoutCharacterInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spellId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquippedSpellUncheckedUpdateManyWithoutCharacterInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spellId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterBattleHistoryUpdateWithoutCharacterInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    sourceType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    xpGained?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterBattleHistoryUncheckedUpdateWithoutCharacterInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    sourceType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    xpGained?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterBattleHistoryUncheckedUpdateManyWithoutCharacterInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    sourceType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    xpGained?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemCreateManyInventoryInput = {
    id?: bigint | number
    itemsId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemTransactionHistoryCreateManyInventoryInput = {
    id?: bigint | number
    campaignId: bigint | number
    itemId: bigint | number
    fromInventoryId?: bigint | number | null
    transactionType: string
    amount?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrencyCreateManyInventoryInput = {
    id?: bigint | number
    name: string
    amount: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryItemUpdateWithoutInventoryInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemsUpdateOneRequiredWithoutInventoryItemsNestedInput
    equippedItem?: EquippedItemUpdateOneWithoutInventoryItemNestedInput
  }

  export type InventoryItemUncheckedUpdateWithoutInventoryInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    itemsId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equippedItem?: EquippedItemUncheckedUpdateOneWithoutInventoryItemNestedInput
  }

  export type InventoryItemUncheckedUpdateManyWithoutInventoryInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    itemsId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemTransactionHistoryUpdateWithoutInventoryInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    fromInventoryId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    transactionType?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutItemTransactionHistoryNestedInput
    item?: ItemsUpdateOneRequiredWithoutTransactionHistoriesNestedInput
  }

  export type ItemTransactionHistoryUncheckedUpdateWithoutInventoryInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    itemId?: BigIntFieldUpdateOperationsInput | bigint | number
    fromInventoryId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    transactionType?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemTransactionHistoryUncheckedUpdateManyWithoutInventoryInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    itemId?: BigIntFieldUpdateOperationsInput | bigint | number
    fromInventoryId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    transactionType?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrencyUpdateWithoutInventoryInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrencyUncheckedUpdateWithoutInventoryInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrencyUncheckedUpdateManyWithoutInventoryInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemCreateManyItemInput = {
    id?: bigint | number
    inventoryId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemTransactionHistoryCreateManyItemInput = {
    id?: bigint | number
    campaignId: bigint | number
    inventoryId: bigint | number
    fromInventoryId?: bigint | number | null
    transactionType: string
    amount?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryItemUpdateWithoutItemInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: InventoryUpdateOneRequiredWithoutInventoryItemsNestedInput
    equippedItem?: EquippedItemUpdateOneWithoutInventoryItemNestedInput
  }

  export type InventoryItemUncheckedUpdateWithoutItemInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    inventoryId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equippedItem?: EquippedItemUncheckedUpdateOneWithoutInventoryItemNestedInput
  }

  export type InventoryItemUncheckedUpdateManyWithoutItemInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    inventoryId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemTransactionHistoryUpdateWithoutItemInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    fromInventoryId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    transactionType?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutItemTransactionHistoryNestedInput
    inventory?: InventoryUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type ItemTransactionHistoryUncheckedUpdateWithoutItemInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    inventoryId?: BigIntFieldUpdateOperationsInput | bigint | number
    fromInventoryId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    transactionType?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemTransactionHistoryUncheckedUpdateManyWithoutItemInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    campaignId?: BigIntFieldUpdateOperationsInput | bigint | number
    inventoryId?: BigIntFieldUpdateOperationsInput | bigint | number
    fromInventoryId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    transactionType?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquippedSpellCreateManySpellInput = {
    id?: bigint | number
    characterId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquippedSpellUpdateWithoutSpellInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character?: CharacterUpdateOneRequiredWithoutEquippedSpellsNestedInput
  }

  export type EquippedSpellUncheckedUpdateWithoutSpellInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    characterId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquippedSpellUncheckedUpdateManyWithoutSpellInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    characterId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}